/*! For license information please see app.js.LICENSE.txt */
(()=>{var t={228:(t,e,n)=>{"use strict";n.d(e,{A:()=>a});var i=n(354),o=n.n(i),s=n(314),r=n.n(s)()(o());r.push([t.id,"@media screen and (max-width: 1399px) {\n\n    .navigation-times .btn {\n        margin-bottom: 10px;\n    }\n\n    .overlay .delete-block {\n        padding: 20px;\n        font-size: 14px;\n    }\n}\n\n\n@media screen and (max-width: 767px) {\n\n    body .main {\n        grid-template-columns: 100%;\n    }\n\n    .menu {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        background: white;\n    }\n\n    .menu .sidebar-header {\n        padding: 10px;\n        border: 0;\n    }\n\n    .burger {\n        position: relative;\n        margin: 10px;\n        z-index: 1;\n        cursor: pointer;\n        display: block;\n        border: none;\n        background: transparent;\n        width: 30px;\n        height: 26px;\n    }\n\n    .burger::before,\n    .burger::after {\n        content: '';\n        left: 0;\n        position: absolute;\n        display: block;\n        width: 100%;\n        height: 4px;\n        border-radius: 10px;\n        background: #00005b;\n    }\n\n    .burger::before {\n        top: 0;\n        box-shadow: 0 11px 0 #00005b;\n        transition: box-shadow .3s .15s, top .3s .15s, transform .3s;\n    }\n\n    .burger::after {\n        bottom: 0;\n        transition: bottom .3s .15s, transform .3s;\n    }\n\n    .burger-checkbox:checked + .burger::before {\n        top: 11px;\n        transform: rotate(45deg);\n        box-shadow: 0 6px 0 rgba(0, 0, 0, 0);\n        transition: box-shadow .15s, top .3s, transform .3s .15s;\n    }\n\n    .burger-checkbox:checked + .burger::after {\n        bottom: 11px;\n        transform: rotate(-45deg);\n        transition: bottom .3s, transform .3s .15s;\n    }\n\n    .menu-list {\n        top: 0;\n        left: 0;\n        position: absolute;\n        display: grid;\n        gap: 0;\n        padding: 50px 10px;\n        margin: 0;\n        background: rgb(61, 61, 225);\n        list-style-type: none;\n        transform: translateX(-100%);\n        transition: .3s;\n        width: 200px;\n        border-radius: 0 0 10px 0;\n    }\n\n    .menu-list .total {\n        font-size: 16px;\n        margin: 60px 0 10px;\n    }\n\n    .menu-list .sidebar-footer {\n        padding: 10px 0;\n        font-size: 14px;\n    }\n\n    .menu-item {\n        display: block;\n        padding: 8px;\n        color: white;\n        font-size: 18px;\n        text-align: center;\n        text-decoration: none;\n    }\n\n    .menu-item a, .menu-item .btn, .menu-item .total-sum {\n        color: #FFFFFF;\n    }\n\n    .menu-item svg path {\n        fill: white;\n    }\n\n    .burger-checkbox:checked ~ .menu-list {\n        transform: translateX(0);\n    }\n\n    .main .navigation-times {\n        margin-bottom:  30px;\n    }\n\n    .main .main-info, .income-page .main-info, .expenses-page .main-info, .income-expenses .main-info {\n        padding: 70px 20px;\n    }\n\n    .diagrams .income, .diagrams .expenses {\n        max-width: 85%;\n    }\n\n    .diagrams .income-diagram-img, .diagrams .expenses-diagram-img {\n        margin-bottom: 0;\n    }\n\n    .overlay .delete-block {\n        padding: 10px;\n        font-size: 14px;\n    }\n\n    .overlay .delete-block-actions .btn{\n        font-size: 14px;\n    }\n}\n\n@media screen and (max-width: 430px) {\n    .login .form-signin, .sign-in .form-signin {\n        max-width: 90%;\n    }\n}\n\n","",{version:3,sources:["webpack://./src/styles/adaptive.css"],names:[],mappings:"AAAA;;IAEI;QACI,mBAAmB;IACvB;;IAEA;QACI,aAAa;QACb,eAAe;IACnB;AACJ;;;AAGA;;IAEI;QACI,2BAA2B;IAC/B;;IAEA;QACI,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,WAAW;QACX,iBAAiB;IACrB;;IAEA;QACI,aAAa;QACb,SAAS;IACb;;IAEA;QACI,kBAAkB;QAClB,YAAY;QACZ,UAAU;QACV,eAAe;QACf,cAAc;QACd,YAAY;QACZ,uBAAuB;QACvB,WAAW;QACX,YAAY;IAChB;;IAEA;;QAEI,WAAW;QACX,OAAO;QACP,kBAAkB;QAClB,cAAc;QACd,WAAW;QACX,WAAW;QACX,mBAAmB;QACnB,mBAAmB;IACvB;;IAEA;QACI,MAAM;QACN,4BAA4B;QAC5B,4DAA4D;IAChE;;IAEA;QACI,SAAS;QACT,0CAA0C;IAC9C;;IAEA;QACI,SAAS;QACT,wBAAwB;QACxB,oCAAoC;QACpC,wDAAwD;IAC5D;;IAEA;QACI,YAAY;QACZ,yBAAyB;QACzB,0CAA0C;IAC9C;;IAEA;QACI,MAAM;QACN,OAAO;QACP,kBAAkB;QAClB,aAAa;QACb,MAAM;QACN,kBAAkB;QAClB,SAAS;QACT,4BAA4B;QAC5B,qBAAqB;QACrB,4BAA4B;QAC5B,eAAe;QACf,YAAY;QACZ,yBAAyB;IAC7B;;IAEA;QACI,eAAe;QACf,mBAAmB;IACvB;;IAEA;QACI,eAAe;QACf,eAAe;IACnB;;IAEA;QACI,cAAc;QACd,YAAY;QACZ,YAAY;QACZ,eAAe;QACf,kBAAkB;QAClB,qBAAqB;IACzB;;IAEA;QACI,cAAc;IAClB;;IAEA;QACI,WAAW;IACf;;IAEA;QACI,wBAAwB;IAC5B;;IAEA;QACI,oBAAoB;IACxB;;IAEA;QACI,kBAAkB;IACtB;;IAEA;QACI,cAAc;IAClB;;IAEA;QACI,gBAAgB;IACpB;;IAEA;QACI,aAAa;QACb,eAAe;IACnB;;IAEA;QACI,eAAe;IACnB;AACJ;;AAEA;IACI;QACI,cAAc;IAClB;AACJ",sourcesContent:["@media screen and (max-width: 1399px) {\r\n\r\n    .navigation-times .btn {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .overlay .delete-block {\r\n        padding: 20px;\r\n        font-size: 14px;\r\n    }\r\n}\r\n\r\n\r\n@media screen and (max-width: 767px) {\r\n\r\n    body .main {\r\n        grid-template-columns: 100%;\r\n    }\r\n\r\n    .menu {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        background: white;\r\n    }\r\n\r\n    .menu .sidebar-header {\r\n        padding: 10px;\r\n        border: 0;\r\n    }\r\n\r\n    .burger {\r\n        position: relative;\r\n        margin: 10px;\r\n        z-index: 1;\r\n        cursor: pointer;\r\n        display: block;\r\n        border: none;\r\n        background: transparent;\r\n        width: 30px;\r\n        height: 26px;\r\n    }\r\n\r\n    .burger::before,\r\n    .burger::after {\r\n        content: '';\r\n        left: 0;\r\n        position: absolute;\r\n        display: block;\r\n        width: 100%;\r\n        height: 4px;\r\n        border-radius: 10px;\r\n        background: #00005b;\r\n    }\r\n\r\n    .burger::before {\r\n        top: 0;\r\n        box-shadow: 0 11px 0 #00005b;\r\n        transition: box-shadow .3s .15s, top .3s .15s, transform .3s;\r\n    }\r\n\r\n    .burger::after {\r\n        bottom: 0;\r\n        transition: bottom .3s .15s, transform .3s;\r\n    }\r\n\r\n    .burger-checkbox:checked + .burger::before {\r\n        top: 11px;\r\n        transform: rotate(45deg);\r\n        box-shadow: 0 6px 0 rgba(0, 0, 0, 0);\r\n        transition: box-shadow .15s, top .3s, transform .3s .15s;\r\n    }\r\n\r\n    .burger-checkbox:checked + .burger::after {\r\n        bottom: 11px;\r\n        transform: rotate(-45deg);\r\n        transition: bottom .3s, transform .3s .15s;\r\n    }\r\n\r\n    .menu-list {\r\n        top: 0;\r\n        left: 0;\r\n        position: absolute;\r\n        display: grid;\r\n        gap: 0;\r\n        padding: 50px 10px;\r\n        margin: 0;\r\n        background: rgb(61, 61, 225);\r\n        list-style-type: none;\r\n        transform: translateX(-100%);\r\n        transition: .3s;\r\n        width: 200px;\r\n        border-radius: 0 0 10px 0;\r\n    }\r\n\r\n    .menu-list .total {\r\n        font-size: 16px;\r\n        margin: 60px 0 10px;\r\n    }\r\n\r\n    .menu-list .sidebar-footer {\r\n        padding: 10px 0;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .menu-item {\r\n        display: block;\r\n        padding: 8px;\r\n        color: white;\r\n        font-size: 18px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n    }\r\n\r\n    .menu-item a, .menu-item .btn, .menu-item .total-sum {\r\n        color: #FFFFFF;\r\n    }\r\n\r\n    .menu-item svg path {\r\n        fill: white;\r\n    }\r\n\r\n    .burger-checkbox:checked ~ .menu-list {\r\n        transform: translateX(0);\r\n    }\r\n\r\n    .main .navigation-times {\r\n        margin-bottom:  30px;\r\n    }\r\n\r\n    .main .main-info, .income-page .main-info, .expenses-page .main-info, .income-expenses .main-info {\r\n        padding: 70px 20px;\r\n    }\r\n\r\n    .diagrams .income, .diagrams .expenses {\r\n        max-width: 85%;\r\n    }\r\n\r\n    .diagrams .income-diagram-img, .diagrams .expenses-diagram-img {\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    .overlay .delete-block {\r\n        padding: 10px;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .overlay .delete-block-actions .btn{\r\n        font-size: 14px;\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 430px) {\r\n    .login .form-signin, .sign-in .form-signin {\r\n        max-width: 90%;\r\n    }\r\n}\r\n\r\n"],sourceRoot:""}]);const a=r},159:(t,e,n)=>{"use strict";n.d(e,{A:()=>y});var i=n(354),o=n.n(i),s=n(314),r=n.n(s),a=n(228),l=n(417),c=n.n(l),h=new URL(n(636),n.b),u=new URL(n(537),n.b),d=new URL(n(309),n.b),f=new URL(n(330),n.b),p=r()(o());p.i(a.A);var g=c()(h),m=c()(u),b=c()(d),x=c()(f);p.push([t.id,`@font-face {\n    src: url(${g});\n    font-family: "Roboto-Regular";\n}\n\n@font-face {\n    src: url(${m});\n    font-family: "Roboto-Medium";\n}\n\n@font-face {\n    src: url(${b});\n    font-family: "Roboto-Bold";\n}\n\n.sidebar {\n    font-family: "Roboto-Regular", sans-serif;\n    border-right: 1px solid #D9D9D9;\n}\n\n.sidebar-header {\n    padding: 40px 70px 20px 50px;\n    border-bottom: 1px solid #D9D9D9;\n}\n\n.sidebar ul {\n    margin: 60px 20px 20px;\n}\n\n.sidebar-svg {\n    margin-right: 10px;\n}\n\n.nav-link {\n    color: #052C65;\n    padding: 12px 8px 12px 16px;\n    font-size: 14px;\n}\n\n.nav-item button {\n    color: #052C65;\n    padding: 12px 8px 12px 16px;\n    font-size: 14px;\n    font-weight: normal;\n}\n\n.nav-item button:hover {\n    background: #0D6EFD;\n    color: #FFFFFF;\n    border-radius: .375rem .375rem 0 0;\n}\n\n.nav-item .active svg path {\n    fill: #FFFFFF;\n}\n\n.btn-toggle::before {\n    content: none;\n}\n\n.btn-toggle:focus {\n    background: #0D6EFD;\n    color: #ffffff;\n    border-radius: .375rem .375rem 0 0;\n}\n\n.btn-toggle::after {\n    margin-left: 71px;\n    line-height: 0;\n    content: url(${x});\n}\n\n.btn-toggle-nav {\n    list-style: none;\n    font-size: 14px;\n    border: 1px solid #0D6EFD;\n    border-radius: 0 0 .375rem .375rem;\n    z-index: 10;\n}\n\n.btn-toggle-nav li a {\n    padding: 12px 16px;\n    margin: 0 auto;\n}\n\n.btn-toggle-nav li a:hover {\n    background: #0D6EFD;\n    color: #FFFFFF;\n    border-radius: unset;\n}\n\n.btn-toggle-nav a:focus {\n    background: #0D6EFD;\n    color: #FFFFFF;\n}\n\n.btn-toggle-nav li a:last-child:hover {\n    border-radius: 0 0 .375rem .375rem;\n}\n\n.total {\n    margin: 0 20px 20px;\n    font-family: "Roboto-Medium", sans-serif;\n}\n\n.total span {\n    font-family: "Roboto-Medium", sans-serif;\n    margin-right: 10px;\n}\n\n.sidebar-footer {\n    padding: 20px 20px 40px;\n    border-top: 1px solid #D9D9D9;\n}\n\n.burger-checkbox {\n    position: absolute;\n    visibility: hidden;\n}\n\n.main {\n    padding: 100px 60px;\n    font-family: "Roboto-Medium", sans-serif;\n}\n\n.main-title {\n    margin-bottom: 60px;\n}\n\n.navigation-times {\n    margin-bottom: 140px;\n}\n\n.navigation-times .btn {\n    margin-right: 20px;\n    padding-top: 9px;\n    padding-bottom: 9px;\n}\n\n.input-from, .input-to {\n    border: 0;\n    max-width: 130px;\n}\n\n.income, .expenses {\n    max-width: 437px;\n    max-height: 467px;\n}\n\n.income h3, .expenses h3 {\n    margin-bottom: 20px;\n}\n\n.income-diagram-items, .expenses-diagram-items {\n    margin-bottom: 40px;\n}\n\n.income-diagram-item, .expenses-diagram-item {\n    margin-right: 10px;\n}\n\n.income-diagram-item-color, .expenses-diagram-item-color {\n    width: 35px;\n    height: 10px;\n    margin-right: 10px;\n}\n\n.income-diagram-item-text, .expenses-diagram-item-text {\n    font-size: 12px;\n    line-height: normal;\n}\n\n.income-diagram-img, .expenses-diagram-img {\n    margin-bottom: 173px;\n}\n\n.income-diagram-img img, .expenses-diagram-img img {\n    max-height: 360px;\n    max-width: 360px;\n}\n\n.line {\n    width: 1px;\n    height: 450px;\n    background-color: #D9D9D9;\n    margin-top: 53px;\n}\n\n.sign-in, .login {\n    padding: 313px 0;\n    font-family: "Roboto-Regular", sans-serif;\n}\n\n.form-signin {\n    max-width: 397px;\n}\n\n.form-signin h1 {\n    font-family: "Roboto-Medium", sans-serif;\n    margin-bottom: 20px;\n}\n\n.input-group {\n    margin-bottom: 10px;\n}\n\n.checkbox {\n    font-size: 12px;\n}\n\n.checkbox input {\n    margin-right: 12px;\n}\n\n.form-signin button {\n    padding: 12px 16px;\n    margin: 20px 0 10px;\n}\n\n.text-start {\n    font-size: 12px;\n}\n\n.text-start span{\n    margin-right: 10px;\n}\n\n.main-info-h1{\n    margin-bottom: 40px;\n}\n\n.page-item {\n    max-width: 337px;\n    height: 121px;\n    border-radius: 12px;\n    border: 1px solid #CED4DA;\n    padding: 20px;\n}\n\n.page-item h3 {\n    margin-bottom: 10px;\n    line-height: 1;\n}\n\n.page-item-actions .btn{\n    font-size: 14px;\n    margin-right: 10px;\n    padding: 12px 16px;\n    line-height: 1;\n}\n\n.page-item-add {\n    color: #CED4DA;\n    font-size: 28px;\n    cursor: pointer;\n}\n\n.create-block input, .create-block select {\n    max-width: 397px;\n    margin-bottom: 20px;\n}\n\n.create-block input::placeholder {\n    color: #6C757D;\n    font-family: "Roboto-Regular", sans-serif;\n    font-size: 15px;\n}\n\n.overlay{\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.5);\n    z-index: 10;\n}\n\n.delete-block {\n    max-width: 530px;\n    min-width: 300px;\n    max-height: 184px;\n    border-radius: 12px;\n    border: 1px solid #CED4DA;\n    background: #FFF;\n    padding: 40px;\n    color: #290661;\n    text-align: center;\n    font-family: "Roboto-Medium", sans-serif;\n    font-size: 20px;\n}\n\n.income-expenses .navigation-times {\n    margin: 40px 0;\n}\n\n.table tbody td {\n    font-family: "Roboto-Regular", sans-serif;\n}\n\n.table svg:first-child {\n    margin-right: 10px;\n}\n\n.income-expenses-create input, .income-expenses-edit input, .income-expenses-create select {\n    margin-bottom: 10px;\n}\n\n.income-expenses-create .page-item-actions, .income-expenses-edit .page-item-actions {\n    margin-top: 20px;\n}\n\n.invalid-feedback {\n    margin-bottom: 20px;\n    margin-top: 0;\n}`,"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAEA;IACI,4CAA8C;IAC9C,6BAA6B;AACjC;;AAEA;IACI,4CAA6C;IAC7C,4BAA4B;AAChC;;AAEA;IACI,4CAA2C;IAC3C,0BAA0B;AAC9B;;AAEA;IACI,yCAAyC;IACzC,+BAA+B;AACnC;;AAEA;IACI,4BAA4B;IAC5B,gCAAgC;AACpC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,2BAA2B;IAC3B,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,2BAA2B;IAC3B,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,kCAAkC;AACtC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,kCAAkC;AACtC;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,gDAA0C;AAC9C;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,yBAAyB;IACzB,kCAAkC;IAClC,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,oBAAoB;AACxB;;AAEA;IACI,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,mBAAmB;IACnB,wCAAwC;AAC5C;;AAEA;IACI,wCAAwC;IACxC,kBAAkB;AACtB;;AAEA;IACI,uBAAuB;IACvB,6BAA6B;AACjC;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,wCAAwC;AAC5C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,SAAS;IACT,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,UAAU;IACV,aAAa;IACb,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,yCAAyC;AAC7C;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,yCAAyC;IACzC,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,yBAAyB;IACzB,gBAAgB;IAChB,aAAa;IACb,cAAc;IACd,kBAAkB;IAClB,wCAAwC;IACxC,eAAe;AACnB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,aAAa;AACjB",sourcesContent:['@import url("adaptive.css");\r\n\r\n@font-face {\r\n    src: url("../static/fonts/Roboto-Regular.ttf");\r\n    font-family: "Roboto-Regular";\r\n}\r\n\r\n@font-face {\r\n    src: url("../static/fonts/Roboto-Medium.ttf");\r\n    font-family: "Roboto-Medium";\r\n}\r\n\r\n@font-face {\r\n    src: url("../static/fonts/Roboto-Bold.ttf");\r\n    font-family: "Roboto-Bold";\r\n}\r\n\r\n.sidebar {\r\n    font-family: "Roboto-Regular", sans-serif;\r\n    border-right: 1px solid #D9D9D9;\r\n}\r\n\r\n.sidebar-header {\r\n    padding: 40px 70px 20px 50px;\r\n    border-bottom: 1px solid #D9D9D9;\r\n}\r\n\r\n.sidebar ul {\r\n    margin: 60px 20px 20px;\r\n}\r\n\r\n.sidebar-svg {\r\n    margin-right: 10px;\r\n}\r\n\r\n.nav-link {\r\n    color: #052C65;\r\n    padding: 12px 8px 12px 16px;\r\n    font-size: 14px;\r\n}\r\n\r\n.nav-item button {\r\n    color: #052C65;\r\n    padding: 12px 8px 12px 16px;\r\n    font-size: 14px;\r\n    font-weight: normal;\r\n}\r\n\r\n.nav-item button:hover {\r\n    background: #0D6EFD;\r\n    color: #FFFFFF;\r\n    border-radius: .375rem .375rem 0 0;\r\n}\r\n\r\n.nav-item .active svg path {\r\n    fill: #FFFFFF;\r\n}\r\n\r\n.btn-toggle::before {\r\n    content: none;\r\n}\r\n\r\n.btn-toggle:focus {\r\n    background: #0D6EFD;\r\n    color: #ffffff;\r\n    border-radius: .375rem .375rem 0 0;\r\n}\r\n\r\n.btn-toggle::after {\r\n    margin-left: 71px;\r\n    line-height: 0;\r\n    content: url("../static/images/arrow.png");\r\n}\r\n\r\n.btn-toggle-nav {\r\n    list-style: none;\r\n    font-size: 14px;\r\n    border: 1px solid #0D6EFD;\r\n    border-radius: 0 0 .375rem .375rem;\r\n    z-index: 10;\r\n}\r\n\r\n.btn-toggle-nav li a {\r\n    padding: 12px 16px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.btn-toggle-nav li a:hover {\r\n    background: #0D6EFD;\r\n    color: #FFFFFF;\r\n    border-radius: unset;\r\n}\r\n\r\n.btn-toggle-nav a:focus {\r\n    background: #0D6EFD;\r\n    color: #FFFFFF;\r\n}\r\n\r\n.btn-toggle-nav li a:last-child:hover {\r\n    border-radius: 0 0 .375rem .375rem;\r\n}\r\n\r\n.total {\r\n    margin: 0 20px 20px;\r\n    font-family: "Roboto-Medium", sans-serif;\r\n}\r\n\r\n.total span {\r\n    font-family: "Roboto-Medium", sans-serif;\r\n    margin-right: 10px;\r\n}\r\n\r\n.sidebar-footer {\r\n    padding: 20px 20px 40px;\r\n    border-top: 1px solid #D9D9D9;\r\n}\r\n\r\n.burger-checkbox {\r\n    position: absolute;\r\n    visibility: hidden;\r\n}\r\n\r\n.main {\r\n    padding: 100px 60px;\r\n    font-family: "Roboto-Medium", sans-serif;\r\n}\r\n\r\n.main-title {\r\n    margin-bottom: 60px;\r\n}\r\n\r\n.navigation-times {\r\n    margin-bottom: 140px;\r\n}\r\n\r\n.navigation-times .btn {\r\n    margin-right: 20px;\r\n    padding-top: 9px;\r\n    padding-bottom: 9px;\r\n}\r\n\r\n.input-from, .input-to {\r\n    border: 0;\r\n    max-width: 130px;\r\n}\r\n\r\n.income, .expenses {\r\n    max-width: 437px;\r\n    max-height: 467px;\r\n}\r\n\r\n.income h3, .expenses h3 {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.income-diagram-items, .expenses-diagram-items {\r\n    margin-bottom: 40px;\r\n}\r\n\r\n.income-diagram-item, .expenses-diagram-item {\r\n    margin-right: 10px;\r\n}\r\n\r\n.income-diagram-item-color, .expenses-diagram-item-color {\r\n    width: 35px;\r\n    height: 10px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.income-diagram-item-text, .expenses-diagram-item-text {\r\n    font-size: 12px;\r\n    line-height: normal;\r\n}\r\n\r\n.income-diagram-img, .expenses-diagram-img {\r\n    margin-bottom: 173px;\r\n}\r\n\r\n.income-diagram-img img, .expenses-diagram-img img {\r\n    max-height: 360px;\r\n    max-width: 360px;\r\n}\r\n\r\n.line {\r\n    width: 1px;\r\n    height: 450px;\r\n    background-color: #D9D9D9;\r\n    margin-top: 53px;\r\n}\r\n\r\n.sign-in, .login {\r\n    padding: 313px 0;\r\n    font-family: "Roboto-Regular", sans-serif;\r\n}\r\n\r\n.form-signin {\r\n    max-width: 397px;\r\n}\r\n\r\n.form-signin h1 {\r\n    font-family: "Roboto-Medium", sans-serif;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.input-group {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.checkbox {\r\n    font-size: 12px;\r\n}\r\n\r\n.checkbox input {\r\n    margin-right: 12px;\r\n}\r\n\r\n.form-signin button {\r\n    padding: 12px 16px;\r\n    margin: 20px 0 10px;\r\n}\r\n\r\n.text-start {\r\n    font-size: 12px;\r\n}\r\n\r\n.text-start span{\r\n    margin-right: 10px;\r\n}\r\n\r\n.main-info-h1{\r\n    margin-bottom: 40px;\r\n}\r\n\r\n.page-item {\r\n    max-width: 337px;\r\n    height: 121px;\r\n    border-radius: 12px;\r\n    border: 1px solid #CED4DA;\r\n    padding: 20px;\r\n}\r\n\r\n.page-item h3 {\r\n    margin-bottom: 10px;\r\n    line-height: 1;\r\n}\r\n\r\n.page-item-actions .btn{\r\n    font-size: 14px;\r\n    margin-right: 10px;\r\n    padding: 12px 16px;\r\n    line-height: 1;\r\n}\r\n\r\n.page-item-add {\r\n    color: #CED4DA;\r\n    font-size: 28px;\r\n    cursor: pointer;\r\n}\r\n\r\n.create-block input, .create-block select {\r\n    max-width: 397px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.create-block input::placeholder {\r\n    color: #6C757D;\r\n    font-family: "Roboto-Regular", sans-serif;\r\n    font-size: 15px;\r\n}\r\n\r\n.overlay{\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0,0,0,0.5);\r\n    z-index: 10;\r\n}\r\n\r\n.delete-block {\r\n    max-width: 530px;\r\n    min-width: 300px;\r\n    max-height: 184px;\r\n    border-radius: 12px;\r\n    border: 1px solid #CED4DA;\r\n    background: #FFF;\r\n    padding: 40px;\r\n    color: #290661;\r\n    text-align: center;\r\n    font-family: "Roboto-Medium", sans-serif;\r\n    font-size: 20px;\r\n}\r\n\r\n.income-expenses .navigation-times {\r\n    margin: 40px 0;\r\n}\r\n\r\n.table tbody td {\r\n    font-family: "Roboto-Regular", sans-serif;\r\n}\r\n\r\n.table svg:first-child {\r\n    margin-right: 10px;\r\n}\r\n\r\n.income-expenses-create input, .income-expenses-edit input, .income-expenses-create select {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.income-expenses-create .page-item-actions, .income-expenses-edit .page-item-actions {\r\n    margin-top: 20px;\r\n}\r\n\r\n.invalid-feedback {\r\n    margin-bottom: 20px;\r\n    margin-top: 0;\r\n}'],sourceRoot:""}]);const y=p},314:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);i&&r[h[0]]||(void 0!==s&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=s),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},417:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},354:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(o," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},323:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>b});var i=n(72),o=n.n(i),s=n(825),r=n.n(s),a=n(659),l=n.n(a),c=n(56),h=n.n(c),u=n(540),d=n.n(u),f=n(113),p=n.n(f),g=n(159),m={};m.styleTagTransform=p(),m.setAttributes=h(),m.insert=l().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=d(),o()(g.A,m);const b=g.A&&g.A.locals?g.A.locals:void 0},72:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var s={},r=[],a=0;a<t.length;a++){var l=t[a],c=i.base?l[0]+i.base:l[0],h=s[c]||0,u="".concat(c," ").concat(h);s[c]=h+1;var d=n(u),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=o(f,i);i.byIndex=a,e.splice(a,0,{identifier:u,updater:p,references:1})}r.push(u)}return r}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var s=i(t=t||[],o=o||{});return function(t){t=t||[];for(var r=0;r<s.length;r++){var a=n(s[r]);e[a].references--}for(var l=i(t,o),c=0;c<s.length;c++){var h=n(s[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}s=l}}},659:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},540:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,o&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},876:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ExpenseCreate=void 0;var s=n(174),r=function(){function t(t){var e=this;this.openNewRoute=t,this.buttonCancelElement=document.getElementById("expense-cancel"),this.buttonCreateElement=document.getElementById("expense-create"),this.buttonCreateElement&&this.buttonCreateElement.addEventListener("click",this.createCategory.bind(this)),this.buttonCancelElement&&this.buttonCancelElement.addEventListener("click",(function(){return e.openNewRoute("/expenses")}))}return t.prototype.createCategory=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return t.preventDefault(),e=document.getElementById("nameCategoryIncome"),[4,s.ExpensesService.createCategory(e.value)];case 1:return n.sent().error?(console.log("Ошибка при создании новой категории расхода"),[2]):[2,this.openNewRoute("/expenses")]}}))}))},t}();e.ExpenseCreate=r},219:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ExpenseDelete=void 0;var s=n(174),r=function(){function t(t){var e=this;this.openNewRoute=t,this.id=null,localStorage.getItem("categoryId")&&(this.id=parseInt(localStorage.getItem("categoryId"))),this.buttonYesElement=document.getElementById("buttonYesE"),this.buttonNoElement=document.getElementById("buttonNoE"),this.buttonYesElement&&this.buttonYesElement.addEventListener("click",this.deleteFunction.bind(this)),this.buttonNoElement&&this.buttonNoElement.addEventListener("click",(function(){localStorage.removeItem("categoryId"),e.openNewRoute("/expenses")}))}return t.prototype.deleteFunction=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,s.ExpensesService.deleteExpenseCategory(this.id)];case 1:return t.sent()||console.log("Ошибка при удалении"),[2,this.openNewRoute("/expenses")]}}))}))},t}();e.ExpenseDelete=r},264:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ExpenseEdit=void 0;var s=n(174),r=function(){function t(t){this.openNewRoute=t,this.id=null,localStorage.getItem("categoryId")&&(this.id=parseInt(localStorage.getItem("categoryId"))),this.id&&this.getCategory(this.id).then(),this.buttonSaveElement=null,this.buttonCancelElement=null}return t.prototype.getCategory=function(t){return i(this,void 0,void 0,(function(){var e,n,i,r,a,l,c=this;return o(this,(function(o){switch(o.label){case 0:return[4,s.ExpensesService.getCategory(t)];case 1:return!(e=o.sent()).error&&e.category||console.log("Ошибка запроса"),n=document.getElementsByClassName("create-block")[0],(i=document.createElement("input")).setAttribute("type","text"),i.setAttribute("id","nameCategoryIncomeEdit"),i.setAttribute("value",e.category.title),i.classList.add("form-control"),(r=document.createElement("div")).classList.add("page-item-actions","d-flex"),(a=document.createElement("button")).setAttribute("type","button"),a.classList.add("btn","btn-success"),a.setAttribute("id","edit-save"),a.innerText="Сохранить",(l=document.createElement("button")).setAttribute("type","button"),l.classList.add("btn","btn-danger"),l.setAttribute("id","edit-cancel"),l.innerText="Отмена",r.appendChild(a),r.appendChild(l),n.appendChild(i),n.appendChild(r),this.buttonSaveElement=document.getElementById("edit-save"),this.buttonCancelElement=document.getElementById("edit-cancel"),this.buttonSaveElement&&this.buttonSaveElement.addEventListener("click",this.editCategory.bind(this)),this.buttonCancelElement&&this.buttonCancelElement.addEventListener("click",(function(){return c.openNewRoute("/expenses")})),[2]}}))}))},t.prototype.editCategory=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return t.preventDefault(),e=this.id,n=document.getElementById("nameCategoryIncomeEdit").value,[4,s.ExpensesService.editCategory(e,n)];case 1:return i.sent().error&&console.log("Ошибка запроса"),[2,this.openNewRoute("/expenses")]}}))}))},t}();e.ExpenseEdit=r},74:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Expenses=void 0;var s=n(174),r=function(){function t(t){this.openNewRoute=t,this.getAllCategoriesExpenses().then()}return t.prototype.getAllCategoriesExpenses=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return[4,s.ExpensesService.getCategories()];case 1:return(t=e.sent()).error?(console.log(t.error),[2]):(console.log(t),this.showCategories(t.category),[2])}}))}))},t.prototype.showCategories=function(t){var e=this,n=document.getElementById("categoriesItems");t.forEach((function(t){var i=document.createElement("div");if(t.id&&t.title){i.classList.add("page-item"),i.setAttribute("id",t.id.toString());var o=document.createElement("h3");o.innerText=t.title;var s=document.createElement("div");s.classList.add("page-item-actions","d-flex");var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("btn","btn-primary","button-edit"),r.innerText="Редактировать",r.addEventListener("click",(function(){t.id&&t.title&&(localStorage.setItem("categoryId",t.id.toString()),localStorage.setItem("placeholder",t.title),e.openNewRoute("/expense-edit"))}));var a=document.createElement("button");a.setAttribute("type","button"),a.classList.add("btn","btn-danger","button-delete"),a.innerText="Удалить",a.addEventListener("click",(function(){t.id&&(localStorage.setItem("categoryId",t.id.toString()),e.openNewRoute("/expense-delete"))})),s.appendChild(r),s.appendChild(a),i.appendChild(o),i.appendChild(s),n&&n.appendChild(i)}}));var i=document.createElement("div");i.classList.add("page-item","d-flex","justify-content-center","align-items-center");var o=document.createElement("div");o.classList.add("page-item-add"),o.innerText="+",i.appendChild(o),n&&n.appendChild(i),i.addEventListener("click",(function(){return e.openNewRoute("/expense-create")}))},t}();e.Expenses=r},235:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Form=void 0;var s=n(914),r=n(101),a=function(){function t(t,e){this.openNewRoute=e,this.page=t,this.passwordElement=document.getElementById("password"),this.fields=[{name:"email",id:"email",element:null,regex:/^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$/,valid:!1},{name:"password",id:"password",element:null,regex:/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/,valid:!1}],"sign-in"===this.page&&this.fields.unshift({name:"name",id:"name",element:null,regex:/^[А-Я][а-я]+\s*$/,valid:!1},{name:"lastName",id:"lastName",element:null,regex:/^[А-Я][а-я]+\s*$/,valid:!1},{name:"passwordRepeat",id:"passwordRepeat",element:null,regex:/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/,valid:!1});var n=this;this.fields.forEach((function(t){t.element=document.getElementById(t.id),t.element&&(t.element.onchange=function(){n.validateField.call(n,t,this)})})),this.processElement=document.getElementById("process"),this.processElement&&(this.processElement.onclick=function(){n.processForm().then()})}return t.prototype.validateField=function(t,e){e.value&&e.value.match(t.regex)?(e.classList.remove("is-invalid"),t.valid=!0):(e.classList.add("is-invalid"),t.valid=!1),"passwordRepeat"===t.name&&(this.passwordElement&&this.passwordElement.value===e.value?(e.classList.remove("is-invalid"),t.valid=!0):(e.classList.add("is-invalid"),t.valid=!1)),this.validateForm()},t.prototype.validateForm=function(){var t=this.fields.every((function(t){return t.valid}));if(this.processElement){if(t)return this.processElement.removeAttribute("disabled"),!0;this.processElement.setAttribute("disabled","disabled")}return t},t.prototype.processForm=function(){return i(this,void 0,void 0,(function(){var t,e,n,i,a,l,c,h,u;return o(this,(function(o){switch(o.label){case 0:return this.validateForm()?(t={name:null,lastName:null,email:null,password:null,passwordRepeat:null},e={email:null,password:null},(n=this.fields.find((function(t){return"name"===t.name})))&&n.element&&(t.name=n.element.value),(i=this.fields.find((function(t){return"lastName"===t.name})))&&i.element&&(t.lastName=i.element.value),(a=this.fields.find((function(t){return"email"===t.name})))&&a.element&&(t.email=a.element.value,e.email=a.element.value),(l=this.fields.find((function(t){return"password"===t.name})))&&l.element&&(t.password=l.element.value,e.password=l.element.value),(c=this.fields.find((function(t){return"passwordRepeat"===t.name})))&&c.element&&(t.passwordRepeat=c.element.value),"sign-in"!==this.page?[3,4]:[4,r.AuthService.signUp(t)]):[3,6];case 1:return(h=o.sent())?(s.AuthUtils.setAuthInfo(null,null,{id:h.response.user.id,name:h.response.user.name+" "+h.response.user.lastName}),[4,this.openNewRoute("/")]):[3,3];case 2:return o.sent(),[3,4];case 3:return console.log("Ответ на запрос имеет некорректные данные"),[2];case 4:return[4,r.AuthService.logIn(e)];case 5:if(!(u=o.sent()))return console.log("Ответ на запрос имеет некорректные данные"),[2];s.AuthUtils.setAuthInfo(u.response.tokens.accessToken,u.response.tokens.refreshToken,{id:u.response.user.id,name:u.response.user.name+" "+u.response.user.lastName}),this.openNewRoute("/"),o.label=6;case 6:return[2]}}))}))},t}();e.Form=a},740:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeExpenseCreate=void 0;var s=n(684),r=n(989),a=n(174),l=function(){function t(t){this.openNewRoute=t,this.type=document.getElementById("type-select"),this.categorySelect=document.getElementById("category-select"),this.sum=document.getElementById("sum"),this.date=document.getElementById("date"),this.comment=document.getElementById("comment"),this.saveButtonElement=document.getElementById("saveButton"),this.saveButtonElement&&this.saveButtonElement.addEventListener("click",this.saveIncomeExpense.bind(this)),this.type.addEventListener("change",this.getCategories.bind(this)),this.getCategories().then()}return t.prototype.getCategories=function(){return i(this,void 0,void 0,(function(){var t,e=this;return o(this,(function(n){switch(n.label){case 0:return this.categorySelect.innerHTML="","income"!==this.type.value?[3,2]:[4,s.IncomeService.getCategories()];case 1:(t=n.sent()).error&&console.log("Ошибка получения данных"),t.category.forEach((function(t){var n=document.createElement("option");t.id&&t.title&&(n.value=t.id.toString(),n.innerText=t.title),e.categorySelect.appendChild(n)})),n.label=2;case 2:return"expense"!==this.type.value?[3,4]:[4,a.ExpensesService.getCategories()];case 3:(t=n.sent()).error&&console.log("Ошибка получения данных"),t.category.forEach((function(t){var n=document.createElement("option");t.id&&t.title&&(n.value=t.id.toString(),n.innerText=t.title,e.categorySelect.appendChild(n))})),n.label=4;case 4:return[2]}}))}))},t.prototype.saveIncomeExpense=function(t){return i(this,void 0,void 0,(function(){var e,n,i,s,a,l;return o(this,(function(o){switch(o.label){case 0:return t.preventDefault(),this.validateInputs(),this.validateInputs()?(e=this.categorySelect.value,n=parseInt(e),i=this.sum.value,s=parseInt(i),a={type:this.type.value,amount:s,date:this.date.value,comment:this.comment.value,category_id:n},[4,r.OperationsService.addIncomeExpense(a)]):[3,2];case 1:return!(l=o.sent()).error&&l||alert("Некорректные данные запроса"),[2,this.openNewRoute("/income-expenses")];case 2:return this.validateInputs()||alert("not ok"),[2]}}))}))},t.prototype.validateInputs=function(){var t=!1;return this.sum.value?(this.sum.classList.remove("is-invalid"),t=!0):(this.sum.classList.add("is-invalid"),t=!1),this.date.value?(this.date.classList.remove("is-invalid"),t=!0):(this.date.classList.add("is-invalid"),t=!1),this.comment.value?(this.comment.classList.remove("is-invalid"),t=!0):(this.comment.classList.add("is-invalid"),t=!1),t},t}();e.IncomeExpenseCreate=l},379:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeExpenseDelete=void 0;var s=n(989),r=function(){function t(t){var e=this;this.id=parseInt(localStorage.getItem("operationId")),this.openNewRoute=t,this.buttonYesElement=document.getElementById("buttonYes"),this.buttonNoElement=document.getElementById("buttonNo"),this.buttonYesElement&&this.buttonYesElement.addEventListener("click",this.deleteFunction.bind(this)),this.buttonNoElement&&this.buttonNoElement.addEventListener("click",(function(){return e.openNewRoute("/income-expenses")}))}return t.prototype.deleteFunction=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,s.OperationsService.deleteIncomeExpenseCategory(this.id)];case 1:return t.sent()||console.log("Ошибка при удалении"),localStorage.removeItem("operationId"),[2,this.openNewRoute("/income-expenses")]}}))}))},t}();e.IncomeExpenseDelete=r},504:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeExpenseEdit=void 0;var s=n(989),r=n(684),a=n(174),l=function(){function t(t){var e=this;this.openNewRoute=t,this.id=parseInt(localStorage.getItem("operationId")),this.type=document.getElementById("type-select"),this.categorySelect=document.getElementById("category-select"),this.sum=document.getElementById("sum"),this.date=document.getElementById("date"),this.comment=document.getElementById("comment"),this.categories=null,this.getThisOperation(this.id).then(),this.buttonSaveElement=document.getElementById("edit-save"),this.buttonCancelElement=document.getElementById("edit-cancel"),this.buttonSaveElement&&this.buttonSaveElement.addEventListener("click",this.editOperation.bind(this)),this.buttonCancelElement&&this.buttonCancelElement.addEventListener("click",(function(){return e.openNewRoute("/income-expenses")}))}return t.prototype.getThisOperation=function(t){return i(this,void 0,void 0,(function(){var e,n,i;return o(this,(function(o){switch(o.label){case 0:return[4,s.OperationsService.getOperationById(t)];case 1:return(e=o.sent()).error||!e.operation?(console.log("Ошибка запроса"),[2]):(this.type.value=e.operation.type,this.type.setAttribute("disabled",""),[4,this.getCategories(this.type.value)]);case 2:return o.sent(),this.categories&&(n=this.categories.find((function(t){return t.title===e.operation.category})))&&n.id&&(this.categorySelect.value=n.id.toString()),this.categories&&(i=this.categories.find((function(t){return t.title===e.operation.category})))&&i.id&&(this.categorySelect.value=i.id.toString()),this.sum.value=e.operation.amount.toString(),this.date.value=e.operation.date,this.comment.value=e.operation.comment,[2]}}))}))},t.prototype.getCategories=function(t){return i(this,void 0,void 0,(function(){var e,n=this;return o(this,(function(i){switch(i.label){case 0:return this.categorySelect.innerHTML="","income"!==t?[3,2]:[4,r.IncomeService.getCategories()];case 1:(e=i.sent()).error&&console.log("Ошибка получения данных"),this.categories=e.category,this.categories.forEach((function(t){var e=document.createElement("option");t.id&&t.title&&(e.value=t.id.toString(),e.innerText=t.title),n.categorySelect.appendChild(e)})),i.label=2;case 2:return"expense"!==t?[3,4]:[4,a.ExpensesService.getCategories()];case 3:(e=i.sent()).error&&console.log("Ошибка получения данных"),this.categories=e.category,this.categories.forEach((function(t){var e=document.createElement("option");t.id&&t.title&&(e.value=t.id.toString(),e.innerText=t.title,n.categorySelect.appendChild(e))})),i.label=4;case 4:return[2]}}))}))},t.prototype.editOperation=function(){return i(this,void 0,void 0,(function(){var t,e,n,i,r,a;return o(this,(function(o){switch(o.label){case 0:return t=this.categorySelect.value,e=parseInt(t),n=this.sum.value,i=parseInt(n),r={type:this.type.value,amount:i,date:this.date.value,comment:this.comment.value,category_id:e},[4,s.OperationsService.editOperation(this.id,r)];case 1:return(a=o.sent()).error?(console.log(a.error),[2]):[2,this.openNewRoute("/income-expenses")]}}))}))},t}();e.IncomeExpenseEdit=l},82:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeExpenses=void 0;var s=n(989),r=n(755),a=function(){function t(t){this.openNewRoute=t,this.buttonToday=document.getElementById("buttonToday"),this.buttonWeek=document.getElementById("buttonWeek"),this.buttonMonth=document.getElementById("buttonMonth"),this.buttonYear=document.getElementById("buttonYear"),this.buttonAll=document.getElementById("buttonAll"),this.buttonInterval=document.getElementById("buttonInterval"),this.dateFrom=document.getElementById("inputFrom"),this.dateTo=document.getElementById("inputTo"),this.recordsElement=document.getElementById("recordsIncomeExpenses"),this.buttonAction().then(),this.getAllOperations(r.PeriodForButtonEnum.day).then()}return t.prototype.buttonAction=function(){return i(this,void 0,void 0,(function(){var t=this;return o(this,(function(e){return this.buttonToday.addEventListener("click",(function(){t.getAllOperations(r.PeriodForButtonEnum.day),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonToday&&t.buttonToday.classList.add("active")})),this.buttonWeek.addEventListener("click",(function(){t.getAllOperations(r.PeriodForButtonEnum.week),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonWeek&&t.buttonWeek.classList.add("active")})),this.buttonMonth.addEventListener("click",(function(){t.getAllOperations(r.PeriodForButtonEnum.month),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonMonth&&t.buttonMonth.classList.add("active")})),this.buttonYear.addEventListener("click",(function(){t.getAllOperations(r.PeriodForButtonEnum.year),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonYear&&t.buttonYear.classList.add("active")})),this.buttonAll.addEventListener("click",(function(){t.getAllOperations(r.PeriodForButtonEnum.all),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonAll&&t.buttonAll.classList.add("active")})),this.buttonInterval.addEventListener("click",(function(){var e={dateFrom:t.dateFrom.value,dateTo:t.dateTo.value};t.getAllOperationsInterval(r.PeriodForButtonEnum.interval,e),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonInterval&&t.buttonInterval.classList.add("active")})),[2]}))}))},t.prototype.getAllOperations=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,s.OperationsService.getAllOperationsPeriod(t)];case 1:return(e=n.sent()).error?(console.log("Ошибка при получении данных"),[2,this.openNewRoute("/")]):0===e.allOperations.length?(console.log("Нет операций в выбранном периоде"),this.recordsElement&&(this.recordsElement.innerHTML=""),[2]):(console.log(e),[4,this.createTableIncomeExpenses(e.allOperations)]);case 2:return n.sent(),[2]}}))}))},t.prototype.getAllOperationsInterval=function(t,e){return i(this,void 0,void 0,(function(){var n;return o(this,(function(i){switch(i.label){case 0:return[4,s.OperationsService.getAllOperationsInterval(t,e)];case 1:return(n=i.sent()).error?(console.log("Ошибка при получении данных"),[2,this.openNewRoute("/")]):n.allOperations&&0===n.allOperations.length?(console.log("Нет операций в выбранном периоде"),this.recordsElement&&(this.recordsElement.innerHTML=""),[2]):(console.log(n),[4,this.createTableIncomeExpenses(n.allOperations)]);case 2:return i.sent(),[2]}}))}))},t.prototype.createTableIncomeExpenses=function(t){return i(this,void 0,void 0,(function(){var e,n,i,s=this;return o(this,(function(o){for((e=this).recordsElement&&(e.recordsElement.innerHTML=""),n=function(n){var i,o=document.createElement("tr");o.insertCell().innerText=(n+1).toString(),"income"===t[n].type&&((i=o.insertCell()).innerText="доход",i.classList.add("text-success")),"expense"===t[n].type&&((i=o.insertCell()).innerText="расход",i.classList.add("text-danger")),o.insertCell().innerText=t[n].category.toLowerCase(),o.insertCell().innerText=t[n].amount.toString(),o.insertCell().innerText=t[n].date,o.insertCell().innerText=t[n].comment.toLowerCase(),o.insertCell().innerHTML='<svg class="deleteIcon" style="cursor: pointer;" xmlns="http://www.w3.org/2000/svg" width="14" height="15" viewBox="0 0 14 15" fill="none">\n                        <path d="M4.5 5.5C4.77614 5.5 5 5.72386 5 6V12C5 12.2761 4.77614 12.5 4.5 12.5C4.22386 12.5 4 12.2761 4 12V6C4 5.72386 4.22386 5.5 4.5 5.5Z"\n                              fill="black"/>\n                        <path d="M7 5.5C7.27614 5.5 7.5 5.72386 7.5 6V12C7.5 12.2761 7.27614 12.5 7 12.5C6.72386 12.5 6.5 12.2761 6.5 12V6C6.5 5.72386 6.72386 5.5 7 5.5Z"\n                              fill="black"/>\n                        <path d="M10 6C10 5.72386 9.77614 5.5 9.5 5.5C9.22386 5.5 9 5.72386 9 6V12C9 12.2761 9.22386 12.5 9.5 12.5C9.77614 12.5 10 12.2761 10 12V6Z"\n                              fill="black"/>\n                        <path fill-rule="evenodd" clip-rule="evenodd"\n                              d="M13.5 3C13.5 3.55228 13.0523 4 12.5 4H12V13C12 14.1046 11.1046 15 10 15H4C2.89543 15 2 14.1046 2 13V4H1.5C0.947715 4 0.5 3.55228 0.5 3V2C0.5 1.44772 0.947715 1 1.5 1H5C5 0.447715 5.44772 0 6 0H8C8.55229 0 9 0.447715 9 1H12.5C13.0523 1 13.5 1.44772 13.5 2V3ZM3.11803 4L3 4.05902V13C3 13.5523 3.44772 14 4 14H10C10.5523 14 11 13.5523 11 13V4.05902L10.882 4H3.11803ZM1.5 3V2H12.5V3H1.5Z"\n                              fill="black"/>\n                    </svg> <svg class="editIcon" style="cursor: pointer;" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">\\n\' +\n                                          <path d="M12.1465 0.146447C12.3417 -0.0488155 12.6583 -0.0488155 12.8536 0.146447L15.8536 3.14645C16.0488 3.34171 16.0488 3.65829 15.8536 3.85355L5.85357 13.8536C5.80569 13.9014 5.74858 13.9391 5.68571 13.9642L0.68571 15.9642C0.500001 16.0385 0.287892 15.995 0.146461 15.8536C0.00502989 15.7121 -0.0385071 15.5 0.0357762 15.3143L2.03578 10.3143C2.06092 10.2514 2.09858 10.1943 2.14646 10.1464L12.1465 0.146447ZM11.2071 2.5L13.5 4.79289L14.7929 3.5L12.5 1.20711L11.2071 2.5ZM12.7929 5.5L10.5 3.20711L4.00001 9.70711V10H4.50001C4.77616 10 5.00001 10.2239 5.00001 10.5V11H5.50001C5.77616 11 6.00001 11.2239 6.00001 11.5V12H6.29291L12.7929 5.5ZM3.03167 10.6755L2.92614 10.781L1.39754 14.6025L5.21903 13.0739L5.32456 12.9683C5.13496 12.8973 5.00001 12.7144 5.00001 12.5V12H4.50001C4.22387 12 4.00001 11.7761 4.00001 11.5V11H3.50001C3.28561 11 3.10272 10.865 3.03167 10.6755Z"\\n\' +\n                                                 fill="black"/>\\n\' +\n                                        </svg>',e.recordsElement&&e.recordsElement.appendChild(o),document.getElementsByClassName("deleteIcon")[n].addEventListener("click",(function(){localStorage.setItem("operationId",t[n].id.toString()),s.openNewRoute("/income-expense-delete")})),document.getElementsByClassName("editIcon")[n].addEventListener("click",(function(){localStorage.setItem("operationId",t[n].id.toString()),s.openNewRoute("/income-expense-edit")}))},i=0;i<t.length;i++)n(i);return[2]}))}))},t}();e.IncomeExpenses=a},397:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeCreate=void 0;var s=n(684),r=function(){function t(t){var e=this;this.openNewRoute=t,this.buttonCancelElement=document.getElementById("income-cancel"),this.buttonCreateElement=document.getElementById("income-create"),this.buttonCreateElement&&this.buttonCreateElement.addEventListener("click",this.createCategory.bind(this)),this.buttonCancelElement&&this.buttonCancelElement.addEventListener("click",(function(){return e.openNewRoute("/income")}))}return t.prototype.createCategory=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return t.preventDefault(),e=document.getElementById("nameCategoryIncome"),[4,s.IncomeService.createCategory(e.value)];case 1:return n.sent().error?(console.log("Ошибка при создании новой категории дохода"),[2]):[2,this.openNewRoute("/income")]}}))}))},t}();e.IncomeCreate=r},620:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeDelete=void 0;var s=n(684),r=function(){function t(t){var e=this;this.openNewRoute=t,this.id=parseInt(localStorage.getItem("categoryId")),this.buttonYesElement=document.getElementById("buttonYes"),this.buttonNoElement=document.getElementById("buttonNo"),this.buttonYesElement&&this.buttonYesElement.addEventListener("click",this.deleteFunction.bind(this)),this.buttonNoElement&&this.buttonNoElement.addEventListener("click",(function(){localStorage.removeItem("categoryId"),e.openNewRoute("/income")}))}return t.prototype.deleteFunction=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,s.IncomeService.deleteIncomeCategory(this.id)];case 1:return t.sent()||console.log("Ошибка при удалении"),[2,this.openNewRoute("/income")]}}))}))},t}();e.IncomeDelete=r},383:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeEdit=void 0;var s=n(684),r=function(){function t(t){this.openNewRoute=t,this.id=parseInt(localStorage.getItem("categoryId")),this.getCategory(this.id).then(),this.buttonCancelElement=null,this.buttonEditElement=null}return t.prototype.getCategory=function(t){return i(this,void 0,void 0,(function(){var e,n,i,r,a,l,c=this;return o(this,(function(o){switch(o.label){case 0:return[4,s.IncomeService.getCategory(t)];case 1:return!(e=o.sent()).error&&e.category||console.log("Ошибка запроса"),n=document.getElementsByClassName("create-block")[0],(i=document.createElement("input")).setAttribute("type","text"),i.setAttribute("id","nameCategoryIncomeEdit"),i.value=e.category.title,i.classList.add("form-control"),(r=document.createElement("div")).classList.add("page-item-actions","d-flex"),(a=document.createElement("button")).setAttribute("type","button"),a.classList.add("btn","btn-success"),a.setAttribute("id","edit-save"),a.innerText="Сохранить",(l=document.createElement("button")).setAttribute("type","button"),l.classList.add("btn","btn-danger"),l.setAttribute("id","edit-cancel"),l.innerText="Отмена",r.appendChild(a),r.appendChild(l),n.appendChild(i),n.appendChild(r),this.buttonCancelElement=document.getElementById("edit-cancel"),this.buttonEditElement=document.getElementById("edit-save"),this.buttonEditElement&&this.buttonEditElement.addEventListener("click",this.editCategory.bind(this)),this.buttonCancelElement&&this.buttonCancelElement.addEventListener("click",(function(){return c.openNewRoute("/income")})),[2]}}))}))},t.prototype.editCategory=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return t.preventDefault(),e=this.id,n=document.getElementById("nameCategoryIncomeEdit").value,[4,s.IncomeService.editCategory(e,n)];case 1:return i.sent().error&&console.log("Ошибка запроса"),[2,this.openNewRoute("/income")]}}))}))},t}();e.IncomeEdit=r},666:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Income=void 0;var s=n(684),r=function(){function t(t){this.openNewRoute=t,this.getAllCategoriesIncome().then()}return t.prototype.getAllCategoriesIncome=function(){return i(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return[4,s.IncomeService.getCategories()];case 1:return(t=e.sent()).error?(console.log(t.error),[2]):(console.log(t),this.showCategories(t.category),[2])}}))}))},t.prototype.showCategories=function(t){var e=this,n=document.getElementById("categoriesItems");t.forEach((function(t){if(t.id&&t.title){var i=document.createElement("div");i.classList.add("page-item"),i.setAttribute("id",t.id.toString());var o=document.createElement("h3");o.innerText=t.title;var s=document.createElement("div");s.classList.add("page-item-actions","d-flex");var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("btn","btn-primary","button-edit"),r.innerText="Редактировать",r.addEventListener("click",(function(){t.id&&t.title&&(localStorage.setItem("categoryId",t.id.toString()),localStorage.setItem("placeholder",t.title),e.openNewRoute("/income-edit"))}));var a=document.createElement("button");a.setAttribute("type","button"),a.classList.add("btn","btn-danger","button-delete"),a.innerText="Удалить",a.addEventListener("click",(function(){t.id&&(localStorage.setItem("categoryId",t.id.toString()),e.openNewRoute("/income-delete"))})),s.appendChild(r),s.appendChild(a),i.appendChild(o),i.appendChild(s),n&&n.appendChild(i)}}));var i=document.createElement("div");i.classList.add("page-item","d-flex","justify-content-center","align-items-center");var o=document.createElement("div");o.classList.add("page-item-add"),o.innerText="+",i.appendChild(o),n&&n.appendChild(i),i.addEventListener("click",(function(){return e.openNewRoute("/income-create")}))},t}();e.Income=r},267:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Logout=void 0;var s=n(914),r=n(101),a=function(){function t(t){this.openNewRoute=t,s.AuthUtils.getAuthInfo(s.AuthUtils.accessTokenKey)&&s.AuthUtils.getAuthInfo(s.AuthUtils.refreshTokenKey)||this.openNewRoute("/login").then(),this.logout().then()}return t.prototype.logout=function(){return i(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,r.AuthService.logOut({refreshToken:s.AuthUtils.getAuthInfo(s.AuthUtils.refreshTokenKey)})];case 1:return t.sent(),s.AuthUtils.removeAuthInfo(),this.openNewRoute("/login"),[2]}}))}))},t}();e.Logout=a},104:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Main=void 0;var s=n(245),r=n(989),a=n(755),l=function(){function t(t){this.openNewRoute=t,this.buttonToday=document.getElementById("buttonToday"),this.buttonWeek=document.getElementById("buttonWeek"),this.buttonMonth=document.getElementById("buttonMonth"),this.buttonYear=document.getElementById("buttonYear"),this.buttonAll=document.getElementById("buttonAll"),this.buttonInterval=document.getElementById("buttonInterval"),this.dateFrom=document.getElementById("inputFrom"),this.dateTo=document.getElementById("inputTo"),this.buttonAction().then(),this.getAllOperations("day").then(),this.allOperations=null,this.dataIncome={},this.dataExpenses={},this.labelsIncome=[],this.amountsIncome=[],this.labelsExpenses=[],this.amountsExpenses=[],this.diagramIncome=null,this.diagramExpenses=null,this.income=[],this.expenses=[]}return t.prototype.buttonAction=function(){return i(this,void 0,void 0,(function(){var t=this;return o(this,(function(e){return this.buttonToday.addEventListener("click",(function(){t.getAllOperations(a.PeriodForButtonEnum.day),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonToday&&t.buttonToday.classList.add("active")})),this.buttonWeek.addEventListener("click",(function(){t.getAllOperations(a.PeriodForButtonEnum.week),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonWeek&&t.buttonWeek.classList.add("active")})),this.buttonMonth.addEventListener("click",(function(){t.getAllOperations(a.PeriodForButtonEnum.month),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonMonth&&t.buttonMonth.classList.add("active")})),this.buttonYear.addEventListener("click",(function(){t.getAllOperations(a.PeriodForButtonEnum.year),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonYear&&t.buttonYear.classList.add("active")})),this.buttonAll.addEventListener("click",(function(){t.getAllOperations(a.PeriodForButtonEnum.all),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonAll&&t.buttonAll.classList.add("active")})),this.buttonInterval.addEventListener("click",(function(){var e={dateFrom:t.dateFrom.value,dateTo:t.dateTo.value};t.getAllOperationsInterval(a.PeriodForButtonEnum.interval,e),document.querySelectorAll(".navigation-times .btn").forEach((function(t){t.classList.remove("active")})),t.buttonInterval&&t.buttonInterval.classList.add("active")})),[2]}))}))},t.prototype.getAllOperations=function(t){return i(this,void 0,void 0,(function(){var e,n=this;return o(this,(function(i){switch(i.label){case 0:return this.labelsIncome=[],this.amountsIncome=[],this.labelsExpenses=[],this.amountsExpenses=[],this.income=[],this.expenses=[],this.diagramIncome&&this.diagramIncome.destroy(),this.diagramExpenses&&this.diagramExpenses.destroy(),[4,r.OperationsService.getAllOperationsPeriod(t)];case 1:return(e=i.sent()).error?(console.log("Ошибка при получении данных"),[2,this.openNewRoute("/")]):e.allOperations&&0===e.allOperations.length?(console.log("Нет операций в выбранном периоде"),[2]):(e.allOperations&&(this.allOperations=e.allOperations),this.allOperations&&this.allOperations.forEach((function(t){if("income"===t.type)if(0===n.income.length)n.income.push({category:t.category,amount:+t.amount});else{var e=n.income.find((function(e){return e.category===t.category}));e?e.amount=+(e.amount+t.amount):n.income.push({category:t.category,amount:+t.amount})}if("expense"===t.type)if(0===n.expenses.length)n.expenses.push({category:t.category,amount:+t.amount});else{var i=n.expenses.find((function(e){return e.category===t.category}));i?i.amount=+(i.amount+t.amount):n.expenses.push({category:t.category,amount:+t.amount})}})),this.income.forEach((function(t){n.labelsIncome.push(t.category),n.amountsIncome.push(t.amount)})),this.expenses.forEach((function(t){n.labelsExpenses.push(t.category),n.amountsExpenses.push(t.amount)})),this.constructorDiagrams(),[2])}}))}))},t.prototype.getAllOperationsInterval=function(t,e){return i(this,void 0,void 0,(function(){var n,i=this;return o(this,(function(o){switch(o.label){case 0:return this.labelsIncome=[],this.amountsIncome=[],this.labelsExpenses=[],this.amountsExpenses=[],this.income=[],this.expenses=[],this.diagramIncome&&this.diagramIncome.destroy(),this.diagramExpenses&&this.diagramExpenses.destroy(),[4,r.OperationsService.getAllOperationsInterval(t,e)];case 1:return(n=o.sent()).error?(console.log("Ошибка при получении данных"),[2,this.openNewRoute("/")]):n.allOperations&&0===n.allOperations.length?(console.log("Нет операций в выбранном периоде"),[2]):(this.allOperations=n.allOperations,this.allOperations&&this.allOperations.forEach((function(t){if("income"===t.type)if(0===i.income.length)i.income.push({category:t.category,amount:+t.amount});else{var e=i.income.find((function(e){return e.category===t.category}));e?e.amount=+(e.amount+t.amount):i.income.push({category:t.category,amount:+t.amount})}if("expense"===t.type)if(0===i.expenses.length)i.expenses.push({category:t.category,amount:+t.amount});else{var n=i.expenses.find((function(e){return e.category===t.category}));n?n.amount=+(n.amount+t.amount):i.expenses.push({category:t.category,amount:+t.amount})}})),this.income.forEach((function(t){i.labelsIncome.push(t.category),i.amountsIncome.push(t.amount)})),this.expenses.forEach((function(t){i.labelsIncome.push(t.category),i.amountsIncome.push(t.amount)})),this.constructorDiagrams(),[2])}}))}))},t.prototype.constructorDiagrams=function(){var t=document.getElementById("myDiagramIncome"),e=document.getElementById("myDiagramExpenses");this.dataIncome={labels:this.labelsIncome,datasets:[{label:"Сумма, $",data:this.amountsIncome,backgroundColor:["#DC3545","#FD7E14","#FFC107","#20C997","#0D6EFD"],hoverOffset:4}]},this.diagramIncome=new s.Chart(t,{type:"pie",data:this.dataIncome,options:{responsive:!0,plugins:{legend:{position:"top"}}}}),this.dataExpenses={labels:this.labelsExpenses,datasets:[{label:"Сумма, $",data:this.amountsExpenses,backgroundColor:["#DC3545","#FD7E14","#FFC107","#20C997","#0D6EFD"],hoverOffset:4}]},this.diagramExpenses=new s.Chart(e,{type:"pie",data:this.dataExpenses,options:{responsive:!0,plugins:{legend:{position:"top"}}}})},t}();e.Main=l},798:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default="http://localhost:3000/api"},475:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Router=void 0;var s=n(104),r=n(235),a=n(74),l=n(666),c=n(82),h=n(914),u=n(383),d=n(620),f=n(397),p=n(740),g=n(264),m=n(219),b=n(876),x=n(504),y=n(379),v=n(267),A=n(532),_=function(){function t(){var t=this;this.titlePageElement=document.getElementById("title"),this.contentPageElement=document.getElementById("content"),this.userName=null,this.profileNameElement=null,this.initEvents(),this.routes=[{route:"/",title:"Главная",filePathTemplate:"/templates/main.html",useLayout:"/templates/layout.html",load:function(){new s.Main(t.openNewRoute.bind(t))},unload:function(){}},{route:"/sign-in",title:"Регистрация",filePathTemplate:"/templates/sign-in.html",useLayout:!1,load:function(){new r.Form("sign-in",t.openNewRoute.bind(t))},unload:function(){}},{route:"/login",title:"Авторизация",filePathTemplate:"/templates/login.html",useLayout:!1,load:function(){new r.Form("login",t.openNewRoute.bind(t))},unload:function(){}},{route:"/logout",title:"Выход из аккаунта",useLayout:!1,load:function(){new v.Logout(t.openNewRoute.bind(t))},unload:function(){}},{route:"/expenses",title:"Расходы",filePathTemplate:"/templates/expenses/expenses.html",useLayout:"/templates/layout.html",load:function(){new a.Expenses(t.openNewRoute.bind(t))},unload:function(){}},{route:"/expense-edit",title:"Редактирование категории",filePathTemplate:"/templates/expenses/expense-edit.html",useLayout:"/templates/layout.html",load:function(){new g.ExpenseEdit(t.openNewRoute.bind(t))},unload:function(){}},{route:"/expense-delete",title:"Удаление категории",filePathTemplate:"/templates/expenses/expense-delete.html",useLayout:"/templates/layout.html",load:function(){new m.ExpenseDelete(t.openNewRoute.bind(t))},unload:function(){}},{route:"/expense-create",title:"Создание категории",filePathTemplate:"/templates/expenses/expense-create.html",useLayout:"/templates/layout.html",load:function(){new b.ExpenseCreate(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income",title:"Доходы",filePathTemplate:"/templates/income/income.html",useLayout:"/templates/layout.html",load:function(){new l.Income(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-edit",title:"Редактирование категории",filePathTemplate:"/templates/income/income-edit.html",useLayout:"/templates/layout.html",load:function(){new u.IncomeEdit(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-delete",title:"Удаление категории",filePathTemplate:"/templates/income/income-delete.html",useLayout:"/templates/layout.html",load:function(){new d.IncomeDelete(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-create",title:"Создание категории",filePathTemplate:"/templates/income/income-create.html",useLayout:"/templates/layout.html",load:function(){new f.IncomeCreate(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-expenses",title:"Доходы и расходы",filePathTemplate:"/templates/income-expenses/income-expenses.html",useLayout:"/templates/layout.html",load:function(){new c.IncomeExpenses(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-expense-create",title:"Создание дохода или расхода",filePathTemplate:"/templates/income-expenses/income-expense-create.html",useLayout:"/templates/layout.html",load:function(){new p.IncomeExpenseCreate(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-expense-edit",title:"Редактирование дохода или расхода",filePathTemplate:"/templates/income-expenses/income-expense-edit.html",useLayout:"/templates/layout.html",load:function(){new x.IncomeExpenseEdit(t.openNewRoute.bind(t))},unload:function(){}},{route:"/income-expense-delete",title:"Удаление дохода или расхода",filePathTemplate:"/templates/income-expenses/income-expense-delete.html",useLayout:"/templates/layout.html",load:function(){new y.IncomeExpenseDelete(t.openNewRoute.bind(t))},unload:function(){}}]}return t.prototype.initEvents=function(){window.addEventListener("DOMContentLoaded",this.activateRoute.bind(this)),window.addEventListener("popstate",this.activateRoute.bind(this)),document.addEventListener("click",this.clickHandler.bind(this))},t.prototype.activateRoute=function(){return i(this,arguments,void 0,(function(t,e,n){var i,s,r,a,l,c,u,d,f,p,g;return void 0===t&&(t=null),void 0===e&&(e=null),void 0===n&&(n=null),o(this,(function(t){switch(t.label){case 0:return i=h.AuthUtils.getAuthInfo(),s=i.accessToken,r=window.location.pathname,i&&s||"/login"===r||"/sign-in"===r?(e&&(a=this.routes.find((function(t){return t.route===e}))).unload&&"function"==typeof a.unload&&a.unload(),l=window.location.pathname,(c=this.routes.find((function(t){return t.route===l})))?(c.title&&this.titlePageElement&&(this.titlePageElement.innerText=c.title+" | Lumincoin Finance"),c.filePathTemplate?(u=this.contentPageElement,c.useLayout?this.contentPageElement?(d=this.contentPageElement,[4,fetch(c.useLayout).then((function(t){return t.text()}))]):[3,2]:[3,4]):[3,6]):[3,7]):[3,10];case 1:d.innerHTML=t.sent(),t.label=2;case 2:if(u=document.getElementById("content-layout"),!this.userName&&(f=h.AuthUtils.getAuthInfo(h.AuthUtils.userInfoTokenKey)))try{(p=JSON.parse(f)).name&&(this.userName=p.name)}catch(t){console.error("Данные об имени пользователя не получены")}return this.profileNameElement=document.getElementById("profile-name"),this.profileNameElement&&this.userName&&(this.profileNameElement.innerText=this.userName),this.activateMenuItem(c),[4,this.getBalance()];case 3:t.sent(),t.label=4;case 4:return u?(g=u,[4,fetch(c.filePathTemplate).then((function(t){return t.text()}))]):[3,6];case 5:g.innerHTML=t.sent(),t.label=6;case 6:return c.load&&"function"==typeof c.load&&c.load(),[3,9];case 7:return console.log("No route found"),history.pushState({},""),[4,this.activateRoute(null,null,"/signup")];case 8:t.sent(),t.label=9;case 9:return[3,12];case 10:return[4,this.openNewRoute("/login")];case 11:t.sent(),t.label=12;case 12:return[2]}}))}))},t.prototype.openNewRoute=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=window.location.pathname,history.pushState({},"",t),[4,this.activateRoute(null,null,e)];case 1:return n.sent(),[2]}}))}))},t.prototype.clickHandler=function(t){return i(this,void 0,void 0,(function(){var e,n,i,s;return o(this,(function(o){switch(o.label){case 0:return e=null,(n=t.target)&&"A"===n.nodeName?e=n:n&&n.parentNode&&"A"===n.parentNode.nodeName&&(e=n.parentNode),e?(t.preventDefault(),i=window.location.pathname,!(s=e.href.replace(window.location.origin,""))||i===s.replace("#","")||s.startsWith("javascript:void(0)")?[2]:[4,this.openNewRoute(s)]):[3,2];case 1:o.sent(),o.label=2;case 2:return[2]}}))}))},t.prototype.activateMenuItem=function(t){document.querySelectorAll(".sidebar .nav-link").forEach((function(e){var n=e.getAttribute("href");n&&(t.route.includes(n)&&"/"!==n||"/"===t.route&&"/"===n?e.classList.add("active"):e.classList.remove("active"))}))},t.prototype.getBalance=function(){return i(this,void 0,void 0,(function(){var t,e;return o(this,(function(n){switch(n.label){case 0:return(t=document.getElementById("balance"))?[4,A.HttpUtils.request("/balance")]:[3,2];case 1:!(e=n.sent()).error&&e.response.balance||(console.log("Данные о балансе не получены"),t.innerText="???"),t.innerText=e.response.balance+"$",n.label=2;case 2:return[2]}}))}))},t}();e.Router=_},101:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.AuthService=void 0;var s=n(532),r=function(){function t(){}return t.logIn=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,s.HttpUtils.request("/login","POST",!1,t)];case 1:return e=n.sent(),console.log(e),e.error||e.error||e&&!(e.response.tokens.accessToken&&e.response.tokens.refreshToken&&e.response.user.id&&e.response.user.name)?[2,!1]:[2,e]}}))}))},t.signUp=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,s.HttpUtils.request("/signup","POST",!1,t)];case 1:return e=n.sent(),console.log(e),!e.error&&e.response&&(!e.response||e.response.user.id&&e.response.user.name&&e.response.user.lastName&&e.response.user.email)?[2,e]:[2,!1]}}))}))},t.logOut=function(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,s.HttpUtils.request("/logout","POST",!1,t)];case 1:return e.sent(),[2]}}))}))},t}();e.AuthService=r},174:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.ExpensesService=void 0;var s=n(532),r=function(){function t(){}return t.getCategories=function(){return i(this,void 0,void 0,(function(){var t,e;return o(this,(function(n){switch(n.label){case 0:return t={error:!1,category:{id:null,title:null}},[4,s.HttpUtils.request("/categories/expense")];case 1:return(e=n.sent()).error||e.error?(t.error="Возникла ошибка при запросе всех категорий расходов. Обратитесь в поддержку",[2,t]):(t.category=e.response,[2,t])}}))}))},t.getCategory=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return e={error:!1,category:{id:null,title:null}},[4,s.HttpUtils.request("/categories/expense/"+t)];case 1:return(n=i.sent()).error||n.error?(e.error="Возникла ошибка при запросе категории. Обратитесь в поддержку",[2,e]):(e.category=n.response,[2,e])}}))}))},t.createCategory=function(t){return i(this,void 0,void 0,(function(){var e,n,i;return o(this,(function(o){switch(o.label){case 0:return e={error:!1,category:{id:null,title:null}},n={title:t},[4,s.HttpUtils.request("/categories/expense","POST",!0,n)];case 1:return(i=o.sent()).error||!i?(e.error="Возникла ошибка при добавлении категории расхода. Обратитесь в поддержку",[2,e]):(e.category.id=i.response.id,e.category.title=i.response.title,[2,e])}}))}))},t.editCategory=function(t,e){return i(this,void 0,void 0,(function(){var n,i,r;return o(this,(function(o){switch(o.label){case 0:return n={error:!1,category:{id:null,title:null}},i={title:e},[4,s.HttpUtils.request("/categories/expense/"+t,"PUT",!0,i)];case 1:return(r=o.sent()).error||!r?(n.error="Возникла ошибка при редактировании категории расхода. Обратитесь в поддержку",[2,n]):[2,n]}}))}))},t.deleteExpenseCategory=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,s.HttpUtils.request("/categories/expense/"+t,"DELETE",!0)];case 1:return(e=n.sent()).error||!e?(console.log("Возникла ошибка при удалении категории расхода. Обратитесь в поддержку"),[2,!1]):(console.log("Удаление категории прошло успешно"),[2,!0])}}))}))},t}();e.ExpensesService=r},684:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.IncomeService=void 0;var s=n(532),r=function(){function t(){}return t.getCategories=function(){return i(this,void 0,void 0,(function(){var t,e;return o(this,(function(n){switch(n.label){case 0:return t={error:!1,category:{id:null,title:null}},[4,s.HttpUtils.request("/categories/income")];case 1:return(e=n.sent()).error||e.error?(t.error="Возникла ошибка при запросе всех категорий доходов. Обратитесь в поддержку",[2,t]):(t.category=e.response,[2,t])}}))}))},t.getCategory=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return e={error:!1,category:{id:null,title:null}},[4,s.HttpUtils.request("/categories/income/"+t)];case 1:return(n=i.sent()).error||n.error?(e.error="Возникла ошибка при запросе категории дохода. Обратитесь в поддержку",[2,e]):(e.category=n.response,[2,e])}}))}))},t.createCategory=function(t){return i(this,void 0,void 0,(function(){var e,n,i;return o(this,(function(o){switch(o.label){case 0:return e={error:!1,category:{id:null,title:null}},n={title:t},[4,s.HttpUtils.request("/categories/income","POST",!0,n)];case 1:return(i=o.sent()).error||i.error?(e.error="Возникла ошибка при добавлении категории дохода. Обратитесь в поддержку",[2,e]):(e.category.id=i.response.id,e.category.title=i.response.title,[2,e])}}))}))},t.editCategory=function(t,e){return i(this,void 0,void 0,(function(){var n,i,r;return o(this,(function(o){switch(o.label){case 0:return n={error:!1,category:{id:null,title:null}},i={title:e},[4,s.HttpUtils.request("/categories/income/"+t,"PUT",!0,i)];case 1:return(r=o.sent()).error||!r?(n.error="Возникла ошибка при редактировании категории дохода. Обратитесь в поддержку",[2,n]):[2,n]}}))}))},t.deleteIncomeCategory=function(t){return i(this,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return[4,s.HttpUtils.request("/categories/income/"+t,"DELETE",!0)];case 1:return(e=n.sent()).error||!e?(console.log("Возникла ошибка при удалении категории дохода. Обратитесь в поддержку"),[2,!1]):(console.log("Удаление категории прошло успешно"),[2,!0])}}))}))},t}();e.IncomeService=r},989:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.OperationsService=void 0;var s=n(532),r=function(){function t(){}return t.getAllOperationsPeriod=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return e={error:!1,allOperations:null},[4,s.HttpUtils.request("/operations?period="+t)];case 1:return n=i.sent(),console.log(n),n.error||n.error?(e.error="Возникла ошибка при запросе доходов и расходов. Обратитесь в поддержку",[2,e]):(e.allOperations=n.response,[2,e])}}))}))},t.getAllOperationsInterval=function(t,e){return i(this,void 0,void 0,(function(){var n,i;return o(this,(function(o){switch(o.label){case 0:return n={error:!1,allOperations:null},this.body=e,[4,s.HttpUtils.request("/operations?period="+t+"&dateFrom="+this.body.dateFrom+"&dateTo="+this.body.dateTo)];case 1:return(i=o.sent()).error||i.error?(n.error="Возникла ошибка при запросе доходов и расходов. Обратитесь в поддержку",[2,n]):(n.allOperations=i.response,[2,n])}}))}))},t.getOperationById=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return e={error:!1,operation:null},[4,s.HttpUtils.request("/operations/"+t)];case 1:return(n=i.sent()).error||n.error?(e.error="Возникла ошибка при запросе операции. Обратитесь в поддержку",[2,e]):(e.operation=n.response,[2,e])}}))}))},t.addIncomeExpense=function(t){return i(this,void 0,void 0,(function(){var e,n;return o(this,(function(i){switch(i.label){case 0:return e={error:!1,operation:null},[4,s.HttpUtils.request("/operations","POST",!0,t)];case 1:return(n=i.sent()).error||n.error?(e.error="Возникла ошибка при добавлении категории дохода. Обратитесь в поддержку",[2,e]):(e.operation&&(e.operation.id=n.response.id,e.operation.type=n.response.type,e.operation.amount=n.response.amount,e.operation.date=n.response.date,e.operation.comment=n.response.comment,e.operation.category=n.response.category),[2,e])}}))}))},t.editOperation=function(t,e){return i(this,void 0,void 0,(function(){var n,i;return o(this,(function(o){switch(o.label){case 0:return n={error:!1,operation:null},[4,s.HttpUtils.request("/operations/"+t,"PUT",!0,e)];case 1:return((i=o.sent()).error||i.error)&&(n.error="Возникла ошибка при редактировании дохода или расхода. Обратитесь в поддержку"),[2,n]}}))}))},t.deleteIncomeExpenseCategory=function(t){return i(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,s.HttpUtils.request("/operations/"+t,"DELETE",!0)];case 1:return e.sent().error?(console.log("Возникла ошибка при удалении операции. Обратитесь в поддержку"),[2,!1]):(console.log("Удаление операции прошло успешно"),[2,!0])}}))}))},t}();e.OperationsService=r},755:(t,e)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.PeriodForButtonEnum=void 0,function(t){t.day="day",t.week="week",t.month="month",t.year="year",t.all="all",t.interval="interval"}(n||(e.PeriodForButtonEnum=n={}))},914:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.AuthUtils=void 0;var r=s(n(798)),a=function(){function t(){}return t.setAuthInfo=function(t,e,n){void 0===n&&(n=null),localStorage.setItem(this.accessTokenKey,t),localStorage.setItem(this.refreshTokenKey,e),n&&localStorage.setItem(this.userInfoTokenKey,JSON.stringify(n))},t.removeAuthInfo=function(){localStorage.removeItem(this.accessTokenKey),localStorage.removeItem(this.refreshTokenKey),localStorage.removeItem(this.userInfoTokenKey)},t.getAuthInfo=function(t){var e;if(void 0===t&&(t=null),t&&[this.accessTokenKey,this.refreshTokenKey,this.userInfoTokenKey].includes(t))return localStorage.getItem(t);var n=localStorage.getItem(this.accessTokenKey),i=localStorage.getItem(this.refreshTokenKey),o=localStorage.getItem(this.userInfoTokenKey);return(e={})[this.accessTokenKey]=n,e[this.refreshTokenKey]=i,e[this.userInfoTokenKey]=o?JSON.parse(o):null,e},t.updateRefreshToken=function(){return i(this,void 0,void 0,(function(){var t,e,n,i;return o(this,(function(o){switch(o.label){case 0:return t=!1,(e=this.getAuthInfo(this.refreshTokenKey))?[4,fetch(r.default+"/refresh",{method:"POST",headers:{"Content-type":"application/json",Accept:"application/json"},body:JSON.stringify({refreshToken:e})})]:[3,3];case 1:return(n=o.sent())&&200===n.status?[4,n.json()]:[3,3];case 2:(i=o.sent())&&!i.error&&(this.setAuthInfo(i.tokens.accessToken,i.tokens.refreshToken),t=!0),o.label=3;case 3:return t||this.removeAuthInfo(),[2,t]}}))}))},t.accessTokenKey="accessToken",t.refreshTokenKey="refreshToken",t.userInfoTokenKey="userInfo",t}();e.AuthUtils=a},532:function(t,e,n){"use strict";var i=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,s){function r(t){try{l(i.next(t))}catch(t){s(t)}}function a(t){try{l(i.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,o,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},r=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return r.next=a(0),r.throw=a(1),r.return=a(2),"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HttpUtils=void 0;var r=s(n(798)),a=n(914),l=function(){function t(){}return t.request=function(t){return i(this,arguments,void 0,(function(t,e,n,i){var s,l,c,h,u;return void 0===e&&(e="GET"),void 0===n&&(n=!0),void 0===i&&(i=null),o(this,(function(o){switch(o.label){case 0:s={error:!1,response:null},l={method:e,headers:{"Content-type":"application/json",Accept:"application/json"}},c=null,n&&(c=a.AuthUtils.getAuthInfo(a.AuthUtils.accessTokenKey))&&(l.headers["x-auth-token"]=c),i&&(l.body=JSON.stringify(i)),h=null,o.label=1;case 1:return o.trys.push([1,4,,5]),[4,fetch(r.default+t,l)];case 2:return h=o.sent(),u=s,[4,h.json()];case 3:return u.response=o.sent(),console.log(s.response),[3,5];case 4:return o.sent(),s.error=!0,[2,s];case 5:return h.status<200||h.status>=300?(s.error=!0,n&&401===h.status?c?[3,6]:(s.redirect="/login",[3,8]):[3,8]):[3,8];case 6:return[4,a.AuthUtils.updateRefreshToken()];case 7:if(o.sent())return[2,this.request(t,e,n,i)];s.redirect="/login",o.label=8;case 8:return[2,s]}}))}))},t}();e.HttpUtils=l},309:(t,e,n)=>{"use strict";t.exports=n.p+"cb02a42f24299e95adb5.ttf"},537:(t,e,n)=>{"use strict";t.exports=n.p+"116fcd4fd987818c5d98.ttf"},636:(t,e,n)=>{"use strict";t.exports=n.p+"5dd918926d41224c8142.ttf"},330:(t,e,n)=>{"use strict";t.exports=n.p+"3279ac5588ad4a0834b4.png"},1:function(t){t.exports=function(){"use strict";function t(t){return t+.5|0}const e=(t,e,n)=>Math.max(Math.min(t,n),e);function n(n){return e(t(2.55*n),0,255)}function i(n){return e(t(255*n),0,255)}function o(n){return e(t(n/2.55)/100,0,1)}function s(n){return e(t(100*n),0,100)}const r={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},a=[..."0123456789ABCDEF"],l=t=>a[15&t],c=t=>a[(240&t)>>4]+a[15&t],h=t=>(240&t)>>4==(15&t);function u(t){var e,n=t.length;return"#"===t[0]&&(4===n||5===n?e={r:255&17*r[t[1]],g:255&17*r[t[2]],b:255&17*r[t[3]],a:5===n?17*r[t[4]]:255}:7!==n&&9!==n||(e={r:r[t[1]]<<4|r[t[2]],g:r[t[3]]<<4|r[t[4]],b:r[t[5]]<<4|r[t[6]],a:9===n?r[t[7]]<<4|r[t[8]]:255})),e}function d(t){var e=(t=>h(t.r)&&h(t.g)&&h(t.b)&&h(t.a))(t)?l:c;return t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0}const f=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function p(t,e,n){const i=e*Math.min(n,1-n),o=(e,o=(e+t/30)%12)=>n-i*Math.max(Math.min(o-3,9-o,1),-1);return[o(0),o(8),o(4)]}function g(t,e,n){const i=(i,o=(i+t/60)%6)=>n-n*e*Math.max(Math.min(o,4-o,1),0);return[i(5),i(3),i(1)]}function m(t,e,n){const i=p(t,1,.5);let o;for(e+n>1&&(o=1/(e+n),e*=o,n*=o),o=0;o<3;o++)i[o]*=1-e-n,i[o]+=e;return i}function b(t){const e=t.r/255,n=t.g/255,i=t.b/255,o=Math.max(e,n,i),s=Math.min(e,n,i),r=(o+s)/2;let a,l,c;return o!==s&&(c=o-s,l=r>.5?c/(2-o-s):c/(o+s),a=function(t,e,n,i,o){return t===o?(e-n)/i+(e<n?6:0):e===o?(n-t)/i+2:(t-e)/i+4}(e,n,i,c,o),a=60*a+.5),[0|a,l||0,r]}function x(t,e,n,o){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,o)).map(i)}function y(t,e,n){return x(p,t,e,n)}function v(t,e,n){return x(m,t,e,n)}function A(t,e,n){return x(g,t,e,n)}function _(t){return(t%360+360)%360}function w(t){const e=f.exec(t);let o,s=255;if(!e)return;e[5]!==o&&(s=e[6]?n(+e[5]):i(+e[5]));const r=_(+e[2]),a=+e[3]/100,l=+e[4]/100;return o="hwb"===e[1]?v(r,a,l):"hsv"===e[1]?A(r,a,l):y(r,a,l),{r:o[0],g:o[1],b:o[2],a:s}}function C(t,e){var n=b(t);n[0]=_(n[0]+e),n=y(n),t.r=n[0],t.g=n[1],t.b=n[2]}function k(t){if(!t)return;const e=b(t),n=e[0],i=s(e[1]),r=s(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${r}%, ${o(t.a)})`:`hsl(${n}, ${i}%, ${r}%)`}const I={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},E={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let M;function S(t){M||(M=function(){const t={},e=Object.keys(E),n=Object.keys(I);let i,o,s,r,a;for(i=0;i<e.length;i++){for(r=a=e[i],o=0;o<n.length;o++)s=n[o],a=a.replace(s,I[s]);s=parseInt(E[r],16),t[a]=[s>>16&255,s>>8&255,255&s]}return t}(),M.transparent=[0,0,0,0]);const e=M[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const O=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function P(t){const i=O.exec(t);let o,s,r,a=255;if(i){if(i[7]!==o){const t=+i[7];a=i[8]?n(t):e(255*t,0,255)}return o=+i[1],s=+i[3],r=+i[5],o=255&(i[2]?n(o):e(o,0,255)),s=255&(i[4]?n(s):e(s,0,255)),r=255&(i[6]?n(r):e(r,0,255)),{r:o,g:s,b:r,a}}}function B(t){return t&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${o(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`)}const D=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,T=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function L(t,e,n){if(t){let i=b(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=y(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function R(t,e){return t?Object.assign(e||{},t):t}function F(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=i(t[3]))):(e=R(t,{r:0,g:0,b:0,a:1})).a=i(e.a),e}class N{constructor(t){if(t instanceof N)return t;const e=typeof t;let n;var i;"object"===e?n=F(t):"string"===e&&(n=u(t)||S(t)||("r"===(i=t).charAt(0)?P(i):w(i))),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=R(this._rgb);return t&&(t.a=o(t.a)),t}set rgb(t){this._rgb=F(t)}rgbString(){return this._valid?B(this._rgb):void 0}hexString(){return this._valid?d(this._rgb):void 0}hslString(){return this._valid?k(this._rgb):void 0}mix(t,e){if(t){const n=this.rgb,i=t.rgb;let o;const s=e===o?.5:e,r=2*s-1,a=n.a-i.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;o=1-l,n.r=255&l*n.r+o*i.r+.5,n.g=255&l*n.g+o*i.g+.5,n.b=255&l*n.b+o*i.b+.5,n.a=s*n.a+(1-s)*i.a,this.rgb=n}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,n){const s=T(o(t.r)),r=T(o(t.g)),a=T(o(t.b));return{r:i(D(s+n*(T(o(e.r))-s))),g:i(D(r+n*(T(o(e.g))-r))),b:i(D(a+n*(T(o(e.b))-a))),a:t.a+n*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new N(this.rgb)}alpha(t){return this._rgb.a=i(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const e=this._rgb,n=t(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=n,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return L(this._rgb,2,t),this}darken(t){return L(this._rgb,2,-t),this}saturate(t){return L(this._rgb,1,t),this}desaturate(t){return L(this._rgb,1,-t),this}rotate(t){return C(this._rgb,t),this}}function z(t){return new N(t)}var j=Object.freeze({__proto__:null,Color:N,b2n:o,b2p:function(n){return e(t(n/2.55),0,100)},default:z,hexParse:u,hexString:d,hsl2rgb:y,hslString:k,hsv2rgb:A,hueParse:w,hwb2rgb:v,lim:e,n2b:i,n2p:s,nameParse:S,p2b:n,rgb2hsl:b,rgbParse:P,rgbString:B,rotate:C,round:t});return Object.assign(z,j)}()},245:(t,e,n)=>{const i=n(969),{Chart:o,registerables:s}=i;o.register(...s),t.exports=Object.assign(o,i)},969:(t,e,n)=>{"use strict";var i=n(878);n(1);class o{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const o=e.listeners[i],s=e.duration;o.forEach((i=>i({chart:t,initial:e.initial,numSteps:s,currentStep:Math.min(n-e.start,s)})))}_refresh(){this._request||(this._running=!0,this._request=i.requestAnimFrame.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const o=n.items;let s,r=o.length-1,a=!1;for(;r>=0;--r)s=o[r],s._active?(s._total>n.duration&&(n.duration=s._total),s.tick(t),a=!0):(o[r]=o[o.length-1],o.pop());a&&(i.draw(),this._notify(i,n,t,"progress")),o.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=o.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var s=new o;const r="transparent",a={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const o=i.color(t||r),s=o.valid&&i.color(e||r);return s&&s.valid?s.mix(o,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class l{constructor(t,e,n,o){const s=e[n];o=i.resolve([t.to,o,s,t.from]);const r=i.resolve([t.from,s,o]);this._active=!0,this._fn=t.fn||a[t.type||typeof r],this._easing=i.effects[t.easing]||i.effects.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=r,this._to=o,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const o=this._target[this._prop],s=n-this._start,r=this._duration-s;this._start=n,this._duration=Math.floor(Math.max(r,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=i.resolve([t.to,e,o,t.from]),this._from=i.resolve([t.from,o,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,o=this._from,s=this._loop,r=this._to;let a;if(this._active=o!==r&&(s||e<n),!this._active)return this._target[i]=r,void this._notify(!0);e<0?this._target[i]=o:(a=e/n%2,a=s&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[i]=this._fn(o,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}class c{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!i.isObject(t))return;const e=Object.keys(i.defaults.animation),n=this._properties;Object.getOwnPropertyNames(t).forEach((o=>{const s=t[o];if(!i.isObject(s))return;const r={};for(const t of e)r[t]=s[t];(i.isArray(s.properties)&&s.properties||[o]).forEach((t=>{t!==o&&n.has(t)||n.set(t,r)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const o=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const o=t[i[e]];o&&o.active()&&n.push(o.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),o}_createAnimations(t,e){const n=this._properties,i=[],o=t.$animations||(t.$animations={}),s=Object.keys(e),r=Date.now();let a;for(a=s.length-1;a>=0;--a){const c=s[a];if("$"===c.charAt(0))continue;if("options"===c){i.push(...this._animateOptions(t,e));continue}const h=e[c];let u=o[c];const d=n.get(c);if(u){if(d&&u.active()){u.update(d,h,r);continue}u.cancel()}d&&d.duration?(o[c]=u=new l(d,t,c,h),i.push(u)):t[c]=h}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(s.add(this._chart,n),!0):void 0}}function h(t,e){const n=t&&t.options||{},i=n.reverse,o=void 0===n.min?e:0,s=void 0===n.max?e:0;return{start:i?s:o,end:i?o:s}}function u(t,e){const n=[],i=t._getSortedDatasetMetas(e);let o,s;for(o=0,s=i.length;o<s;++o)n.push(i[o].index);return n}function d(t,e,n,o={}){const s=t.keys,r="single"===o.mode;let a,l,c,h;if(null===e)return;let u=!1;for(a=0,l=s.length;a<l;++a){if(c=+s[a],c===n){if(u=!0,o.all)continue;break}h=t.values[c],i.isNumberFinite(h)&&(r||0===e||i.sign(e)===i.sign(h))&&(e+=h)}return u||o.all?e:0}function f(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function p(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function g(t,e,n,i){for(const o of e.getMatchingVisibleMetas(i).reverse()){const e=t[o.index];if(n&&e>0||!n&&e<0)return o.index}return null}function m(t,e){const{chart:n,_cachedMeta:i}=t,o=n._stacks||(n._stacks={}),{iScale:s,vScale:r,index:a}=i,l=s.axis,c=r.axis,h=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(s,r,i),u=e.length;let d;for(let t=0;t<u;++t){const n=e[t],{[l]:s,[c]:u}=n;d=(n._stacks||(n._stacks={}))[c]=p(o,h,s),d[a]=u,d._top=g(d,r,!0,i.type),d._bottom=g(d,r,!1,i.type),(d._visualValues||(d._visualValues={}))[a]=u}}function b(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function x(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n],void 0!==e[i]._visualValues&&void 0!==e[i]._visualValues[n]&&delete e[i]._visualValues[n]}}}const y=t=>"reset"===t||"none"===t,v=(t,e)=>e?t:Object.assign({},t);class A{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=f(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&x(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),o=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,s=e.xAxisID=i.valueOrDefault(n.xAxisID,b(t,"x")),r=e.yAxisID=i.valueOrDefault(n.yAxisID,b(t,"y")),a=e.rAxisID=i.valueOrDefault(n.rAxisID,b(t,"r")),l=e.indexAxis,c=e.iAxisID=o(l,s,r,a),h=e.vAxisID=o(l,r,s,a);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(r),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(c),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&i.unlistenArrayEvents(this._data,this),t._stacked&&x(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(i.isObject(e)){const t=this._cachedMeta;this._data=function(t,e){const{iScale:n,vScale:i}=e,o="x"===n.axis?"x":"y",s="x"===i.axis?"x":"y",r=Object.keys(t),a=new Array(r.length);let l,c,h;for(l=0,c=r.length;l<c;++l)h=r[l],a[l]={[o]:h,[s]:t[h]};return a}(e,t)}else if(n!==e){if(n){i.unlistenArrayEvents(n,this);const t=this._cachedMeta;x(t),t._parsed=[]}e&&Object.isExtensible(e)&&i.listenArrayEvents(e,this),this._syncList=[],this._data=e}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const o=e._stacked;e._stacked=f(e.vScale,e),e.stack!==n.stack&&(i=!0,x(e),e.stack=n.stack),this._resyncElements(t),(i||o!==e._stacked)&&(m(this,e._parsed),e._stacked=f(e.vScale,e))}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:o}=this,{iScale:s,_stacked:r}=n,a=s.axis;let l,c,h,u=0===t&&e===o.length||n._sorted,d=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=o,n._sorted=!0,h=o;else{h=i.isArray(o[t])?this.parseArrayData(n,o,t,e):i.isObject(o[t])?this.parseObjectData(n,o,t,e):this.parsePrimitiveData(n,o,t,e);const s=()=>null===c[a]||d&&c[a]<d[a];for(l=0;l<e;++l)n._parsed[l+t]=c=h[l],u&&(s()&&(u=!1),d=c);n._sorted=u}r&&m(this,h)}parsePrimitiveData(t,e,n,i){const{iScale:o,vScale:s}=t,r=o.axis,a=s.axis,l=o.getLabels(),c=o===s,h=new Array(i);let u,d,f;for(u=0,d=i;u<d;++u)f=u+n,h[u]={[r]:c||o.parse(l[f],f),[a]:s.parse(e[f],f)};return h}parseArrayData(t,e,n,i){const{xScale:o,yScale:s}=t,r=new Array(i);let a,l,c,h;for(a=0,l=i;a<l;++a)c=a+n,h=e[c],r[a]={x:o.parse(h[0],c),y:s.parse(h[1],c)};return r}parseObjectData(t,e,n,o){const{xScale:s,yScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=new Array(o);let h,u,d,f;for(h=0,u=o;h<u;++h)d=h+n,f=e[d],c[h]={x:s.parse(i.resolveObjectKey(f,a),d),y:r.parse(i.resolveObjectKey(f,l),d)};return c}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,o=this._cachedMeta,s=e[t.axis];return d({keys:u(i,!0),values:e._stacks[t.axis]._visualValues},s,o.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const o=n[e.axis];let s=null===o?NaN:o;const r=i&&n._stacks[e.axis];i&&r&&(i.values=r,s=d(i,o,this._cachedMeta.index)),t.min=Math.min(t.min,s),t.max=Math.max(t.max,s)}getMinMax(t,e){const n=this._cachedMeta,o=n._parsed,s=n._sorted&&t===n.iScale,r=o.length,a=this._getOtherScale(t),l=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:u(n,!0),values:null})(e,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:d}=function(t){const{min:e,max:n,minDefined:i,maxDefined:o}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:o?n:Number.POSITIVE_INFINITY}}(a);let f,p;function g(){p=o[f];const e=p[a.axis];return!i.isNumberFinite(p[t.axis])||h>e||d<e}for(f=0;f<r&&(g()||(this.updateRangeFromParsed(c,t,p,l),!s));++f);if(s)for(f=r-1;f>=0;--f)if(!g()){this.updateRangeFromParsed(c,t,p,l);break}return c}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let o,s,r;for(o=0,s=e.length;o<s;++o)r=e[o][t.axis],i.isNumberFinite(r)&&n.push(r);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,o=this.getParsed(t);return{label:n?""+n.getLabelForValue(o[n.axis]):"",value:i?""+i.getLabelForValue(o[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,o,s;return i.isObject(t)?(e=t.top,n=t.right,o=t.bottom,s=t.left):e=n=o=s=t,{top:e,right:n,bottom:o,left:s,disabled:!1===t}}(i.valueOrDefault(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=h(t,n),o=h(e,n);return{top:o.end,right:i.end,bottom:o.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],o=e.chartArea,s=[],r=this._drawStart||0,a=this._drawCount||i.length-r,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,o,r,a),c=r;c<r+a;++c){const e=i[c];e.hidden||(e.active&&l?s.push(e):e.draw(t,o))}for(c=0;c<s.length;++c)s[c].draw(t,o)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const o=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,n){return i.createContext(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=o.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return i.createContext(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=o,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=n,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const o="active"===e,s=this._cachedDataOpts,r=t+"-"+e,a=s[r],l=this.enableOptionSharing&&i.defined(n);if(a)return v(a,l);const c=this.chart.config,h=c.datasetElementScopeKeys(this._type,t),u=o?[`${t}Hover`,"hover",t,""]:[t,""],d=c.getOptionScopes(this.getDataset(),h),f=Object.keys(i.defaults.elements[t]),p=c.resolveNamedOptions(d,f,(()=>this.getContext(n,o,e)),u);return p.$shared&&(p.$shared=l,s[r]=Object.freeze(v(p,l))),p}_resolveAnimations(t,e,n){const i=this.chart,o=this._cachedDataOpts,s=`animation-${e}`,r=o[s];if(r)return r;let a;if(!1!==i.options.animation){const i=this.chart.config,o=i.datasetAnimationScopeKeys(this._type,e),s=i.getOptionScopes(this.getDataset(),o);a=i.createResolver(s,this.getContext(t,n,e))}const l=new c(i,a&&a.animations);return a&&a._cacheable&&(o[s]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||y(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const n=this.resolveDataElementOptions(t,e),i=this._sharedOptions,o=this.getSharedOptions(n),s=this.includeOptions(e,o)||o!==i;return this.updateSharedOptions(o,e,n),{sharedOptions:o,includeOptions:s}}updateElement(t,e,n,i){y(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!y(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const o=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(o)||o})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,o=e.length,s=Math.min(o,i);s&&this.parse(0,s),o>i?this._insertElements(i,o-i,t):o<i&&this._removeElements(o,i-o)}_insertElements(t,e,n=!0){const i=this._cachedMeta,o=i.data,s=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=s;r--)t[r]=t[r-e]};for(a(o),r=t;r<s;++r)o[r]=new this.dataElementType;this._parsing&&a(i._parsed),this.parse(t,e),n&&this.updateElements(o,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&x(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function _(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let o=[];for(let e=0,i=n.length;e<i;e++)o=o.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=i._arrayUnique(o.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let o,s,r,a,l=e._length;const c=()=>{32767!==r&&-32768!==r&&(i.defined(a)&&(l=Math.min(l,Math.abs(r-a)||l)),a=r)};for(o=0,s=n.length;o<s;++o)r=e.getPixelForValue(n[o]),c();for(a=void 0,o=0,s=e.ticks.length;o<s;++o)r=e.getPixelForTick(o),c();return l}function w(t,e,n,o){return i.isArray(t)?function(t,e,n,i){const o=n.parse(t[0],i),s=n.parse(t[1],i),r=Math.min(o,s),a=Math.max(o,s);let l=r,c=a;Math.abs(r)>Math.abs(a)&&(l=a,c=r),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:o,end:s,min:r,max:a}}(t,e,n,o):e[n.axis]=n.parse(t,o),e}function C(t,e,n,i){const o=t.iScale,s=t.vScale,r=o.getLabels(),a=o===s,l=[];let c,h,u,d;for(c=n,h=n+i;c<h;++c)d=e[c],u={},u[o.axis]=a||o.parse(r[c],c),l.push(w(d,u,s,c));return l}function k(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function I(t,e,n,i){let o=e.borderSkipped;const s={};if(!o)return void(t.borderSkipped=s);if(!0===o)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:c,bottom:h}=function(t){let e,n,i,o,s;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(o="end",s="start"):(o="start",s="end"),{start:n,end:i,reverse:e,top:o,bottom:s}}(t);"middle"===o&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?o=c:(n._bottom||0)===i?o=h:(s[E(h,r,a,l)]=!0,o=c)),s[E(o,r,a,l)]=!0,t.borderSkipped=s}function E(t,e,n,i){var o,s,r;return i?(r=n,t=M(t=(o=t)===(s=e)?r:o===r?s:o,n,e)):t=M(t,e,n),t}function M(t,e,n){return"start"===t?e:"end"===t?n:t}function S(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}class O extends A{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,n,i){return C(t,e,n,i)}parseArrayData(t,e,n,i){return C(t,e,n,i)}parseObjectData(t,e,n,o){const{iScale:s,vScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c="x"===s.axis?a:l,h="x"===r.axis?a:l,u=[];let d,f,p,g;for(d=n,f=n+o;d<f;++d)g=e[d],p={},p[s.axis]=s.parse(i.resolveObjectKey(g,c),d),u.push(w(i.resolveObjectKey(g,h),p,r,d));return u}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const o=n._custom;o&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,o.min),t.max=Math.max(t.max,o.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,o=this.getParsed(t),s=o._custom,r=k(s)?"["+s.start+", "+s.end+"]":""+i.getLabelForValue(o[i.axis]);return{label:""+n.getLabelForValue(o[n.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,o){const s="reset"===o,{index:r,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),c=a.isHorizontal(),h=this._getRuler(),{sharedOptions:u,includeOptions:d}=this._getSharedOptions(e,o);for(let f=e;f<e+n;f++){const e=this.getParsed(f),n=s||i.isNullOrUndef(e[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(f),p=this._calculateBarIndexPixels(f,h),g=(e._stacks||{})[a.axis],m={horizontal:c,base:n.base,enableBorderRadius:!g||k(e._custom)||r===g._top||r===g._bottom,x:c?n.head:p.center,y:c?p.center:n.head,height:c?p.size:Math.abs(n.size),width:c?Math.abs(n.size):p.size};d&&(m.options=u||this.resolveDataElementOptions(f,t[f].active?"active":o));const b=m.options||t[f].options;I(m,b,g,r),S(m,b,h.ratio),this.updateElement(t[f],f,m,o)}}_getStacks(t,e){const{iScale:n}=this._cachedMeta,o=n.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),s=n.options.stacked,r=[],a=this._cachedMeta.controller.getParsed(e),l=a&&a[n.axis],c=t=>{const e=t._parsed.find((t=>t[n.axis]===l)),o=e&&e[t.vScale.axis];if(i.isNullOrUndef(o)||isNaN(o))return!0};for(const n of o)if((void 0===e||!c(n))&&((!1===s||-1===r.indexOf(n.stack)||void 0===s&&void 0===n.stack)&&r.push(n.stack),n.index===t))break;return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),o=void 0!==e?i.indexOf(e):-1;return-1===o?i.length-1:o}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let o,s;for(o=0,s=e.data.length;o<s;++o)i.push(n.getPixelForValue(this.getParsed(o)[n.axis],o));const r=t.barThickness;return{min:r||_(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n,index:o},options:{base:s,minBarLength:r}}=this,a=s||0,l=this.getParsed(t),c=l._custom,h=k(c);let u,d,f=l[e.axis],p=0,g=n?this.applyStack(e,l,n):f;g!==f&&(p=g-f,g=f),h&&(f=c.barStart,g=c.barEnd-c.barStart,0!==f&&i.sign(f)!==i.sign(c.barEnd)&&(p=0),p+=f);const m=i.isNullOrUndef(s)||h?p:s;let b=e.getPixelForValue(m);if(u=this.chart.getDataVisibility(t)?e.getPixelForValue(p+g):b,d=u-b,Math.abs(d)<r){d=function(t,e,n){return 0!==t?i.sign(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(d,e,a)*r,f===a&&(b-=d/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),c=Math.min(t,s),p=Math.max(t,s);b=Math.max(Math.min(b,p),c),u=b+d,n&&!h&&(l._stacks[e.axis]._visualValues[o]=e.getValueForPixel(u)-e.getValueForPixel(b))}if(b===e.getPixelForValue(a)){const t=i.sign(d)*e.getLineWidthForValue(a)/2;b+=t,d-=t}return{size:d,base:b,head:u,center:u+d/2}}_calculateBarIndexPixels(t,e){const n=e.scale,o=this.options,s=o.skipNull,r=i.valueOrDefault(o.maxBarThickness,1/0);let a,l;if(e.grouped){const n=s?this._getStackCount(t):e.stackCount,c="flex"===o.barThickness?function(t,e,n,i){const o=e.pixels,s=o[t];let r=t>0?o[t-1]:null,a=t<o.length-1?o[t+1]:null;const l=n.categoryPercentage;null===r&&(r=s-(null===a?e.end-e.start:a-s)),null===a&&(a=s+s-r);const c=s-(s-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,o,n):function(t,e,n,o){const s=n.barThickness;let r,a;return i.isNullOrUndef(s)?(r=e.min*n.categoryPercentage,a=n.barPercentage):(r=s*o,a=1),{chunk:r/o,ratio:a,start:e.pixels[t]-r/2}}(t,e,o,n),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);a=c.start+c.chunk*h+c.chunk/2,l=Math.min(r,c.chunk*c.ratio)}else a=n.getPixelForValue(this.getParsed(t)[n.axis],t),l=Math.min(r,e.min*e.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let o=0;for(;o<i;++o)null===this.getParsed(o)[e.axis]||n[o].hidden||n[o].draw(this._ctx)}}class P extends A{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,i){const o=super.parsePrimitiveData(t,e,n,i);for(let t=0;t<o.length;t++)o[t]._custom=this.resolveDataElementOptions(t+n).radius;return o}parseArrayData(t,e,n,o){const s=super.parseArrayData(t,e,n,o);for(let t=0;t<s.length;t++){const o=e[n+t];s[t]._custom=i.valueOrDefault(o[2],this.resolveDataElementOptions(t+n).radius)}return s}parseObjectData(t,e,n,o){const s=super.parseObjectData(t,e,n,o);for(let t=0;t<s.length;t++){const o=e[n+t];s[t]._custom=i.valueOrDefault(o&&o.r&&+o.r,this.resolveDataElementOptions(t+n).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart.data.labels||[],{xScale:i,yScale:o}=e,s=this.getParsed(t),r=i.getLabelForValue(s.x),a=o.getLabelForValue(s.y),l=s._custom;return{label:n[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,i){const o="reset"===i,{iScale:s,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,i),c=s.axis,h=r.axis;for(let u=e;u<e+n;u++){const e=t[u],n=!o&&this.getParsed(u),d={},f=d[c]=o?s.getPixelForDecimal(.5):s.getPixelForValue(n[c]),p=d[h]=o?r.getBasePixel():r.getPixelForValue(n[h]);d.skip=isNaN(f)||isNaN(p),l&&(d.options=a||this.resolveDataElementOptions(u,e.active?"active":i),o&&(d.options.radius=0)),this.updateElement(e,u,d,i)}}resolveDataElementOptions(t,e){const n=this.getParsed(t);let o=super.resolveDataElementOptions(t,e);o.$shared&&(o=Object.assign({},o,{$shared:!1}));const s=o.radius;return"active"!==e&&(o.radius=0),o.radius+=i.valueOrDefault(n&&n._custom,s),o}}class B extends A{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n,color:i}}=t.legend.options;return e.labels.map(((e,o)=>{const s=t.getDatasetMeta(0).controller.getStyle(o);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,fontColor:i,lineWidth:s.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(o),index:o}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,o=this._cachedMeta;if(!1===this._parsing)o._parsed=n;else{let s,r,a=t=>+n[t];if(i.isObject(n[t])){const{key:t="value"}=this._parsing;a=e=>+i.resolveObjectKey(n[e],t)}for(s=t,r=t+e;s<r;++s)o._parsed[s]=a(s)}}_getRotation(){return i.toRadians(this.options.rotation-90)}_getCircumference(){return i.toRadians(this.options.circumference)}_getRotationExtents(){let t=i.TAU,e=-i.TAU;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)&&this.chart.getDatasetMeta(n).type===this._type){const i=this.chart.getDatasetMeta(n).controller,o=i._getRotation(),s=i._getCircumference();t=Math.min(t,o),e=Math.max(e,o+s)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,o=this._cachedMeta,s=o.data,r=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-r)/2,0),l=Math.min(i.toPercentage(this.options.cutout,a),1),c=this._getRingWeight(this.index),{circumference:h,rotation:u}=this._getRotationExtents(),{ratioX:d,ratioY:f,offsetX:p,offsetY:g}=function(t,e,n){let o=1,s=1,r=0,a=0;if(e<i.TAU){const l=t,c=l+e,h=Math.cos(l),u=Math.sin(l),d=Math.cos(c),f=Math.sin(c),p=(t,e,o)=>i._angleBetween(t,l,c,!0)?1:Math.max(e,e*n,o,o*n),g=(t,e,o)=>i._angleBetween(t,l,c,!0)?-1:Math.min(e,e*n,o,o*n),m=p(0,h,d),b=p(i.HALF_PI,u,f),x=g(i.PI,h,d),y=g(i.PI+i.HALF_PI,u,f);o=(m-x)/2,s=(b-y)/2,r=-(m+x)/2,a=-(b+y)/2}return{ratioX:o,ratioY:s,offsetX:r,offsetY:a}}(u,h,l),m=(n.width-r)/d,b=(n.height-r)/f,x=Math.max(Math.min(m,b)/2,0),y=i.toDimension(this.options.radius,x),v=(y-Math.max(y*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*y,this.offsetY=g*y,o.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const n=this.options,o=this._cachedMeta,s=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===o._parsed[t]||o.data[t].hidden?0:this.calculateCircumference(o._parsed[t]*s/i.TAU)}updateElements(t,e,n,i){const o="reset"===i,s=this.chart,r=s.chartArea,a=s.options.animation,l=(r.left+r.right)/2,c=(r.top+r.bottom)/2,h=o&&a.animateScale,u=h?0:this.innerRadius,d=h?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,i);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,o);for(g=e;g<e+n;++g){const e=this._circumference(g,o),n=t[g],s={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:d,innerRadius:u};p&&(s.options=f||this.resolveDataElementOptions(g,n.active?"active":i)),m+=e,this.updateElement(n,g,s,i)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,i=0;for(n=0;n<e.length;n++){const o=t._parsed[n];null===o||isNaN(o)||!this.chart.getDataVisibility(n)||e[n].hidden||(i+=Math.abs(o))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?i.TAU*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,o=n.data.labels||[],s=i.formatNumber(e._parsed[t],n.options.locale);return{label:o[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const n=this.chart;let i,o,s,r,a;if(!t)for(i=0,o=n.data.datasets.length;i<o;++i)if(n.isDatasetVisible(i)){s=n.getDatasetMeta(i),t=s.data,r=s.controller;break}if(!t)return 0;for(i=0,o=t.length;i<o;++i)a=r.resolveDataElementOptions(i),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,i=t.length;n<i;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(i.valueOrDefault(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class D extends A{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:o=[],_dataset:s}=e,r=this.chart._animationsDisabled;let{start:a,count:l}=i._getStartAndCountOfVisiblePoints(e,o,r);this._drawStart=a,this._drawCount=l,i._scaleRangesChanged(e)&&(a=0,l=o.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!s._decimated,n.points=o;const c=this.resolveDatasetElementOptions(t);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!r,options:c},t),this.updateElements(o,a,l,t)}updateElements(t,e,n,o){const s="reset"===o,{iScale:r,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:h,includeOptions:u}=this._getSharedOptions(e,o),d=r.axis,f=a.axis,{spanGaps:p,segment:g}=this.options,m=i.isNumber(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||s||"none"===o,x=e+n,y=t.length;let v=e>0&&this.getParsed(e-1);for(let n=0;n<y;++n){const p=t[n],y=b?p:{};if(n<e||n>=x){y.skip=!0;continue}const A=this.getParsed(n),_=i.isNullOrUndef(A[f]),w=y[d]=r.getPixelForValue(A[d],n),C=y[f]=s||_?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,A,l):A[f],n);y.skip=isNaN(w)||isNaN(C)||_,y.stop=n>0&&Math.abs(A[d]-v[d])>m,g&&(y.parsed=A,y.raw=c.data[n]),u&&(y.options=h||this.resolveDataElementOptions(n,p.active?"active":o)),b||this.updateElement(p,n,y,o),v=A}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return n;const o=i[0].size(this.resolveDataElementOptions(0)),s=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,o,s)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}class T extends A{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n,color:i}}=t.legend.options;return e.labels.map(((e,o)=>{const s=t.getDatasetMeta(0).controller.getStyle(o);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,fontColor:i,lineWidth:s.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(o),index:o}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,o=n.data.labels||[],s=i.formatNumber(e._parsed[t].r,n.options.locale);return{label:o[t]||"",value:s}}parseObjectData(t,e,n,o){return i._parseObjectDataRadialScale.bind(this)(t,e,n,o)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,n)=>{const i=this.getParsed(n).r;!isNaN(i)&&this.chart.getDataVisibility(n)&&(i<e.min&&(e.min=i),i>e.max&&(e.max=i))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),o=Math.max(i/2,0),s=(o-Math.max(n.cutoutPercentage?o/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=o-s*this.index,this.innerRadius=this.outerRadius-s}updateElements(t,e,n,o){const s="reset"===o,r=this.chart,a=r.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,h=l.yCenter,u=l.getIndexAngle(0)-.5*i.PI;let d,f=u;const p=360/this.countVisibleElements();for(d=0;d<e;++d)f+=this._computeAngle(d,o,p);for(d=e;d<e+n;d++){const e=t[d];let n=f,i=f+this._computeAngle(d,o,p),g=r.getDataVisibility(d)?l.getDistanceFromCenterForValue(this.getParsed(d).r):0;f=i,s&&(a.animateScale&&(g=0),a.animateRotate&&(n=i=u));const m={x:c,y:h,innerRadius:0,outerRadius:g,startAngle:n,endAngle:i,options:this.resolveDataElementOptions(d,e.active?"active":o)};this.updateElement(e,d,m,o)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&e++})),e}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?i.toRadians(this.resolveDataElementOptions(t,e).angle||n):0}}class L extends B{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class R extends A{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}parseObjectData(t,e,n,o){return i._parseObjectDataRadialScale.bind(this)(t,e,n,o)}update(t){const e=this._cachedMeta,n=e.dataset,i=e.data||[],o=e.iScale.getLabels();if(n.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const s={_loop:!0,_fullLoop:o.length===i.length,options:e};this.updateElement(n,void 0,s,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,n,i){const o=this._cachedMeta.rScale,s="reset"===i;for(let r=e;r<e+n;r++){const e=t[r],n=this.resolveDataElementOptions(r,e.active?"active":i),a=o.getPointPositionForValue(r,this.getParsed(r).r),l=s?o.xCenter:a.x,c=s?o.yCenter:a.y,h={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(e,r,h,i)}}}class F extends A{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,n=this.chart.data.labels||[],{xScale:i,yScale:o}=e,s=this.getParsed(t),r=i.getLabelForValue(s.x),a=o.getLabelForValue(s.y);return{label:n[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:n=[]}=e,o=this.chart._animationsDisabled;let{start:s,count:r}=i._getStartAndCountOfVisiblePoints(e,n,o);if(this._drawStart=s,this._drawCount=r,i._scaleRangesChanged(e)&&(s=0,r=n.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:i,_dataset:s}=e;i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(n,s,r,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,n,o){const s="reset"===o,{iScale:r,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,h=this.resolveDataElementOptions(e,o),u=this.getSharedOptions(h),d=this.includeOptions(o,u),f=r.axis,p=a.axis,{spanGaps:g,segment:m}=this.options,b=i.isNumber(g)?g:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||s||"none"===o;let y=e>0&&this.getParsed(e-1);for(let h=e;h<e+n;++h){const e=t[h],n=this.getParsed(h),g=x?e:{},v=i.isNullOrUndef(n[p]),A=g[f]=r.getPixelForValue(n[f],h),_=g[p]=s||v?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,n,l):n[p],h);g.skip=isNaN(A)||isNaN(_)||v,g.stop=h>0&&Math.abs(n[f]-y[f])>b,m&&(g.parsed=n,g.raw=c.data[h]),d&&(g.options=u||this.resolveDataElementOptions(h,e.active?"active":o)),x||this.updateElement(e,h,g,o),y=n}this.updateSharedOptions(u,o,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}const n=t.dataset,i=n.options&&n.options.borderWidth||0;if(!e.length)return i;const o=e[0].size(this.resolveDataElementOptions(0)),s=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(i,o,s)/2}}var N=Object.freeze({__proto__:null,BarController:O,BubbleController:P,DoughnutController:B,LineController:D,PieController:L,PolarAreaController:T,RadarController:R,ScatterController:F});function z(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class j{static override(t){Object.assign(j.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return z()}parse(){return z()}format(){return z()}add(){return z()}diff(){return z()}startOf(){return z()}endOf(){return z()}}var V={_date:j};function H(t,e,n,o){const{controller:s,data:r,_sorted:a}=t,l=s._cachedMeta.iScale;if(l&&e===l.axis&&"r"!==e&&a&&r.length){const t=l._reversePixels?i._rlookupByKey:i._lookupByKey;if(!o)return t(r,e,n);if(s._sharedOptions){const i=r[0],o="function"==typeof i.getRange&&i.getRange(e);if(o){const i=t(r,e,n-o),s=t(r,e,n+o);return{lo:i.lo,hi:s.hi}}}}return{lo:0,hi:r.length-1}}function W(t,e,n,i,o){const s=t.getSortedVisibleDatasetMetas(),r=n[e];for(let t=0,n=s.length;t<n;++t){const{index:n,data:a}=s[t],{lo:l,hi:c}=H(s[t],e,r,o);for(let t=l;t<=c;++t){const e=a[t];e.skip||i(e,n,t)}}}function U(t,e,n,o,s){const r=[];return s||t.isPointInArea(e)?(W(t,n,e,(function(n,a,l){(s||i._isPointInArea(n,t.chartArea,0))&&n.inRange(e.x,e.y,o)&&r.push({element:n,datasetIndex:a,index:l})}),!0),r):r}function Y(t,e,n,o,s,r){return r||t.isPointInArea(e)?"r"!==n||o?function(t,e,n,i,o,s){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const o=e?Math.abs(t.x-i.x):0,s=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(s,2))}}(n);let l=Number.POSITIVE_INFINITY;return W(t,n,e,(function(n,c,h){const u=n.inRange(e.x,e.y,o);if(i&&!u)return;const d=n.getCenterPoint(o);if(!s&&!t.isPointInArea(d)&&!u)return;const f=a(e,d);f<l?(r=[{element:n,datasetIndex:c,index:h}],l=f):f===l&&r.push({element:n,datasetIndex:c,index:h})})),r}(t,e,n,o,s,r):function(t,e,n,o){let s=[];return W(t,n,e,(function(t,n,r){const{startAngle:a,endAngle:l}=t.getProps(["startAngle","endAngle"],o),{angle:c}=i.getAngleFromPoint(t,{x:e.x,y:e.y});i._angleBetween(c,a,l)&&s.push({element:t,datasetIndex:n,index:r})})),s}(t,e,n,s):[]}function $(t,e,n,i,o){const s=[],r="x"===n?"inXRange":"inYRange";let a=!1;return W(t,n,e,((t,i,l)=>{t[r]&&t[r](e[n],o)&&(s.push({element:t,datasetIndex:i,index:l}),a=a||t.inRange(e.x,e.y,o))})),i&&!a?[]:s}var Q={evaluateInteractionItems:W,modes:{index(t,e,n,o){const s=i.getRelativePosition(e,t),r=n.axis||"x",a=n.includeInvisible||!1,l=n.intersect?U(t,s,r,o,a):Y(t,s,r,!1,o,a),c=[];return l.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=l[0].index,n=t.data[e];n&&!n.skip&&c.push({element:n,datasetIndex:t.index,index:e})})),c):[]},dataset(t,e,n,o){const s=i.getRelativePosition(e,t),r=n.axis||"xy",a=n.includeInvisible||!1;let l=n.intersect?U(t,s,r,o,a):Y(t,s,r,!1,o,a);if(l.length>0){const e=l[0].datasetIndex,n=t.getDatasetMeta(e).data;l=[];for(let t=0;t<n.length;++t)l.push({element:n[t],datasetIndex:e,index:t})}return l},point:(t,e,n,o)=>U(t,i.getRelativePosition(e,t),n.axis||"xy",o,n.includeInvisible||!1),nearest(t,e,n,o){const s=i.getRelativePosition(e,t),r=n.axis||"xy",a=n.includeInvisible||!1;return Y(t,s,r,n.intersect,o,a)},x:(t,e,n,o)=>$(t,i.getRelativePosition(e,t),"x",n.intersect,o),y:(t,e,n,o)=>$(t,i.getRelativePosition(e,t),"y",n.intersect,o)}};const q=["left","top","right","bottom"];function K(t,e){return t.filter((t=>t.pos===e))}function X(t,e){return t.filter((t=>-1===q.indexOf(t.pos)&&t.box.axis===e))}function G(t,e){return t.sort(((t,n)=>{const i=e?n:t,o=e?t:n;return i.weight===o.weight?i.index-o.index:i.weight-o.weight}))}function Z(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function J(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function tt(t,e,n,o){const{pos:s,box:r}=n,a=t.maxPadding;if(!i.isObject(s)){n.size&&(t[s]-=n.size);const e=o[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?r.height:r.width),n.size=e.size/e.count,t[s]+=n.size}r.getPadding&&J(a,r.getPadding());const l=Math.max(0,e.outerWidth-Z(a,t,"left","right")),c=Math.max(0,e.outerHeight-Z(a,t,"top","bottom")),h=l!==t.w,u=c!==t.h;return t.w=l,t.h=c,n.horizontal?{same:h,other:u}:{same:u,other:h}}function et(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function nt(t,e,n,i){const o=[];let s,r,a,l,c,h;for(s=0,r=t.length,c=0;s<r;++s){a=t[s],l=a.box,l.update(a.width||e.w,a.height||e.h,et(a.horizontal,e));const{same:r,other:u}=tt(e,n,a,i);c|=r&&o.length,h=h||u,l.fullSize||o.push(a)}return c&&nt(o,e,n,i)||h}function it(t,e,n,i,o){t.top=n,t.left=e,t.right=e+i,t.bottom=n+o,t.width=i,t.height=o}function ot(t,e,n,o){const s=n.padding;let{x:r,y:a}=e;for(const l of t){const t=l.box,c=o[l.stack]||{count:1,placed:0,weight:1},h=l.stackWeight/c.weight||1;if(l.horizontal){const o=e.w*h,r=c.size||t.height;i.defined(c.start)&&(a=c.start),t.fullSize?it(t,s.left,a,n.outerWidth-s.right-s.left,r):it(t,e.left+c.placed,a,o,r),c.start=a,c.placed+=o,a=t.bottom}else{const o=e.h*h,a=c.size||t.width;i.defined(c.start)&&(r=c.start),t.fullSize?it(t,r,s.top,a,n.outerHeight-s.bottom-s.top):it(t,r,e.top+c.placed,a,o),c.start=r,c.placed+=o,r=t.right}}e.x=r,e.y=a}var st={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,o){if(!t)return;const s=i.toPadding(t.options.layout.padding),r=Math.max(e-s.width,0),a=Math.max(n-s.height,0),l=function(t){const e=function(t){const e=[];let n,i,o,s,r,a;for(n=0,i=(t||[]).length;n<i;++n)o=t[n],({position:s,options:{stack:r,stackWeight:a=1}}=o),e.push({index:n,box:o,pos:s,horizontal:o.isHorizontal(),weight:o.weight,stack:r&&s+r,stackWeight:a});return e}(t),n=G(e.filter((t=>t.box.fullSize)),!0),i=G(K(e,"left"),!0),o=G(K(e,"right")),s=G(K(e,"top"),!0),r=G(K(e,"bottom")),a=X(e,"x"),l=X(e,"y");return{fullSize:n,leftAndTop:i.concat(s),rightAndBottom:o.concat(l).concat(r).concat(a),chartArea:K(e,"chartArea"),vertical:i.concat(o).concat(l),horizontal:s.concat(r).concat(a)}}(t.boxes),c=l.vertical,h=l.horizontal;i.each(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=c.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:n,padding:s,availableWidth:r,availableHeight:a,vBoxMaxWidth:r/2/u,hBoxMaxHeight:a/2}),f=Object.assign({},s);J(f,i.toPadding(o));const p=Object.assign({maxPadding:f,w:r,h:a,x:s.left,y:s.top},s),g=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:o}=n;if(!t||!q.includes(i))continue;const s=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});s.count++,s.weight+=o}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:o}=e;let s,r,a;for(s=0,r=t.length;s<r;++s){a=t[s];const{fullSize:r}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*i:r&&e.availableWidth,a.height=o):(a.width=i,a.height=c?c*o:r&&e.availableHeight)}return n}(c.concat(h),d);nt(l.fullSize,p,d,g),nt(c,p,d,g),nt(h,p,d,g)&&nt(c,p,d,g),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(p),ot(l.leftAndTop,p,d,g),p.x+=p.w,p.y+=p.h,ot(l.rightAndBottom,p,d,g),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},i.each(l.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class rt{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class at extends rt{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const lt="$chartjs",ct={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ht=t=>null===t||""===t,ut=!!i.supportsEventListenerOptions&&{passive:!0};function dt(t,e,n){t&&t.canvas&&t.canvas.removeEventListener(e,n,ut)}function ft(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function pt(t,e,n){const i=t.canvas,o=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||ft(n.addedNodes,i),e=e&&!ft(n.removedNodes,i);e&&n()}));return o.observe(document,{childList:!0,subtree:!0}),o}function gt(t,e,n){const i=t.canvas,o=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||ft(n.removedNodes,i),e=e&&!ft(n.addedNodes,i);e&&n()}));return o.observe(document,{childList:!0,subtree:!0}),o}const mt=new Map;let bt=0;function xt(){const t=window.devicePixelRatio;t!==bt&&(bt=t,mt.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function yt(t,e,n){const o=t.canvas,s=o&&i._getParentNode(o);if(!s)return;const r=i.throttled(((t,e)=>{const i=s.clientWidth;n(t,e),i<s.clientWidth&&n()}),window),a=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||r(n,i)}));return a.observe(s),function(t,e){mt.size||window.addEventListener("resize",xt),mt.set(t,e)}(t,r),a}function vt(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){mt.delete(t),mt.size||window.removeEventListener("resize",xt)}(t)}function At(t,e,n){const o=t.canvas,s=i.throttled((e=>{null!==t.ctx&&n(function(t,e){const n=ct[t.type]||t.type,{x:o,y:s}=i.getRelativePosition(t,e);return{type:n,chart:e,native:t,x:void 0!==o?o:null,y:void 0!==s?s:null}}(e,t))}),t);return function(t,e,n){t&&t.addEventListener(e,n,ut)}(o,e,s),s}class _t extends rt{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,o=t.getAttribute("height"),s=t.getAttribute("width");if(t[lt]={initial:{height:o,width:s,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ht(s)){const e=i.readUsedSize(t,"width");void 0!==e&&(t.width=e)}if(ht(o))if(""===t.style.height)t.height=t.width/(e||2);else{const e=i.readUsedSize(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e[lt])return!1;const n=e[lt].initial;["height","width"].forEach((t=>{const o=n[t];i.isNullOrUndef(o)?e.removeAttribute(t):e.setAttribute(t,o)}));const o=n.style||{};return Object.keys(o).forEach((t=>{e.style[t]=o[t]})),e.width=e.width,delete e[lt],!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),o={attach:pt,detach:gt,resize:yt}[e]||At;i[e]=o(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:vt,detach:vt,resize:vt}[e]||dt)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,o){return i.getMaximumSize(t,e,n,o)}isAttached(t){const e=t&&i._getParentNode(t);return!(!e||!e.isConnected)}}function wt(t){return!i._isDomSupported()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?at:_t}class Ct{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return i.isNumber(this.x)&&i.isNumber(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}function kt(t,e,n,o,s){const r=i.valueOrDefault(o,0),a=Math.min(i.valueOrDefault(s,t.length),t.length);let l,c,h,u=0;for(n=Math.ceil(n),s&&(l=s-o,n=l/Math.floor(l/n)),h=r;h<0;)u++,h=Math.round(r+u*n);for(c=Math.max(r,0);c<a;c++)c===h&&(e.push(t[c]),u++,h=Math.round(r+u*n))}const It=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n,Et=(t,e)=>Math.min(e||t,t);function Mt(t,e){const n=[],i=t.length/e,o=t.length;let s=0;for(;s<o;s+=i)n.push(t[Math.floor(s)]);return n}function St(t,e,n){const i=t.ticks.length,o=Math.min(e,i-1),s=t._startPixel,r=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(o);if(!(n&&(l=1===i?Math.max(c-s,r-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(o-1))/2,c+=o<e?l:-l,c<s-a||c>r+a)))return c}function Ot(t){return t.drawTicks?t.tickLength:0}function Pt(t,e){if(!t.display)return 0;const n=i.toFont(t.font,e),o=i.toPadding(t.padding);return(i.isArray(t.text)?t.text.length:1)*n.lineHeight+o.height}function Bt(t,e,n){let o=i._toLeftRightCenter(t);return(n&&"right"!==e||!n&&"right"===e)&&(o=(t=>"left"===t?"right":"right"===t?"left":t)(o)),o}class Dt extends Ct{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:o}=this;return t=i.finiteOrDefault(t,Number.POSITIVE_INFINITY),e=i.finiteOrDefault(e,Number.NEGATIVE_INFINITY),n=i.finiteOrDefault(n,Number.POSITIVE_INFINITY),o=i.finiteOrDefault(o,Number.NEGATIVE_INFINITY),{min:i.finiteOrDefault(t,n),max:i.finiteOrDefault(e,o),minDefined:i.isNumberFinite(t),maxDefined:i.isNumberFinite(e)}}getMinMax(t){let e,{min:n,max:o,minDefined:s,maxDefined:r}=this.getUserBounds();if(s&&r)return{min:n,max:o};const a=this.getMatchingVisibleMetas();for(let i=0,l=a.length;i<l;++i)e=a[i].controller.getMinMax(this,t),s||(n=Math.min(n,e.min)),r||(o=Math.max(o,e.max));return n=r&&n>o?o:n,o=s&&n>o?n:o,{min:i.finiteOrDefault(n,i.finiteOrDefault(o,n)),max:i.finiteOrDefault(o,i.finiteOrDefault(n,o))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){i.callback(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:o,grace:s,ticks:r}=this.options,a=r.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=i._addGrace(this,s,o),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=a<this.ticks.length;this._convertTicksToLabels(l?Mt(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(this.ticks=function(t,e){const n=t.options.ticks,o=function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),o=t._maxLength/n;return Math.floor(Math.min(i,o))}(t),s=Math.min(n.maxTicksLimit||o,o),r=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],a=r.length,l=r[0],c=r[a-1],h=[];if(a>s)return function(t,e,n,i){let o,s=0,r=n[0];for(i=Math.ceil(i),o=0;o<t.length;o++)o===r&&(e.push(t[o]),s++,r=n[s*i])}(e,h,r,a/s),h;const u=function(t,e,n){const o=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),s=e.length/n;if(!o)return Math.max(s,1);const r=i._factorize(o);for(let t=0,e=r.length-1;t<e;t++){const e=r[t];if(e>s)return e}return Math.max(s,1)}(r,e,s);if(a>0){let t,n;const o=a>1?Math.round((c-l)/(a-1)):null;for(kt(e,h,u,i.isNullOrUndef(o)?0:l-o,l),t=0,n=a-1;t<n;t++)kt(e,h,u,r[t],r[t+1]);return kt(e,h,u,c,i.isNullOrUndef(o)?e.length:c+o),h}return kt(e,h,u),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){i.callback(this.options.afterUpdate,[this])}beforeSetDimensions(){i.callback(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){i.callback(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),i.callback(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){i.callback(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,o,s;for(n=0,o=t.length;n<o;n++)s=t[n],s.label=i.callback(e.callback,[s.value,n,t],this)}afterTickToLabelConversion(){i.callback(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){i.callback(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=Et(this.ticks.length,t.ticks.maxTicksLimit),o=e.minRotation||0,s=e.maxRotation;let r,a,l,c=o;if(!this._isVisible()||!e.display||o>=s||n<=1||!this.isHorizontal())return void(this.labelRotation=o);const h=this._getLabelSizes(),u=h.widest.width,d=h.highest.height,f=i._limitValue(this.chart.width-u,0,this.maxWidth);r=t.offset?this.maxWidth/n:f/(n-1),u+6>r&&(r=f/(n-(t.offset?.5:1)),a=this.maxHeight-Ot(t.grid)-e.padding-Pt(t.title,this.chart.options.font),l=Math.sqrt(u*u+d*d),c=i.toDegrees(Math.min(Math.asin(i._limitValue((h.highest.height+6)/r,-1,1)),Math.asin(i._limitValue(a/l,-1,1))-Math.asin(i._limitValue(d/l,-1,1)))),c=Math.max(o,Math.min(s,c))),this.labelRotation=c}afterCalculateLabelRotation(){i.callback(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){i.callback(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:o,grid:s}}=this,r=this._isVisible(),a=this.isHorizontal();if(r){const r=Pt(o,e.options.font);if(a?(t.width=this.maxWidth,t.height=Ot(s)+r):(t.height=this.maxHeight,t.width=Ot(s)+r),n.display&&this.ticks.length){const{first:e,last:o,widest:s,highest:r}=this._getLabelSizes(),l=2*n.padding,c=i.toRadians(this.labelRotation),h=Math.cos(c),u=Math.sin(c);if(a){const e=n.mirror?0:u*s.width+h*r.height;t.height=Math.min(this.maxHeight,t.height+e+l)}else{const e=n.mirror?0:h*s.width+u*r.height;t.width=Math.min(this.maxWidth,t.width+e+l)}this._calculatePadding(e,o,u,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:o,padding:s},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,u=0;a?l?(h=i*t.width,u=n*e.height):(h=n*t.height,u=i*e.width):"start"===o?u=e.width:"end"===o?h=t.width:"inner"!==o&&(h=t.width/2,u=e.width/2),this.paddingLeft=Math.max((h-r+s)*this.width/(this.width-r),0),this.paddingRight=Math.max((u-c+s)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===o?(n=0,i=t.height):"end"===o&&(n=e.height,i=0),this.paddingTop=n+s,this.paddingBottom=i+s}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){i.callback(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)i.isNullOrUndef(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=Mt(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,n){const{ctx:o,_longestTextCache:s}=this,r=[],a=[],l=Math.floor(e/Et(e,n));let c,h,u,d,f,p,g,m,b,x,y,v=0,A=0;for(c=0;c<e;c+=l){if(d=t[c].label,f=this._resolveTickFontOptions(c),o.font=p=f.string,g=s[p]=s[p]||{data:{},gc:[]},m=f.lineHeight,b=x=0,i.isNullOrUndef(d)||i.isArray(d)){if(i.isArray(d))for(h=0,u=d.length;h<u;++h)y=d[h],i.isNullOrUndef(y)||i.isArray(y)||(b=i._measureText(o,g.data,g.gc,b,y),x+=m)}else b=i._measureText(o,g.data,g.gc,b,d),x=m;r.push(b),a.push(x),v=Math.max(b,v),A=Math.max(x,A)}!function(t,e){i.each(t,(t=>{const n=t.gc,i=n.length/2;let o;if(i>e){for(o=0;o<i;++o)delete t.data[n[o]];n.splice(0,i)}}))}(s,e);const _=r.indexOf(v),w=a.indexOf(A),C=t=>({width:r[t]||0,height:a[t]||0});return{first:C(0),last:C(e-1),widest:C(_),highest:C(w),widths:r,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return i._int16Range(this._alignToPixels?i._alignPixel(this.chart,e,0):e)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return i.createContext(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=(n=this.chart.getContext(),i.createContext(n,{scale:this,type:"scale"})));var n}_tickSize(){const t=this.options.ticks,e=i.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),o=Math.abs(Math.sin(e)),s=this._getLabelSizes(),r=t.autoSkipPadding||0,a=s?s.widest.width+r:0,l=s?s.highest.height+r:0;return this.isHorizontal()?l*n>a*o?a/n:l/o:l*o<a*n?l/n:a/o}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,o=this.options,{grid:s,position:r,border:a}=o,l=s.offset,c=this.isHorizontal(),h=this.ticks.length+(l?1:0),u=Ot(s),d=[],f=a.setContext(this.getContext()),p=f.display?f.width:0,g=p/2,m=function(t){return i._alignPixel(n,t,p)};let b,x,y,v,A,_,w,C,k,I,E,M;if("top"===r)b=m(this.bottom),_=this.bottom-u,C=b-g,I=m(t.top)+g,M=t.bottom;else if("bottom"===r)b=m(this.top),I=t.top,M=m(t.bottom)-g,_=b+g,C=this.top+u;else if("left"===r)b=m(this.right),A=this.right-u,w=b-g,k=m(t.left)+g,E=t.right;else if("right"===r)b=m(this.left),k=t.left,E=m(t.right)-g,A=b+g,w=this.left+u;else if("x"===e){if("center"===r)b=m((t.top+t.bottom)/2+.5);else if(i.isObject(r)){const t=Object.keys(r)[0],e=r[t];b=m(this.chart.scales[t].getPixelForValue(e))}I=t.top,M=t.bottom,_=b+g,C=_+u}else if("y"===e){if("center"===r)b=m((t.left+t.right)/2);else if(i.isObject(r)){const t=Object.keys(r)[0],e=r[t];b=m(this.chart.scales[t].getPixelForValue(e))}A=b-g,w=A-u,k=t.left,E=t.right}const S=i.valueOrDefault(o.ticks.maxTicksLimit,h),O=Math.max(1,Math.ceil(h/S));for(x=0;x<h;x+=O){const t=this.getContext(x),e=s.setContext(t),o=a.setContext(t),r=e.lineWidth,h=e.color,u=o.dash||[],f=o.dashOffset,p=e.tickWidth,g=e.tickColor,m=e.tickBorderDash||[],b=e.tickBorderDashOffset;y=St(this,x,l),void 0!==y&&(v=i._alignPixel(n,y,r),c?A=w=k=E=v:_=C=I=M=v,d.push({tx1:A,ty1:_,tx2:w,ty2:C,x1:k,y1:I,x2:E,y2:M,width:r,color:h,borderDash:u,borderDashOffset:f,tickWidth:p,tickColor:g,tickBorderDash:m,tickBorderDashOffset:b}))}return this._ticksLength=h,this._borderValue=b,d}_computeLabelItems(t){const e=this.axis,n=this.options,{position:o,ticks:s}=n,r=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:c,padding:h,mirror:u}=s,d=Ot(n.grid),f=d+h,p=u?-h:f,g=-i.toRadians(this.labelRotation),m=[];let b,x,y,v,A,_,w,C,k,I,E,M,S="middle";if("top"===o)_=this.bottom-p,w=this._getXAxisLabelAlignment();else if("bottom"===o)_=this.top+p,w=this._getXAxisLabelAlignment();else if("left"===o){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,A=t.x}else if("right"===o){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,A=t.x}else if("x"===e){if("center"===o)_=(t.top+t.bottom)/2+f;else if(i.isObject(o)){const t=Object.keys(o)[0],e=o[t];_=this.chart.scales[t].getPixelForValue(e)+f}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===o)A=(t.left+t.right)/2-f;else if(i.isObject(o)){const t=Object.keys(o)[0],e=o[t];A=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===l?S="top":"end"===l&&(S="bottom"));const O=this._getLabelSizes();for(b=0,x=a.length;b<x;++b){y=a[b],v=y.label;const t=s.setContext(this.getContext(b));C=this.getPixelForTick(b)+s.labelOffset,k=this._resolveTickFontOptions(b),I=k.lineHeight,E=i.isArray(v)?v.length:1;const e=E/2,n=t.color,l=t.textStrokeColor,h=t.textStrokeWidth;let d,f=w;if(r?(A=C,"inner"===w&&(f=b===x-1?this.options.reverse?"left":"right":0===b?this.options.reverse?"right":"left":"center"),M="top"===o?"near"===c||0!==g?-E*I+I/2:"center"===c?-O.highest.height/2-e*I+I:-O.highest.height+I/2:"near"===c||0!==g?I/2:"center"===c?O.highest.height/2-e*I:O.highest.height-E*I,u&&(M*=-1),0===g||t.showLabelBackdrop||(A+=I/2*Math.sin(g))):(_=C,M=(1-E)*I/2),t.showLabelBackdrop){const e=i.toPadding(t.backdropPadding),n=O.heights[b],o=O.widths[b];let s=M-e.top,r=0-e.left;switch(S){case"middle":s-=n/2;break;case"bottom":s-=n}switch(w){case"center":r-=o/2;break;case"right":r-=o;break;case"inner":b===x-1?r-=o:b>0&&(r-=o/2)}d={left:r,top:s,width:o+e.width,height:n+e.height,color:t.backdropColor}}m.push({label:v,font:k,textOffset:M,options:{rotation:g,color:n,strokeColor:l,strokeWidth:h,textAlign:f,textBaseline:S,translation:[A,_],backdrop:d}})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-i.toRadians(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align?n="right":"inner"===e.align&&(n="inner"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:o}}=this.options,s=t+o,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?i?(l=this.right+o,"near"===n?a="left":"center"===n?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-s,"near"===n?a="right":"center"===n?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?i?(l=this.left+o,"near"===n?a="right":"center"===n?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+s,"near"===n?a="left":"center"===n?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:o,height:s}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,o,s),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let o,s;const r=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(o=0,s=i.length;o<s;++o){const t=i[o];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:n,grid:o}}=this,s=n.setContext(this.getContext()),r=n.display?s.width:0;if(!r)return;const a=o.setContext(this.getContext(0)).lineWidth,l=this._borderValue;let c,h,u,d;this.isHorizontal()?(c=i._alignPixel(t,this.left,r)-r/2,h=i._alignPixel(t,this.right,a)+a/2,u=d=l):(u=i._alignPixel(t,this.top,r)-r/2,d=i._alignPixel(t,this.bottom,a)+a/2,c=h=l),e.save(),e.lineWidth=s.width,e.strokeStyle=s.color,e.beginPath(),e.moveTo(c,u),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&i.clipArea(e,n);const o=this.getLabelItems(t);for(const t of o){const n=t.options,o=t.font,s=t.label,r=t.textOffset;i.renderText(e,s,0,r,o,n)}n&&i.unclipArea(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:o}}=this;if(!n.display)return;const s=i.toFont(n.font),r=i.toPadding(n.padding),a=n.align;let l=s.lineHeight/2;"bottom"===e||"center"===e||i.isObject(e)?(l+=r.bottom,i.isArray(n.text)&&(l+=s.lineHeight*(n.text.length-1))):l+=r.top;const{titleX:c,titleY:h,maxWidth:u,rotation:d}=function(t,e,n,o){const{top:s,left:r,bottom:a,right:l,chart:c}=t,{chartArea:h,scales:u}=c;let d,f,p,g=0;const m=a-s,b=l-r;if(t.isHorizontal()){if(f=i._alignStartEnd(o,r,l),i.isObject(n)){const t=Object.keys(n)[0],i=n[t];p=u[t].getPixelForValue(i)+m-e}else p="center"===n?(h.bottom+h.top)/2+m-e:It(t,n,e);d=l-r}else{if(i.isObject(n)){const t=Object.keys(n)[0],i=n[t];f=u[t].getPixelForValue(i)-b+e}else f="center"===n?(h.left+h.right)/2-b+e:It(t,n,e);p=i._alignStartEnd(o,a,s),g="left"===n?-i.HALF_PI:i.HALF_PI}return{titleX:f,titleY:p,maxWidth:d,rotation:g}}(this,l,e,a);i.renderText(t,n.text,0,0,s,{color:n.color,maxWidth:u,rotation:d,textAlign:Bt(a,e,o),textBaseline:"middle",translation:[c,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=i.valueOrDefault(t.grid&&t.grid.z,-1),o=i.valueOrDefault(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Dt.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:o,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let o,s;for(o=0,s=e.length;o<s;++o){const s=e[o];s[n]!==this.id||t&&s.type!==t||i.push(s)}return i}_resolveTickFontOptions(t){const e=this.options.ticks.setContext(this.getContext(t));return i.toFont(e.font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Tt{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const o=this.items,s=t.id,r=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in o||(o[s]=t,function(t,e,n){const o=i.merge(Object.create(null),[n?i.defaults.get(n):{},i.defaults.get(e),t.defaults]);i.defaults.set(e,o),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const o=n.split("."),s=o.pop(),r=[t].concat(o).join("."),a=e[n].split("."),l=a.pop(),c=a.join(".");i.defaults.route(r,s,c,l)}))}(e,t.defaultRoutes),t.descriptors&&i.defaults.describe(e,t.descriptors)}(t,r,n),this.override&&i.defaults.override(t.id,t.overrides)),r}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,o=this.scope;n in e&&delete e[n],o&&n in i.defaults[o]&&(delete i.defaults[o][n],this.override&&delete i.overrides[n])}}class Lt{constructor(){this.controllers=new Tt(A,"datasets",!0),this.elements=new Tt(Ct,"elements"),this.plugins=new Tt(Object,"plugins"),this.scales=new Tt(Dt,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const o=n||this._getRegistryForType(e);n||o.isForType(e)||o===this.plugins&&e.id?this._exec(t,o,e):i.each(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const o=i._capitalize(t);i.callback(n["before"+o],[],n),e[t](n),i.callback(n["after"+o],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}}var Rt=new Lt;class Ft{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const o=i?this._descriptors(t).filter(i):this._descriptors(t),s=this._notify(o,t,e,n);return"afterDestroy"===e&&(this._notify(o,t,"stop"),this._notify(this._init,t,"uninstall")),s}_notify(t,e,n,o){o=o||{};for(const s of t){const t=s.plugin,r=t[n],a=[e,o,s.options];if(!1===i.callback(r,a,t)&&o.cancelable)return!1}return!0}invalidate(){i.isNullOrUndef(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,o=i.valueOrDefault(n.options&&n.options.plugins,{}),s=function(t){const e={},n=[],i=Object.keys(Rt.plugins.items);for(let t=0;t<i.length;t++)n.push(Rt.getPlugin(i[t]));const o=t.plugins||[];for(let t=0;t<o.length;t++){const i=o[t];-1===n.indexOf(i)&&(n.push(i),e[i.id]=!0)}return{plugins:n,localIds:e}}(n);return!1!==o||e?function(t,{plugins:e,localIds:n},i,o){const s=[],r=t.getContext();for(const a of e){const e=a.id,l=Nt(i[e],o);null!==l&&s.push({plugin:a,options:zt(t.config,{plugin:a,local:n[e]},l,r)})}return s}(t,s,o,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function Nt(t,e){return e||!1!==t?!0===t?{}:t:null}function zt(t,{plugin:e,local:n},i,o){const s=t.pluginScopeKeys(e),r=t.getOptionScopes(i,s);return n&&e.defaults&&r.push(e.defaults),t.createResolver(r,o,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function jt(t,e){const n=i.defaults.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function Vt(t){if("x"===t||"y"===t||"r"===t)return t}function Ht(t,...e){if(Vt(t))return t;for(const i of e){const e=i.axis||("top"===(n=i.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.length>1&&Vt(t[0].toLowerCase());if(e)return e}var n;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Wt(t,e,n){if(n[e+"AxisID"]===t)return{axis:e}}function Ut(t){const e=t.options||(t.options={});e.plugins=i.valueOrDefault(e.plugins,{}),e.scales=function(t,e){const n=i.overrides[t.type]||{scales:{}},o=e.scales||{},s=jt(t.type,e),r=Object.create(null);return Object.keys(o).forEach((e=>{const a=o[e];if(!i.isObject(a))return console.error(`Invalid scale configuration for scale: ${e}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=Ht(e,a,function(t,e){if(e.data&&e.data.datasets){const n=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(n.length)return Wt(t,"x",n[0])||Wt(t,"y",n[0])}return{}}(e,t),i.defaults.scales[a.type]),c=function(t,e){return t===e?"_index_":"_value_"}(l,s),h=n.scales||{};r[e]=i.mergeIf(Object.create(null),[{axis:l},a,h[l],h[c]])})),t.data.datasets.forEach((n=>{const s=n.type||t.type,a=n.indexAxis||jt(s,e),l=(i.overrides[s]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,a),s=n[e+"AxisID"]||e;r[s]=r[s]||Object.create(null),i.mergeIf(r[s],[{axis:e},o[s],l[t]])}))})),Object.keys(r).forEach((t=>{const e=r[t];i.mergeIf(e,[i.defaults.scales[e.type],i.defaults.scale])})),r}(t,e)}function Yt(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const $t=new Map,Qt=new Set;function qt(t,e){let n=$t.get(t);return n||(n=e(),$t.set(t,n),Qt.add(n)),n}const Kt=(t,e,n)=>{const o=i.resolveObjectKey(e,n);void 0!==o&&t.add(o)};class Xt{constructor(t){this._config=function(t){return(t=t||{}).data=Yt(t.data),Ut(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Yt(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Ut(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return qt(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return qt(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return qt(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return qt(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:o,type:s}=this,r=this._cachedScopes(t,n),a=r.get(e);if(a)return a;const l=new Set;e.forEach((e=>{t&&(l.add(t),e.forEach((e=>Kt(l,t,e)))),e.forEach((t=>Kt(l,o,t))),e.forEach((t=>Kt(l,i.overrides[s]||{},t))),e.forEach((t=>Kt(l,i.defaults,t))),e.forEach((t=>Kt(l,i.descriptors,t)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),Qt.has(e)&&r.set(e,c),c}chartOptionScopes(){const{options:t,type:e}=this;return[t,i.overrides[e]||{},i.defaults.datasets[e]||{},{type:e},i.defaults,i.descriptors]}resolveNamedOptions(t,e,n,o=[""]){const s={$shared:!0},{resolver:r,subPrefixes:a}=Gt(this._resolverCache,t,o);let l=r;if(function(t,e){const{isScriptable:n,isIndexable:o}=i._descriptors(t);for(const s of e){const e=n(s),r=o(s),a=(r||e)&&t[s];if(e&&(i.isFunction(a)||Zt(a))||r&&i.isArray(a))return!0}return!1}(r,e)){s.$shared=!1,n=i.isFunction(n)?n():n;const e=this.createResolver(t,n,a);l=i._attachContext(r,n,e)}for(const t of e)s[t]=l[t];return s}createResolver(t,e,n=[""],o){const{resolver:s}=Gt(this._resolverCache,t,n);return i.isObject(e)?i._attachContext(s,e,void 0,o):s}}function Gt(t,e,n){let o=t.get(e);o||(o=new Map,t.set(e,o));const s=n.join();let r=o.get(s);return r||(r={resolver:i._createResolver(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},o.set(s,r)),r}const Zt=t=>i.isObject(t)&&Object.getOwnPropertyNames(t).some((e=>i.isFunction(t[e]))),Jt=["top","bottom","left","right","chartArea"];function te(t,e){return"top"===t||"bottom"===t||-1===Jt.indexOf(t)&&"x"===e}function ee(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function ne(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),i.callback(n&&n.onComplete,[t],e)}function ie(t){const e=t.chart,n=e.options.animation;i.callback(n&&n.onProgress,[t],e)}function oe(t){return i._isDomSupported()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const se={},re=t=>{const e=oe(t);return Object.values(se).filter((t=>t.canvas===e)).pop()};function ae(t,e,n){const i=Object.keys(t);for(const o of i){const i=+o;if(i>=e){const s=t[o];delete t[o],(n>0||i>e)&&(t[i+n]=s)}}}function le(t,e,n){return t.options.clip?t[n]:e[n]}class ce{static defaults=i.defaults;static instances=se;static overrides=i.overrides;static registry=Rt;static version="4.4.7";static getChart=re;static register(...t){Rt.add(...t),he()}static unregister(...t){Rt.remove(...t),he()}constructor(t,e){const n=this.config=new Xt(e),o=oe(t),r=re(o);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const a=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||wt(o)),this.platform.updateConfig(n);const l=this.platform.acquireContext(o,a.aspectRatio),c=l&&l.canvas,h=c&&c.height,u=c&&c.width;this.id=i.uid(),this.ctx=l,this.canvas=c,this.width=u,this.height=h,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ft,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=i.debounce((t=>this.update(t)),a.resizeDelay||0),this._dataChanges=[],se[this.id]=this,l&&c?(s.listen(this,"complete",ne),s.listen(this,"progress",ie),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:o,_aspectRatio:s}=this;return i.isNullOrUndef(t)?e&&s?s:o?n/o:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Rt}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():i.retinaScale(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return i.clearCanvas(this.canvas,this.ctx),this}stop(){return s.stop(this),this}resize(t,e){s.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,o=this.canvas,s=n.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(o,t,e,s),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,i.retinaScale(this,a,!0)&&(this.notifyPlugins("resize",{size:r}),i.callback(n.onResize,[this,r],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const t=this.options.scales||{};i.each(t,((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,o=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const n=e[t],i=Ht(t,n),o="r"===i,s="x"===i;return{options:n,dposition:o?"chartArea":s?"bottom":"left",dtype:o?"radialLinear":s?"category":"linear"}})))),i.each(s,(e=>{const s=e.options,r=s.id,a=Ht(r,s),l=i.valueOrDefault(s.type,e.dtype);void 0!==s.position&&te(s.position,a)===te(e.dposition)||(s.position=e.dposition),o[r]=!0;let c=null;r in n&&n[r].type===l?c=n[r]:(c=new(Rt.getScale(l))({id:r,type:l,ctx:this.ctx,chart:this}),n[c.id]=c),c.init(s,t)})),i.each(o,((t,e)=>{t||delete n[e]})),i.each(n,(t=>{st.configure(this,t,t.options),st.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(ee("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,o;for(this._removeUnreferencedMetasets(),n=0,o=e.length;n<o;n++){const o=e[n];let s=this.getDatasetMeta(n);const r=o.type||this.config.type;if(s.type&&s.type!==r&&(this._destroyDatasetMeta(n),s=this.getDatasetMeta(n)),s.type=r,s.indexAxis=o.indexAxis||jt(r,this.options),s.order=o.order||0,s.index=n,s.label=""+o.label,s.visible=this.isDatasetVisible(n),s.controller)s.controller.updateIndex(n),s.controller.linkScales();else{const e=Rt.getController(r),{datasetElementType:o,dataElementType:a}=i.defaults.datasets[r];Object.assign(e,{dataElementType:Rt.getElement(a),datasetElementType:o&&Rt.getElement(o)}),s.controller=new e(this,n),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){i.each(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),o=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!o&&-1===s.indexOf(e);e.buildOrUpdateElements(n),r=Math.max(+e.getMaxOverflow(),r)}r=this._minPadding=n.layout.autoPadding?r:0,this._updateLayout(r),o||i.each(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ee("z","_idx"));const{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){i.each(this.scales,(t=>{st.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);i.setsEqual(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:o}of e)ae(t,i,"_removeElements"===n?-o:o)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),o=n(0);for(let t=1;t<e;t++)if(!i.setsEqual(o,n(t)))return;return Array.from(o).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;st.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],i.each(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,i.isFunction(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(s.has(this)?this.attached&&!s.running(this)&&s.start(this):(this.draw(),ne({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resizeBeforeDraw=null,this._resize(t,e)}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,o;for(i=0,o=e.length;i<o;++i){const o=e[i];t&&!o.visible||n.push(o)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,o=!n.disabled,s=function(t,e){const{xScale:n,yScale:i}=t;return n&&i?{left:le(n,e,"left"),right:le(n,e,"right"),top:le(i,e,"top"),bottom:le(i,e,"bottom")}:e}(t,this.chartArea),r={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",r)&&(o&&i.clipArea(e,{left:!1===n.left?0:s.left-n.left,right:!1===n.right?this.width:s.right+n.right,top:!1===n.top?0:s.top-n.top,bottom:!1===n.bottom?this.height:s.bottom+n.bottom}),t.controller.draw(),o&&i.unclipArea(e),r.cancelable=!1,this.notifyPlugins("afterDatasetDraw",r))}isPointInArea(t){return i._isPointInArea(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,n,i){const o=Q.modes[e];return"function"==typeof o?o(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=i.createContext(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const o=n?"show":"hide",s=this.getDatasetMeta(t),r=s.controller._resolveAnimations(void 0,o);i.defined(e)?(s.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),r.update(s,{visible:n}),this.update((e=>e.datasetIndex===t?o:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),s.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),i.clearCanvas(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete se[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},o=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};i.each(this.options.events,(t=>n(t,o)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},o=(t,e)=>{this.canvas&&this.resize(t,e)};let s;const r=()=>{i("attach",r),this.attached=!0,this.resize(),n("resize",o),n("detach",s)};s=()=>{this.attached=!1,i("resize",o),this._stop(),this._resize(0,0),n("attach",r)},e.isAttached(this.canvas)?r():s()}unbindEvents(){i.each(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},i.each(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let o,s,r,a;for("dataset"===e&&(o=this.getDatasetMeta(t[0].datasetIndex),o.controller["_"+i+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){s=t[r];const e=s&&this.getDatasetMeta(s.datasetIndex).controller;e&&e[i+"HoverStyle"](s.element,s.datasetIndex,s.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!i._elementsEqual(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,n){const i=this.options.hover,o=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),s=o(e,t),r=n?t:o(t,e);s.length&&this.updateHoverStyle(s,i.mode,!1),r.length&&i.mode&&this.updateHoverStyle(r,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const o=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(o||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:o=[],options:s}=this,r=e,a=this._getActiveElements(t,o,n,r),l=i._isClickEvent(t),c=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,l);n&&(this._lastEvent=null,i.callback(s.onHover,[t,a,this],this),l&&i.callback(s.onClick,[t,a,this],this));const h=!i._elementsEqual(a,o);return(h||e)&&(this._active=a,this._updateHoverStyles(a,o,e)),this._lastEvent=c,h}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const o=this.options.hover;return this.getElementsAtEventForMode(t,o.mode,o,i)}}function he(){return i.each(ce.instances,(t=>t._plugins.invalidate()))}function ue(t,e,n,i){return{x:n+t*Math.cos(e),y:i+t*Math.sin(e)}}function de(t,e,n,o,s,r){const{x:a,y:l,startAngle:c,pixelMargin:h,innerRadius:u}=e,d=Math.max(e.outerRadius+o+n-h,0),f=u>0?u+o+n+h:0;let p=0;const g=s-c;if(o){const t=((u>0?u-o:0)+(d>0?d-o:0))/2;p=(g-(0!==t?g*t/(t+o):g))/2}const m=(g-Math.max(.001,g*d-n/i.PI)/d)/2,b=c+m+p,x=s-m-p,{outerStart:y,outerEnd:v,innerStart:A,innerEnd:_}=function(t,e,n,o){const s=(r=t.options.borderRadius,i._readValueToProps(r,["outerStart","outerEnd","innerStart","innerEnd"]));var r;const a=(n-e)/2,l=Math.min(a,o*e/2),c=t=>{const e=(n-Math.min(a,t))*o/2;return i._limitValue(t,0,Math.min(a,e))};return{outerStart:c(s.outerStart),outerEnd:c(s.outerEnd),innerStart:i._limitValue(s.innerStart,0,l),innerEnd:i._limitValue(s.innerEnd,0,l)}}(e,f,d,x-b),w=d-y,C=d-v,k=b+y/w,I=x-v/C,E=f+A,M=f+_,S=b+A/E,O=x-_/M;if(t.beginPath(),r){const e=(k+I)/2;if(t.arc(a,l,d,k,e),t.arc(a,l,d,e,I),v>0){const e=ue(C,I,a,l);t.arc(e.x,e.y,v,I,x+i.HALF_PI)}const n=ue(M,x,a,l);if(t.lineTo(n.x,n.y),_>0){const e=ue(M,O,a,l);t.arc(e.x,e.y,_,x+i.HALF_PI,O+Math.PI)}const o=(x-_/f+(b+A/f))/2;if(t.arc(a,l,f,x-_/f,o,!0),t.arc(a,l,f,o,b+A/f,!0),A>0){const e=ue(E,S,a,l);t.arc(e.x,e.y,A,S+Math.PI,b-i.HALF_PI)}const s=ue(w,b,a,l);if(t.lineTo(s.x,s.y),y>0){const e=ue(w,k,a,l);t.arc(e.x,e.y,y,b-i.HALF_PI,k)}}else{t.moveTo(a,l);const e=Math.cos(k)*d+a,n=Math.sin(k)*d+l;t.lineTo(e,n);const i=Math.cos(I)*d+a,o=Math.sin(I)*d+l;t.lineTo(i,o)}t.closePath()}class fe extends Ct{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const o=this.getProps(["x","y"],n),{angle:s,distance:r}=i.getAngleFromPoint(o,{x:t,y:e}),{startAngle:a,endAngle:l,innerRadius:c,outerRadius:h,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),d=(this.options.spacing+this.options.borderWidth)/2,f=i.valueOrDefault(u,l-a),p=i._angleBetween(s,a,l)&&a!==l,g=f>=i.TAU||p,m=i._isBetween(r,c+d,h+d);return g&&m}getCenterPoint(t){const{x:e,y:n,startAngle:i,endAngle:o,innerRadius:s,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,c=(i+o)/2,h=(s+r+l+a)/2;return{x:e+Math.cos(c)*h,y:n+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,o=(e.offset||0)/4,s=(e.spacing||0)/2,r=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>i.TAU?Math.floor(n/i.TAU):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*o,Math.sin(a)*o);const l=o*(1-Math.sin(Math.min(i.PI,n||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,n,o,s){const{fullCircles:r,startAngle:a,circumference:l}=e;let c=e.endAngle;if(r){de(t,e,n,o,c,s);for(let e=0;e<r;++e)t.fill();isNaN(l)||(c=a+(l%i.TAU||i.TAU))}de(t,e,n,o,c,s),t.fill()}(t,this,l,s,r),function(t,e,n,o,s){const{fullCircles:r,startAngle:a,circumference:l,options:c}=e,{borderWidth:h,borderJoinStyle:u,borderDash:d,borderDashOffset:f}=c,p="inner"===c.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=f,p?(t.lineWidth=2*h,t.lineJoin=u||"round"):(t.lineWidth=h,t.lineJoin=u||"bevel");let g=e.endAngle;if(r){de(t,e,n,o,g,s);for(let e=0;e<r;++e)t.stroke();isNaN(l)||(g=a+(l%i.TAU||i.TAU))}p&&function(t,e,n){const{startAngle:o,pixelMargin:s,x:r,y:a,outerRadius:l,innerRadius:c}=e;let h=s/l;t.beginPath(),t.arc(r,a,l,o-h,n+h),c>s?(h=s/c,t.arc(r,a,c,n+h,o-h,!0)):t.arc(r,a,s,n+i.HALF_PI,o-i.HALF_PI),t.closePath(),t.clip()}(t,e,g),r||(de(t,e,n,o,g,s),t.stroke())}(t,this,l,s,r),t.restore()}}function pe(t,e,n=e){t.lineCap=i.valueOrDefault(n.borderCapStyle,e.borderCapStyle),t.setLineDash(i.valueOrDefault(n.borderDash,e.borderDash)),t.lineDashOffset=i.valueOrDefault(n.borderDashOffset,e.borderDashOffset),t.lineJoin=i.valueOrDefault(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=i.valueOrDefault(n.borderWidth,e.borderWidth),t.strokeStyle=i.valueOrDefault(n.borderColor,e.borderColor)}function ge(t,e,n){t.lineTo(n.x,n.y)}function me(t,e,n={}){const i=t.length,{start:o=0,end:s=i-1}=n,{start:r,end:a}=e,l=Math.max(o,r),c=Math.min(s,a),h=o<r&&s<r||o>a&&s>a;return{count:i,start:l,loop:e.loop,ilen:c<l&&!h?i+c-l:c-l}}function be(t,e,n,o){const{points:s,options:r}=e,{count:a,start:l,loop:c,ilen:h}=me(s,n,o),u=function(t){return t.stepped?i._steppedLineTo:t.tension||"monotone"===t.cubicInterpolationMode?i._bezierCurveTo:ge}(r);let d,f,p,{move:g=!0,reverse:m}=o||{};for(d=0;d<=h;++d)f=s[(l+(m?h-d:d))%a],f.skip||(g?(t.moveTo(f.x,f.y),g=!1):u(t,p,f,m,r.stepped),p=f);return c&&(f=s[(l+(m?h:0))%a],u(t,p,f,m,r.stepped)),!!c}function xe(t,e,n,i){const o=e.points,{count:s,start:r,ilen:a}=me(o,n,i),{move:l=!0,reverse:c}=i||{};let h,u,d,f,p,g,m=0,b=0;const x=t=>(r+(c?a-t:t))%s,y=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(u=o[x(0)],t.moveTo(u.x,u.y)),h=0;h<=a;++h){if(u=o[x(h)],u.skip)continue;const e=u.x,n=u.y,i=0|e;i===d?(n<f?f=n:n>p&&(p=n),m=(b*m+e)/++b):(y(),t.lineTo(e,n),d=i,b=0,f=p=n),g=n}y()}function ye(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?be:xe}const ve="function"==typeof Path2D;class Ae extends Ct{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const o=n.spanGaps?this._loop:this._fullLoop;i._updateBezierControlPoints(this._points,n,t,o,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=i._computeSegments(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,o=t[e],s=this.points,r=i._boundSegments(this,{property:e,start:o,end:o});if(!r.length)return;const a=[],l=function(t){return t.stepped?i._steppedInterpolation:t.tension||"monotone"===t.cubicInterpolationMode?i._bezierInterpolation:i._pointInLine}(n);let c,h;for(c=0,h=r.length;c<h;++c){const{start:i,end:h}=r[c],u=s[i],d=s[h];if(u===d){a.push(u);continue}const f=l(u,d,Math.abs((o-u[e])/(d[e]-u[e])),n.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,n){return ye(this)(t,this,e,n)}path(t,e,n){const i=this.segments,o=ye(this);let s=this._loop;e=e||0,n=n||this.points.length-e;for(const r of i)s&=o(t,this,r,{start:e,end:e+n-1});return!!s}draw(t,e,n,i){const o=this.options||{};(this.points||[]).length&&o.borderWidth&&(t.save(),function(t,e,n,i){ve&&!e.options.segment?function(t,e,n,i){let o=e._path;o||(o=e._path=new Path2D,e.path(o,n,i)&&o.closePath()),pe(t,e.options),t.stroke(o)}(t,e,n,i):function(t,e,n,i){const{segments:o,options:s}=e,r=ye(e);for(const a of o)pe(t,s,a.style),t.beginPath(),r(t,e,a,{start:n,end:n+i-1})&&t.closePath(),t.stroke()}(t,e,n,i)}(t,this,n,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function _e(t,e,n,i){const o=t.options,{[n]:s}=t.getProps([n],i);return Math.abs(e-s)<o.radius+o.hitRadius}class we extends Ct{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.options,{x:o,y:s}=this.getProps(["x","y"],n);return Math.pow(t-o,2)+Math.pow(e-s,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return _e(this,t,"x",e)}inYRange(t,e){return _e(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!i._isPointInArea(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,i.drawPoint(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ce(t,e){const{x:n,y:i,base:o,width:s,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,u;return t.horizontal?(u=r/2,a=Math.min(n,o),l=Math.max(n,o),c=i-u,h=i+u):(u=s/2,a=n-u,l=n+u,c=Math.min(i,o),h=Math.max(i,o)),{left:a,top:c,right:l,bottom:h}}function ke(t,e,n,o){return t?0:i._limitValue(e,n,o)}function Ie(t,e,n,o){const s=null===e,r=null===n,a=t&&!(s&&r)&&Ce(t,o);return a&&(s||i._isBetween(e,a.left,a.right))&&(r||i._isBetween(n,a.top,a.bottom))}function Ee(t,e){t.rect(e.x,e.y,e.w,e.h)}function Me(t,e,n={}){const i=t.x!==n.x?-e:0,o=t.y!==n.y?-e:0,s=(t.x+t.w!==n.x+n.w?e:0)-i,r=(t.y+t.h!==n.y+n.h?e:0)-o;return{x:t.x+i,y:t.y+o,w:t.w+s,h:t.h+r,radius:t.radius}}class Se extends Ct{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:o}}=this,{inner:s,outer:r}=function(t){const e=Ce(t),n=e.right-e.left,o=e.bottom-e.top,s=function(t,e,n){const o=t.options.borderWidth,s=t.borderSkipped,r=i.toTRBL(o);return{t:ke(s.top,r.top,0,n),r:ke(s.right,r.right,0,e),b:ke(s.bottom,r.bottom,0,n),l:ke(s.left,r.left,0,e)}}(t,n/2,o/2),r=function(t,e,n){const{enableBorderRadius:o}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,r=i.toTRBLCorners(s),a=Math.min(e,n),l=t.borderSkipped,c=o||i.isObject(s);return{topLeft:ke(!c||l.top||l.left,r.topLeft,0,a),topRight:ke(!c||l.top||l.right,r.topRight,0,a),bottomLeft:ke(!c||l.bottom||l.left,r.bottomLeft,0,a),bottomRight:ke(!c||l.bottom||l.right,r.bottomRight,0,a)}}(t,n/2,o/2);return{outer:{x:e.left,y:e.top,w:n,h:o,radius:r},inner:{x:e.left+s.l,y:e.top+s.t,w:n-s.l-s.r,h:o-s.t-s.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,r.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(s.b,s.r))}}}}(this),a=(l=r.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?i.addRoundedRectPath:Ee;var l;t.save(),r.w===s.w&&r.h===s.h||(t.beginPath(),a(t,Me(r,e,s)),t.clip(),a(t,Me(s,-e,r)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),a(t,Me(s,e)),t.fillStyle=o,t.fill(),t.restore()}inRange(t,e,n){return Ie(this,t,e,n)}inXRange(t,e){return Ie(this,t,null,e)}inYRange(t,e){return Ie(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:o}=this.getProps(["x","y","base","horizontal"],t);return{x:o?(e+i)/2:e,y:o?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var Oe=Object.freeze({__proto__:null,ArcElement:fe,BarElement:Se,LineElement:Ae,PointElement:we});const Pe=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Be=Pe.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function De(t){return Pe[t%Pe.length]}function Te(t){return Be[t%Be.length]}function Le(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Re={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,n){if(!n.enabled)return;const{data:{datasets:o},options:s}=t.config,{elements:r}=s,a=Le(o)||(l=s)&&(l.borderColor||l.backgroundColor)||r&&Le(r)||"rgba(0,0,0,0.1)"!==i.defaults.borderColor||"rgba(0,0,0,0.1)"!==i.defaults.backgroundColor;var l;if(!n.forceOverride&&a)return;const c=function(t){let e=0;return(n,i)=>{const o=t.getDatasetMeta(i).controller;o instanceof B?e=function(t,e){return t.backgroundColor=t.data.map((()=>De(e++))),e}(n,e):o instanceof T?e=function(t,e){return t.backgroundColor=t.data.map((()=>Te(e++))),e}(n,e):o&&(e=function(t,e){return t.borderColor=De(e),t.backgroundColor=Te(e),++e}(n,e))}}(t);o.forEach(c)}};function Fe(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function Ne(t){t.data.datasets.forEach((t=>{Fe(t)}))}var ze={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void Ne(t);const o=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:r,indexAxis:a}=e,l=t.getDatasetMeta(s),c=r||e.data;if("y"===i.resolve([a,t.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const h=t.scales[l.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let u,{start:d,count:f}=function(t,e){const n=e.length;let o,s=0;const{iScale:r}=t,{min:a,max:l,minDefined:c,maxDefined:h}=r.getUserBounds();return c&&(s=i._limitValue(i._lookupByKey(e,r.axis,a).lo,0,n-1)),o=h?i._limitValue(i._lookupByKey(e,r.axis,l).hi+1,s,n)-s:n-s,{start:s,count:o}}(l,c);if(f<=(n.threshold||4*o))Fe(e);else{switch(i.isNullOrUndef(r)&&(e._data=c,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":u=function(t,e,n,i,o){const s=o.samples||i;if(s>=n)return t.slice(e,e+n);const r=[],a=(n-2)/(s-2);let l=0;const c=e+n-1;let h,u,d,f,p,g=e;for(r[l++]=t[g],h=0;h<s-2;h++){let i,o=0,s=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,n)+e,b=m-c;for(i=c;i<m;i++)o+=t[i].x,s+=t[i].y;o/=b,s/=b;const x=Math.floor(h*a)+1+e,y=Math.min(Math.floor((h+1)*a)+1,n)+e,{x:v,y:A}=t[g];for(d=f=-1,i=x;i<y;i++)f=.5*Math.abs((v-o)*(t[i].y-A)-(v-t[i].x)*(s-A)),f>d&&(d=f,u=t[i],p=i);r[l++]=u,g=p}return r[l++]=t[c],r}(c,d,f,o,n);break;case"min-max":u=function(t,e,n,o){let s,r,a,l,c,h,u,d,f,p,g=0,m=0;const b=[],x=e+n-1,y=t[e].x,v=t[x].x-y;for(s=e;s<e+n;++s){r=t[s],a=(r.x-y)/v*o,l=r.y;const e=0|a;if(e===c)l<f?(f=l,h=s):l>p&&(p=l,u=s),g=(m*g+r.x)/++m;else{const n=s-1;if(!i.isNullOrUndef(h)&&!i.isNullOrUndef(u)){const e=Math.min(h,u),i=Math.max(h,u);e!==d&&e!==n&&b.push({...t[e],x:g}),i!==d&&i!==n&&b.push({...t[i],x:g})}s>0&&n!==d&&b.push(t[n]),b.push(r),c=e,m=0,f=p=l,h=u=d=s}}return b}(c,d,f,o);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=u}}))},destroy(t){Ne(t)}};function je(t,e,n,o){if(o)return;let s=e[t],r=n[t];return"angle"===t&&(s=i._normalizeAngle(s),r=i._normalizeAngle(r)),{property:t,start:s,end:r}}function Ve(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function He(t,e,n,i){return t&&e?i(t[n],e[n]):t?t[n]:e?e[n]:0}function We(t,e){let n=[],o=!1;return i.isArray(t)?(o=!0,n=t):n=function(t,e){const{x:n=null,y:i=null}=t||{},o=e.points,s=[];return e.segments.forEach((({start:t,end:e})=>{e=Ve(t,e,o);const r=o[t],a=o[e];null!==i?(s.push({x:r.x,y:i}),s.push({x:a.x,y:i})):null!==n&&(s.push({x:n,y:r.y}),s.push({x:n,y:a.y}))})),s}(t,e),n.length?new Ae({points:n,options:{tension:0},_loop:o,_fullLoop:o}):null}function Ue(t){return t&&!1!==t.fill}function Ye(t,e,n){let o=t[e].fill;const s=[e];let r;if(!n)return o;for(;!1!==o&&-1===s.indexOf(o);){if(!i.isNumberFinite(o))return o;if(r=t[o],!r)return!1;if(r.visible)return o;s.push(o),o=r.fill}return!1}function $e(t,e,n){const o=function(t){const e=t.options,n=e.fill;let o=i.valueOrDefault(n&&n.target,n);return void 0===o&&(o=!!e.backgroundColor),!1!==o&&null!==o&&(!0===o?"origin":o)}(t);if(i.isObject(o))return!isNaN(o.value)&&o;let s=parseFloat(o);return i.isNumberFinite(s)&&Math.floor(s)===s?function(t,e,n,i){return"-"!==t&&"+"!==t||(n=e+n),!(n===e||n<0||n>=i)&&n}(o[0],e,s,n):["origin","start","end","stack","shape"].indexOf(o)>=0&&o}function Qe(t,e,n){const i=[];for(let o=0;o<n.length;o++){const s=n[o],{first:r,last:a,point:l}=qe(s,e,"x");if(!(!l||r&&a))if(r)i.unshift(l);else if(t.push(l),!a)break}t.push(...i)}function qe(t,e,n){const o=t.interpolate(e,n);if(!o)return{};const s=o[n],r=t.segments,a=t.points;let l=!1,c=!1;for(let t=0;t<r.length;t++){const e=r[t],o=a[e.start][n],h=a[e.end][n];if(i._isBetween(s,o,h)){l=s===o,c=s===h;break}}return{first:l,last:c,point:o}}class Ke{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:o,y:s,radius:r}=this;return e=e||{start:0,end:i.TAU},t.arc(o,s,r,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:i}=this,o=t.angle;return{x:e+Math.cos(o)*i,y:n+Math.sin(o)*i,angle:o}}}function Xe(t,e,n){const o=function(t){const{chart:e,fill:n,line:o}=t;if(i.isNumberFinite(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{scale:e,index:n,line:i}=t,o=[],s=i.segments,r=i.points,a=function(t,e){const n=[],i=t.getMatchingVisibleMetas("line");for(let t=0;t<i.length;t++){const o=i[t];if(o.index===e)break;o.hidden||n.unshift(o.dataset)}return n}(e,n);a.push(We({x:null,y:e.bottom},i));for(let t=0;t<s.length;t++){const e=s[t];for(let t=e.start;t<=e.end;t++)Qe(o,r[t],a)}return new Ae({points:o,options:{}})}(t);if("shape"===n)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,o=e.options,s=e.getLabels().length,r=o.reverse?e.max:e.min,a=function(t,e,n){let o;return o="start"===t?n:"end"===t?e.options.reverse?e.min:e.max:i.isObject(t)?t.value:e.getBaseValue(),o}(n,e,r),l=[];if(o.grid.circular){const t=e.getPointPositionForValue(0,r);return new Ke({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<s;++t)l.push(e.getPointPositionForValue(t,a));return l}(t):function(t){const{scale:e={},fill:n}=t,o=function(t,e){let n=null;return"start"===t?n=e.bottom:"end"===t?n=e.top:i.isObject(t)?n=e.getPixelForValue(t.value):e.getBasePixel&&(n=e.getBasePixel()),n}(n,e);if(i.isNumberFinite(o)){const t=e.isHorizontal();return{x:t?o:null,y:t?null:o}}return null}(t)}(t);return s instanceof Ke?s:We(s,o)}(e),{line:s,scale:r,axis:a}=e,l=s.options,c=l.fill,h=l.backgroundColor,{above:u=h,below:d=h}=c||{};o&&s.points.length&&(i.clipArea(t,n),function(t,e){const{line:n,target:i,above:o,below:s,area:r,scale:a}=e,l=n._loop?"angle":e.axis;t.save(),"x"===l&&s!==o&&(Ge(t,i,r.top),Ze(t,{line:n,target:i,color:o,scale:a,property:l}),t.restore(),t.save(),Ge(t,i,r.bottom)),Ze(t,{line:n,target:i,color:s,scale:a,property:l}),t.restore()}(t,{line:s,target:o,above:u,below:d,area:n,scale:r,axis:a}),i.unclipArea(t))}function Ge(t,e,n){const{segments:i,points:o}=e;let s=!0,r=!1;t.beginPath();for(const a of i){const{start:i,end:l}=a,c=o[i],h=o[Ve(i,l,o)];s?(t.moveTo(c.x,c.y),s=!1):(t.lineTo(c.x,n),t.lineTo(c.x,c.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(h.x,n)}t.lineTo(e.first().x,n),t.closePath(),t.clip()}function Ze(t,e){const{line:n,target:o,property:s,color:r,scale:a}=e,l=function(t,e,n){const o=t.segments,s=t.points,r=e.points,a=[];for(const t of o){let{start:o,end:l}=t;l=Ve(o,l,s);const c=je(n,s[o],s[l],t.loop);if(!e.segments){a.push({source:t,target:c,start:s[o],end:s[l]});continue}const h=i._boundSegments(e,c);for(const e of h){const o=je(n,r[e.start],r[e.end],e.loop),l=i._boundSegment(t,s,o);for(const t of l)a.push({source:t,target:e,start:{[n]:He(c,o,"start",Math.max)},end:{[n]:He(c,o,"end",Math.min)}})}}return a}(n,o,s);for(const{source:e,target:i,start:c,end:h}of l){const{style:{backgroundColor:l=r}={}}=e,u=!0!==o;t.save(),t.fillStyle=l,Je(t,a,u&&je(s,c,h)),t.beginPath();const d=!!n.pathSegment(t,e);let f;if(u){d?t.closePath():tn(t,o,h,s);const e=!!o.pathSegment(t,i,{move:d,reverse:!0});f=d&&e,f||tn(t,o,c,s)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Je(t,e,n){const{top:i,bottom:o}=e.chart.chartArea,{property:s,start:r,end:a}=n||{};"x"===s&&(t.beginPath(),t.rect(r,i,a-r,o-i),t.clip())}function tn(t,e,n,i){const o=e.interpolate(n,i);o&&t.lineTo(o.x,o.y)}var en={id:"filler",afterDatasetsUpdate(t,e,n){const i=(t.data.datasets||[]).length,o=[];let s,r,a,l;for(r=0;r<i;++r)s=t.getDatasetMeta(r),a=s.dataset,l=null,a&&a.options&&a instanceof Ae&&(l={visible:t.isDatasetVisible(r),index:r,fill:$e(a,r,i),chart:t,axis:s.controller.options.indexAxis,scale:s.vScale,line:a}),s.$filler=l,o.push(l);for(r=0;r<i;++r)l=o[r],l&&!1!==l.fill&&(l.fill=Ye(o,r,n.propagate))},beforeDraw(t,e,n){const i="beforeDraw"===n.drawTime,o=t.getSortedVisibleDatasetMetas(),s=t.chartArea;for(let e=o.length-1;e>=0;--e){const n=o[e].$filler;n&&(n.line.updateControlPoints(s,n.axis),i&&n.fill&&Xe(t.ctx,n,s))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const i=t.getSortedVisibleDatasetMetas();for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;Ue(n)&&Xe(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const i=e.meta.$filler;Ue(i)&&"beforeDatasetDraw"===n.drawTime&&Xe(t.ctx,i,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const nn=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=t.pointStyleWidth||Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class on extends Ct{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=i.callback(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,o=i.toFont(n.font),s=o.size,r=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=nn(n,s);let c,h;e.font=o.string,this.isHorizontal()?(c=this.maxWidth,h=this._fitRows(r,s,a,l)+10):(h=this.maxHeight,c=this._fitCols(r,o,a,l)+10),this.width=Math.min(c,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:o,maxWidth:s,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+r;let h=t;o.textAlign="left",o.textBaseline="middle";let u=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=n+e/2+o.measureText(t.text).width;(0===f||l[l.length-1]+p+2*r>s)&&(h+=c,l[l.length-(f>0?0:1)]=0,d+=c,u++),a[f]={left:0,top:d,row:u,width:p,height:i},l[l.length-1]+=p+r})),h}_fitCols(t,e,n,i){const{ctx:o,maxHeight:s,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=s-t;let h=r,u=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,s)=>{const{itemWidth:g,itemHeight:m}=function(t,e,n,i,o){const s=function(t,e,n,i){let o=t.text;return o&&"string"!=typeof o&&(o=o.reduce(((t,e)=>t.length>e.length?t:e))),e+n.size/2+i.measureText(o).width}(i,t,e,n),r=function(t,e,n){let i=t;return"string"!=typeof e.text&&(i=sn(e,n)),i}(o,i,e.lineHeight);return{itemWidth:s,itemHeight:r}}(n,e,o,t,i);s>0&&d+m+2*r>c&&(h+=u+r,l.push({width:u,height:d}),f+=u+r,p++,u=d=0),a[s]={left:f,top:d,col:p,width:g,height:m},u=Math.max(u,g),d+=m+r})),h+=u,l.push({width:u,height:d}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:o},rtl:s}}=this,r=i.getRtlAdapter(s,this.left,this.width);if(this.isHorizontal()){let s=0,a=i._alignStartEnd(n,this.left+o,this.right-this.lineWidths[s]);for(const l of e)s!==l.row&&(s=l.row,a=i._alignStartEnd(n,this.left+o,this.right-this.lineWidths[s])),l.top+=this.top+t+o,l.left=r.leftForLtr(r.x(a),l.width),a+=l.width+o}else{let s=0,a=i._alignStartEnd(n,this.top+t+o,this.bottom-this.columnSizes[s].height);for(const l of e)l.col!==s&&(s=l.col,a=i._alignStartEnd(n,this.top+t+o,this.bottom-this.columnSizes[s].height)),l.top=a,l.left+=this.left+o,l.left=r.leftForLtr(r.x(l.left),l.width),a+=l.height+o}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;i.clipArea(t,this),this._draw(),i.unclipArea(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:o}=this,{align:s,labels:r}=t,a=i.defaults.color,l=i.getRtlAdapter(t.rtl,this.left,this.width),c=i.toFont(r.font),{padding:h}=r,u=c.size,d=u/2;let f;this.drawTitle(),o.textAlign=l.textAlign("left"),o.textBaseline="middle",o.lineWidth=.5,o.font=c.string;const{boxWidth:p,boxHeight:g,itemHeight:m}=nn(r,u),b=this.isHorizontal(),x=this._computeTitleHeight();f=b?{x:i._alignStartEnd(s,this.left+h,this.right-n[0]),y:this.top+h+x,line:0}:{x:this.left+h,y:i._alignStartEnd(s,this.top+x+h,this.bottom-e[0].height),line:0},i.overrideTextDirection(this.ctx,t.textDirection);const y=m+h;this.legendItems.forEach(((v,A)=>{o.strokeStyle=v.fontColor,o.fillStyle=v.fontColor;const _=o.measureText(v.text).width,w=l.textAlign(v.textAlign||(v.textAlign=r.textAlign)),C=p+d+_;let k=f.x,I=f.y;if(l.setWidth(this.width),b?A>0&&k+C+h>this.right&&(I=f.y+=y,f.line++,k=f.x=i._alignStartEnd(s,this.left+h,this.right-n[f.line])):A>0&&I+y>this.bottom&&(k=f.x=k+e[f.line].width+h,f.line++,I=f.y=i._alignStartEnd(s,this.top+x+h,this.bottom-e[f.line].height)),function(t,e,n){if(isNaN(p)||p<=0||isNaN(g)||g<0)return;o.save();const s=i.valueOrDefault(n.lineWidth,1);if(o.fillStyle=i.valueOrDefault(n.fillStyle,a),o.lineCap=i.valueOrDefault(n.lineCap,"butt"),o.lineDashOffset=i.valueOrDefault(n.lineDashOffset,0),o.lineJoin=i.valueOrDefault(n.lineJoin,"miter"),o.lineWidth=s,o.strokeStyle=i.valueOrDefault(n.strokeStyle,a),o.setLineDash(i.valueOrDefault(n.lineDash,[])),r.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:s},c=l.xPlus(t,p/2),h=e+d;i.drawPointLegend(o,a,c,h,r.pointStyleWidth&&p)}else{const r=e+Math.max((u-g)/2,0),a=l.leftForLtr(t,p),c=i.toTRBLCorners(n.borderRadius);o.beginPath(),Object.values(c).some((t=>0!==t))?i.addRoundedRectPath(o,{x:a,y:r,w:p,h:g,radius:c}):o.rect(a,r,p,g),o.fill(),0!==s&&o.stroke()}o.restore()}(l.x(k),I,v),k=i._textX(w,k+p+d,b?k+C:this.right,t.rtl),function(t,e,n){i.renderText(o,n.text,t,e+m/2,c,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(k),I,v),b)f.x+=C+h;else if("string"!=typeof v.text){const t=c.lineHeight;f.y+=sn(v,t)+h}else f.y+=y})),i.restoreTextDirection(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=i.toFont(e.font),o=i.toPadding(e.padding);if(!e.display)return;const s=i.getRtlAdapter(t.rtl,this.left,this.width),r=this.ctx,a=e.position,l=n.size/2,c=o.top+l;let h,u=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+c,u=i._alignStartEnd(t.align,u,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=c+i._alignStartEnd(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const f=i._alignStartEnd(a,u,u+d);r.textAlign=s.textAlign(i._toLeftRightCenter(a)),r.textBaseline="middle",r.strokeStyle=e.color,r.fillStyle=e.color,r.font=n.string,i.renderText(r,e.text,f,h,n)}_computeTitleHeight(){const t=this.options.title,e=i.toFont(t.font),n=i.toPadding(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,o,s;if(i._isBetween(t,this.left,this.right)&&i._isBetween(e,this.top,this.bottom))for(s=this.legendHitBoxes,n=0;n<s.length;++n)if(o=s[n],i._isBetween(t,o.left,o.left+o.width)&&i._isBetween(e,o.top,o.top+o.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const r=this._hoveredItem,a=(s=n,null!==(o=r)&&null!==s&&o.datasetIndex===s.datasetIndex&&o.index===s.index);r&&!a&&i.callback(e.onLeave,[t,r,this],this),this._hoveredItem=n,n&&!a&&i.callback(e.onHover,[t,n,this],this)}else n&&i.callback(e.onClick,[t,n,this],this);var o,s}}function sn(t,e){return e*(t.text?t.text.length:0)}var rn={id:"legend",_element:on,start(t,e,n){const i=t.legend=new on({ctx:t.ctx,options:n,chart:t});st.configure(t,i,n),st.addBox(t,i)},stop(t){st.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;st.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,o=n.chart;o.isDatasetVisible(i)?(o.hide(i),e.hidden=!0):(o.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:o,textAlign:s,color:r,useBorderRadius:a,borderRadius:l}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const c=t.controller.getStyle(n?0:void 0),h=i.toPadding(c.borderWidth);return{text:e[t.index].label,fillStyle:c.backgroundColor,fontColor:r,hidden:!t.visible,lineCap:c.borderCapStyle,lineDash:c.borderDash,lineDashOffset:c.borderDashOffset,lineJoin:c.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:c.borderColor,pointStyle:o||c.pointStyle,rotation:c.rotation,textAlign:s||c.textAlign,borderRadius:a&&(l||c.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class an extends Ct{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const o=i.isArray(n.text)?n.text.length:1;this._padding=i.toPadding(n.padding);const s=o*i.toFont(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:o,right:s,options:r}=this,a=r.align;let l,c,h,u=0;return this.isHorizontal()?(c=i._alignStartEnd(a,n,s),h=e+t,l=s-n):("left"===r.position?(c=n+t,h=i._alignStartEnd(a,o,e),u=-.5*i.PI):(c=s-t,h=i._alignStartEnd(a,e,o),u=.5*i.PI),l=o-e),{titleX:c,titleY:h,maxWidth:l,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=i.toFont(e.font),o=n.lineHeight/2+this._padding.top,{titleX:s,titleY:r,maxWidth:a,rotation:l}=this._drawArgs(o);i.renderText(t,e.text,0,0,n,{color:e.color,maxWidth:a,rotation:l,textAlign:i._toLeftRightCenter(e.align),textBaseline:"middle",translation:[s,r]})}}var ln={id:"title",_element:an,start(t,e,n){!function(t,e){const n=new an({ctx:t.ctx,options:e,chart:t});st.configure(t,n,e),st.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;st.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;st.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const cn=new WeakMap;var hn={id:"subtitle",start(t,e,n){const i=new an({ctx:t.ctx,options:n,chart:t});st.configure(t,i,n),st.addBox(t,i),cn.set(t,i)},stop(t){st.removeBox(t,cn.get(t)),cn.delete(t)},beforeUpdate(t,e,n){const i=cn.get(t);st.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const un={average(t){if(!t.length)return!1;let e,n,i=new Set,o=0,s=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i.add(t.x),o+=t.y,++s}}return 0!==s&&0!==i.size&&{x:[...i].reduce(((t,e)=>t+e))/i.size,y:o/s}},nearest(t,e){if(!t.length)return!1;let n,o,s,r=e.x,a=e.y,l=Number.POSITIVE_INFINITY;for(n=0,o=t.length;n<o;++n){const o=t[n].element;if(o&&o.hasValue()){const t=o.getCenterPoint(),n=i.distanceBetweenPoints(e,t);n<l&&(l=n,s=o)}}if(s){const t=s.tooltipPosition();r=t.x,a=t.y}return{x:r,y:a}}};function dn(t,e){return e&&(i.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function fn(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function pn(t,e){const{element:n,datasetIndex:i,index:o}=e,s=t.getDatasetMeta(i).controller,{label:r,value:a}=s.getLabelAndValue(o);return{chart:t,label:r,parsed:s.getParsed(o),raw:t.data.datasets[i].data[o],formattedValue:a,dataset:s.getDataset(),dataIndex:o,datasetIndex:i,element:n}}function gn(t,e){const n=t.chart.ctx,{body:o,footer:s,title:r}=t,{boxWidth:a,boxHeight:l}=e,c=i.toFont(e.bodyFont),h=i.toFont(e.titleFont),u=i.toFont(e.footerFont),d=r.length,f=s.length,p=o.length,g=i.toPadding(e.padding);let m=g.height,b=0,x=o.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,d&&(m+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(m+=p*(e.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(x-p)*c.lineHeight+(x-1)*e.bodySpacing),f&&(m+=e.footerMarginTop+f*u.lineHeight+(f-1)*e.footerSpacing);let y=0;const v=function(t){b=Math.max(b,n.measureText(t).width+y)};return n.save(),n.font=h.string,i.each(t.title,v),n.font=c.string,i.each(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?a+2+e.boxPadding:0,i.each(o,(t=>{i.each(t.before,v),i.each(t.lines,v),i.each(t.after,v)})),y=0,n.font=u.string,i.each(t.footer,v),n.restore(),b+=g.width,{width:b,height:m}}function mn(t,e,n,i){const{x:o,width:s}=n,{width:r,chartArea:{left:a,right:l}}=t;let c="center";return"center"===i?c=o<=(a+l)/2?"left":"right":o<=s/2?c="left":o>=r-s/2&&(c="right"),function(t,e,n,i){const{x:o,width:s}=i,r=n.caretSize+n.caretPadding;return"left"===t&&o+s+r>e.width||"right"===t&&o-s-r<0||void 0}(c,t,e,n)&&(c="center"),c}function bn(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||mn(t,e,n,i),yAlign:i}}function xn(t,e,n,o){const{caretSize:s,caretPadding:r,cornerRadius:a}=t,{xAlign:l,yAlign:c}=n,h=s+r,{topLeft:u,topRight:d,bottomLeft:f,bottomRight:p}=i.toTRBLCorners(a);let g=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,l);const m=function(t,e,n){let{y:i,height:o}=t;return"top"===e?i+=n:i-="bottom"===e?o+n:o/2,i}(e,c,h);return"center"===c?"left"===l?g+=h:"right"===l&&(g-=h):"left"===l?g-=Math.max(u,f)+s:"right"===l&&(g+=Math.max(d,p)+s),{x:i._limitValue(g,0,o.width-e.width),y:i._limitValue(m,0,o.height-e.height)}}function yn(t,e,n){const o=i.toPadding(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-o.right:t.x+o.left}function vn(t){return dn([],fn(t))}function An(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}const _n={beforeTitle:i.noop,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:i.noop,beforeBody:i.noop,beforeLabel:i.noop,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return i.isNullOrUndef(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:i.noop,afterBody:i.noop,beforeFooter:i.noop,footer:i.noop,afterFooter:i.noop};function wn(t,e,n,i){const o=t[e].call(n,i);return void 0===o?_n[e].call(n,i):o}class Cn extends Ct{static positioners=un;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,o=new c(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(o)),o}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this._tooltipItems,i.createContext(t,{tooltip:this,tooltipItems:e,type:"tooltip"})));var t,e}getTitle(t,e){const{callbacks:n}=e,i=wn(n,"beforeTitle",this,t),o=wn(n,"title",this,t),s=wn(n,"afterTitle",this,t);let r=[];return r=dn(r,fn(i)),r=dn(r,fn(o)),r=dn(r,fn(s)),r}getBeforeBody(t,e){return vn(wn(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:n}=e,o=[];return i.each(t,(t=>{const e={before:[],lines:[],after:[]},i=An(n,t);dn(e.before,fn(wn(i,"beforeLabel",this,t))),dn(e.lines,wn(i,"label",this,t)),dn(e.after,fn(wn(i,"afterLabel",this,t))),o.push(e)})),o}getAfterBody(t,e){return vn(wn(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:n}=e,i=wn(n,"beforeFooter",this,t),o=wn(n,"footer",this,t),s=wn(n,"afterFooter",this,t);let r=[];return r=dn(r,fn(i)),r=dn(r,fn(o)),r=dn(r,fn(s)),r}_createItems(t){const e=this._active,n=this.chart.data,o=[],s=[],r=[];let a,l,c=[];for(a=0,l=e.length;a<l;++a)c.push(pn(this.chart,e[a]));return t.filter&&(c=c.filter(((e,i,o)=>t.filter(e,i,o,n)))),t.itemSort&&(c=c.sort(((e,i)=>t.itemSort(e,i,n)))),i.each(c,(e=>{const n=An(t.callbacks,e);o.push(wn(n,"labelColor",this,e)),s.push(wn(n,"labelPointStyle",this,e)),r.push(wn(n,"labelTextColor",this,e))})),this.labelColors=o,this.labelPointStyles=s,this.labelTextColors=r,this.dataPoints=c,c}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let o,s=[];if(i.length){const t=un[n.position].call(this,i,this._eventPosition);s=this._createItems(n),this.title=this.getTitle(s,n),this.beforeBody=this.getBeforeBody(s,n),this.body=this.getBody(s,n),this.afterBody=this.getAfterBody(s,n),this.footer=this.getFooter(s,n);const e=this._size=gn(this,n),r=Object.assign({},t,e),a=bn(this.chart,n,r),l=xn(n,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,o={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(o={opacity:0});this._tooltipItems=s,this.$context=void 0,o&&this._resolveAnimations().update(this,o),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const o=this.getCaretPosition(t,n,i);e.lineTo(o.x1,o.y1),e.lineTo(o.x2,o.y2),e.lineTo(o.x3,o.y3)}getCaretPosition(t,e,n){const{xAlign:o,yAlign:s}=this,{caretSize:r,cornerRadius:a}=n,{topLeft:l,topRight:c,bottomLeft:h,bottomRight:u}=i.toTRBLCorners(a),{x:d,y:f}=t,{width:p,height:g}=e;let m,b,x,y,v,A;return"center"===s?(v=f+g/2,"left"===o?(m=d,b=m-r,y=v+r,A=v-r):(m=d+p,b=m+r,y=v-r,A=v+r),x=m):(b="left"===o?d+Math.max(l,h)+r:"right"===o?d+p-Math.max(c,u)-r:this.caretX,"top"===s?(y=f,v=y-r,m=b-r,x=b+r):(y=f+g,v=y+r,m=b+r,x=b-r),A=y),{x1:m,x2:b,x3:x,y1:y,y2:v,y3:A}}drawTitle(t,e,n){const o=this.title,s=o.length;let r,a,l;if(s){const c=i.getRtlAdapter(n.rtl,this.x,this.width);for(t.x=yn(this,n.titleAlign,n),e.textAlign=c.textAlign(n.titleAlign),e.textBaseline="middle",r=i.toFont(n.titleFont),a=n.titleSpacing,e.fillStyle=n.titleColor,e.font=r.string,l=0;l<s;++l)e.fillText(o[l],c.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+a,l+1===s&&(t.y+=n.titleMarginBottom-a)}}_drawColorBox(t,e,n,o,s){const r=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:l,boxWidth:c}=s,h=i.toFont(s.bodyFont),u=yn(this,"left",s),d=o.x(u),f=l<h.lineHeight?(h.lineHeight-l)/2:0,p=e.y+f;if(s.usePointStyle){const e={radius:Math.min(c,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=o.leftForLtr(d,c)+c/2,h=p+l/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,i.drawPoint(t,e,n,h),t.strokeStyle=r.borderColor,t.fillStyle=r.backgroundColor,i.drawPoint(t,e,n,h)}else{t.lineWidth=i.isObject(r.borderWidth)?Math.max(...Object.values(r.borderWidth)):r.borderWidth||1,t.strokeStyle=r.borderColor,t.setLineDash(r.borderDash||[]),t.lineDashOffset=r.borderDashOffset||0;const e=o.leftForLtr(d,c),n=o.leftForLtr(o.xPlus(d,1),c-2),a=i.toTRBLCorners(r.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,i.addRoundedRectPath(t,{x:e,y:p,w:c,h:l,radius:a}),t.fill(),t.stroke(),t.fillStyle=r.backgroundColor,t.beginPath(),i.addRoundedRectPath(t,{x:n,y:p+1,w:c-2,h:l-2,radius:a}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,p,c,l),t.strokeRect(e,p,c,l),t.fillStyle=r.backgroundColor,t.fillRect(n,p+1,c-2,l-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:o}=this,{bodySpacing:s,bodyAlign:r,displayColors:a,boxHeight:l,boxWidth:c,boxPadding:h}=n,u=i.toFont(n.bodyFont);let d=u.lineHeight,f=0;const p=i.getRtlAdapter(n.rtl,this.x,this.width),g=function(n){e.fillText(n,p.x(t.x+f),t.y+d/2),t.y+=d+s},m=p.textAlign(r);let b,x,y,v,A,_,w;for(e.textAlign=r,e.textBaseline="middle",e.font=u.string,t.x=yn(this,m,n),e.fillStyle=n.bodyColor,i.each(this.beforeBody,g),f=a&&"right"!==m?"center"===r?c/2+h:c+2+h:0,v=0,_=o.length;v<_;++v){for(b=o[v],x=this.labelTextColors[v],e.fillStyle=x,i.each(b.before,g),y=b.lines,a&&y.length&&(this._drawColorBox(e,t,v,p,n),d=Math.max(u.lineHeight,l)),A=0,w=y.length;A<w;++A)g(y[A]),d=u.lineHeight;i.each(b.after,g)}f=0,d=u.lineHeight,i.each(this.afterBody,g),t.y-=s}drawFooter(t,e,n){const o=this.footer,s=o.length;let r,a;if(s){const l=i.getRtlAdapter(n.rtl,this.x,this.width);for(t.x=yn(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=l.textAlign(n.footerAlign),e.textBaseline="middle",r=i.toFont(n.footerFont),e.fillStyle=n.footerColor,e.font=r.string,a=0;a<s;++a)e.fillText(o[a],l.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+n.footerSpacing}}drawBackground(t,e,n,o){const{xAlign:s,yAlign:r}=this,{x:a,y:l}=t,{width:c,height:h}=n,{topLeft:u,topRight:d,bottomLeft:f,bottomRight:p}=i.toTRBLCorners(o.cornerRadius);e.fillStyle=o.backgroundColor,e.strokeStyle=o.borderColor,e.lineWidth=o.borderWidth,e.beginPath(),e.moveTo(a+u,l),"top"===r&&this.drawCaret(t,e,n,o),e.lineTo(a+c-d,l),e.quadraticCurveTo(a+c,l,a+c,l+d),"center"===r&&"right"===s&&this.drawCaret(t,e,n,o),e.lineTo(a+c,l+h-p),e.quadraticCurveTo(a+c,l+h,a+c-p,l+h),"bottom"===r&&this.drawCaret(t,e,n,o),e.lineTo(a+f,l+h),e.quadraticCurveTo(a,l+h,a,l+h-f),"center"===r&&"left"===s&&this.drawCaret(t,e,n,o),e.lineTo(a,l+u),e.quadraticCurveTo(a,l,a+u,l),e.closePath(),e.fill(),o.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,o=n&&n.y;if(i||o){const n=un[t.position].call(this,this._active,this._eventPosition);if(!n)return;const s=this._size=gn(this,t),r=Object.assign({},n,this._size),a=bn(e,t,r),l=xn(t,r,a,e);i._to===l.x&&o._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=s.width,this.height=s.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const o={width:this.width,height:this.height},s={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const r=i.toPadding(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=n,this.drawBackground(s,t,o,e),i.overrideTextDirection(t,e.textDirection),s.y+=r.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),i.restoreTextDirection(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,o=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),s=!i._elementsEqual(n,o),r=this._positionChanged(o,e);(s||r)&&(this._active=o,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const o=this.options,s=this._active||[],r=this._getActiveElements(t,s,e,n),a=this._positionChanged(r,t),l=e||!i._elementsEqual(r,s)||a;return l&&(this._active=r,(o.enabled||o.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),l}_getActiveElements(t,e,n,i){const o=this.options;if("mouseout"===t.type)return[];if(!i)return e.filter((t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index)));const s=this.chart.getElementsAtEventForMode(t,o.mode,o,n);return o.reverse&&s.reverse(),s}_positionChanged(t,e){const{caretX:n,caretY:i,options:o}=this,s=un[o.position].call(this,t,e);return!1!==s&&(n!==s.x||i!==s.y)}}var kn={id:"tooltip",_element:Cn,positioners:un,afterInit(t,e,n){n&&(t.tooltip=new Cn({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const n={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...n,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n)}},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:_n},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},In=Object.freeze({__proto__:null,Colors:Re,Decimation:ze,Filler:en,Legend:rn,SubTitle:hn,Title:ln,Tooltip:kn});function En(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}class Mn extends Dt{static id="category";static defaults={ticks:{callback:En}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(i.isNullOrUndef(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:i._limitValue(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const o=t.indexOf(e);return-1===o?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):o!==t.lastIndexOf(e)?n:o}(n,t,i.valueOrDefault(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let o=this.getLabels();o=0===t&&e===o.length-1?o:o.slice(t,e+1),this._valueRange=Math.max(o.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){return En.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Sn(t,e,{horizontal:n,minRotation:o}){const s=i.toRadians(o),r=(n?Math.sin(s):Math.cos(s))||.001,a=.75*e*(""+t).length;return Math.min(e/r,a)}class On extends Dt{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return i.isNullOrUndef(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:o,max:s}=this;const r=t=>o=e?o:t,a=t=>s=n?s:t;if(t){const t=i.sign(o),e=i.sign(s);t<0&&e<0?a(0):t>0&&e>0&&r(0)}if(o===s){let e=0===s?1:Math.abs(.05*s);a(s+e),t||r(o-e)}this.min=o,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const o=function(t,e){const n=[],{bounds:o,step:s,min:r,max:a,precision:l,count:c,maxTicks:h,maxDigits:u,includeBounds:d}=t,f=s||1,p=h-1,{min:g,max:m}=e,b=!i.isNullOrUndef(r),x=!i.isNullOrUndef(a),y=!i.isNullOrUndef(c),v=(m-g)/(u+1);let A,_,w,C,k=i.niceNum((m-g)/p/f)*f;if(k<1e-14&&!b&&!x)return[{value:g},{value:m}];C=Math.ceil(m/k)-Math.floor(g/k),C>p&&(k=i.niceNum(C*k/p/f)*f),i.isNullOrUndef(l)||(A=Math.pow(10,l),k=Math.ceil(k*A)/A),"ticks"===o?(_=Math.floor(g/k)*k,w=Math.ceil(m/k)*k):(_=g,w=m),b&&x&&s&&i.almostWhole((a-r)/s,k/1e3)?(C=Math.round(Math.min((a-r)/k,h)),k=(a-r)/C,_=r,w=a):y?(_=b?r:_,w=x?a:w,C=c-1,k=(w-_)/C):(C=(w-_)/k,C=i.almostEquals(C,Math.round(C),k/1e3)?Math.round(C):Math.ceil(C));const I=Math.max(i._decimalPlaces(k),i._decimalPlaces(_));A=Math.pow(10,i.isNullOrUndef(l)?I:l),_=Math.round(_*A)/A,w=Math.round(w*A)/A;let E=0;for(b&&(d&&_!==r?(n.push({value:r}),_<r&&E++,i.almostEquals(Math.round((_+E*k)*A)/A,r,Sn(r,v,t))&&E++):_<r&&E++);E<C;++E){const t=Math.round((_+E*k)*A)/A;if(x&&t>a)break;n.push({value:t})}return x&&d&&w!==a?n.length&&i.almostEquals(n[n.length-1].value,a,Sn(a,v,t))?n[n.length-1].value=a:n.push({value:a}):x&&w!==a||n.push({value:w}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&i._setMinAndMaxByKey(o,this,"value"),t.reverse?(o.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),o}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return i.formatNumber(t,this.chart.options.locale,this.options.ticks.format)}}class Pn extends On{static id="linear";static defaults={ticks:{callback:i.Ticks.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=i.isNumberFinite(t)?t:0,this.max=i.isNumberFinite(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=i.toRadians(this.options.ticks.minRotation),o=(t?Math.sin(n):Math.cos(n))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/o))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Bn=t=>Math.floor(i.log10(t)),Dn=(t,e)=>Math.pow(10,Bn(t)+e);function Tn(t){return 1==t/Math.pow(10,Bn(t))}function Ln(t,e,n){const i=Math.pow(10,n),o=Math.floor(t/i);return Math.ceil(e/i)-o}class Rn extends Dt{static id="logarithmic";static defaults={ticks:{callback:i.Ticks.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=On.prototype.parse.apply(this,[t,e]);if(0!==n)return i.isNumberFinite(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=i.isNumberFinite(t)?Math.max(0,t):null,this.max=i.isNumberFinite(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!i.isNumberFinite(this._userMin)&&(this.min=t===Dn(this.min,0)?Dn(this.min,-1):Dn(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,i=this.max;const o=e=>n=t?n:e,s=t=>i=e?i:t;n===i&&(n<=0?(o(1),s(10)):(o(Dn(n,-1)),s(Dn(i,1)))),n<=0&&o(Dn(i,-1)),i<=0&&s(Dn(n,1)),this.min=n,this.max=i}buildTicks(){const t=this.options,e=function(t,{min:e,max:n}){e=i.finiteOrDefault(t.min,e);const o=[],s=Bn(e);let r=function(t,e){let n=Bn(e-t);for(;Ln(t,e,n)>10;)n++;for(;Ln(t,e,n)<10;)n--;return Math.min(n,Bn(t))}(e,n),a=r<0?Math.pow(10,Math.abs(r)):1;const l=Math.pow(10,r),c=s>r?Math.pow(10,s):0,h=Math.round((e-c)*a)/a,u=Math.floor((e-c)/l/10)*l*10;let d=Math.floor((h-u)/Math.pow(10,r)),f=i.finiteOrDefault(t.min,Math.round((c+u+d*Math.pow(10,r))*a)/a);for(;f<n;)o.push({value:f,major:Tn(f),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(r++,d=2,a=r>=0?1:a),f=Math.round((c+u+d*Math.pow(10,r))*a)/a;const p=i.finiteOrDefault(t.max,f);return o.push({value:p,major:Tn(p),significand:d}),o}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&i._setMinAndMaxByKey(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":i.formatNumber(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=i.log10(t),this._valueRange=i.log10(this.max)-i.log10(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(i.log10(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Fn(t){const e=t.ticks;if(e.display&&t.display){const t=i.toPadding(e.backdropPadding);return i.valueOrDefault(e.font&&e.font.size,i.defaults.font.size)+t.height}return 0}function Nn(t,e,n,i,o){return t===i||t===o?{start:e-n/2,end:e+n/2}:t<i||t>o?{start:e-n,end:e}:{start:e,end:e+n}}function zn(t,e,n,i,o){const s=Math.abs(Math.sin(n)),r=Math.abs(Math.cos(n));let a=0,l=0;i.start<e.l?(a=(e.l-i.start)/s,t.l=Math.min(t.l,e.l-a)):i.end>e.r&&(a=(i.end-e.r)/s,t.r=Math.max(t.r,e.r+a)),o.start<e.t?(l=(e.t-o.start)/r,t.t=Math.min(t.t,e.t-l)):o.end>e.b&&(l=(o.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function jn(t,e,n){const o=t.drawingArea,{extra:s,additionalAngle:r,padding:a,size:l}=n,c=t.getPointPosition(e,o+s+a,r),h=Math.round(i.toDegrees(i._normalizeAngle(c.angle+i.HALF_PI))),u=function(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}(c.y,l.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),f=(p=c.x,g=l.w,"right"===(m=d)?p-=g:"center"===m&&(p-=g/2),p);var p,g,m;return{visible:!0,x:c.x,y:u,textAlign:d,left:f,top:u,right:f+l.w,bottom:u+l.h}}function Vn(t,e){if(!e)return!0;const{left:n,top:o,right:s,bottom:r}=t;return!(i._isPointInArea({x:n,y:o},e)||i._isPointInArea({x:n,y:r},e)||i._isPointInArea({x:s,y:o},e)||i._isPointInArea({x:s,y:r},e))}function Hn(t,e,n){const{left:o,top:s,right:r,bottom:a}=n,{backdropColor:l}=e;if(!i.isNullOrUndef(l)){const n=i.toTRBLCorners(e.borderRadius),c=i.toPadding(e.backdropPadding);t.fillStyle=l;const h=o-c.left,u=s-c.top,d=r-o+c.width,f=a-s+c.height;Object.values(n).some((t=>0!==t))?(t.beginPath(),i.addRoundedRectPath(t,{x:h,y:u,w:d,h:f,radius:n}),t.fill()):t.fillRect(h,u,d,f)}}function Wn(t,e,n,o){const{ctx:s}=t;if(n)s.arc(t.xCenter,t.yCenter,e,0,i.TAU);else{let n=t.getPointPosition(0,e);s.moveTo(n.x,n.y);for(let i=1;i<o;i++)n=t.getPointPosition(i,e),s.lineTo(n.x,n.y)}}class Un extends On{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:i.Ticks.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=i.toPadding(Fn(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=i.isNumberFinite(t)&&!isNaN(t)?t:0,this.max=i.isNumberFinite(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Fn(this.options))}generateTickLabels(t){On.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=i.callback(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),o=[],s=[],r=t._pointLabels.length,a=t.options.pointLabels,l=a.centerPointLabels?i.PI/r:0;for(let d=0;d<r;d++){const r=a.setContext(t.getPointLabelContext(d));s[d]=r.padding;const f=t.getPointPosition(d,t.drawingArea+s[d],l),p=i.toFont(r.font),g=(c=t.ctx,h=p,u=t._pointLabels[d],u=i.isArray(u)?u:[u],{w:i._longestText(c,h.string,u),h:u.length*h.lineHeight});o[d]=g;const m=i._normalizeAngle(t.getIndexAngle(d)+l),b=Math.round(i.toDegrees(m));zn(n,e,m,Nn(b,f.x,g.w,0,180),Nn(b,f.y,g.h,90,270))}var c,h,u;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const o=[],s=t._pointLabels.length,r=t.options,{centerPointLabels:a,display:l}=r.pointLabels,c={extra:Fn(r)/2,additionalAngle:a?i.PI/s:0};let h;for(let i=0;i<s;i++){c.padding=n[i],c.size=e[i];const s=jn(t,i,c);o.push(s),"auto"===l&&(s.visible=Vn(s,h),s.visible&&(h=s))}return o}(t,o,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,i))}getIndexAngle(t){const e=i.TAU/(this._pointLabels.length||1),n=this.options.startAngle||0;return i._normalizeAngle(t*e+i.toRadians(n))}getDistanceFromCenterForValue(t){if(i.isNullOrUndef(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(i.isNullOrUndef(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return i.createContext(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const o=this.getIndexAngle(t)-i.HALF_PI+n;return{x:Math.cos(o)*e+this.xCenter,y:Math.sin(o)*e+this.yCenter,angle:o}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:i,bottom:o}=this._pointLabelItems[t];return{left:e,top:n,right:i,bottom:o}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),Wn(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:o,border:s}=e,r=this._pointLabels.length;let a,l,c;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:o}}=t;for(let s=e-1;s>=0;s--){const e=t._pointLabelItems[s];if(!e.visible)continue;const r=o.setContext(t.getPointLabelContext(s));Hn(n,r,e);const a=i.toFont(r.font),{x:l,y:c,textAlign:h}=e;i.renderText(n,t._pointLabels[s],l,c+a.lineHeight/2,a,{color:r.color,textAlign:h,textBaseline:"middle"})}}(this,r),o.display&&this.ticks.forEach(((t,e)=>{if(0!==e||0===e&&this.min<0){l=this.getDistanceFromCenterForValue(t.value);const n=this.getContext(e),i=o.setContext(n),a=s.setContext(n);!function(t,e,n,i,o){const s=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!i||!a||!l||n<0||(s.save(),s.strokeStyle=a,s.lineWidth=l,s.setLineDash(o.dash||[]),s.lineDashOffset=o.dashOffset,s.beginPath(),Wn(t,n,r,i),s.closePath(),s.stroke(),s.restore())}(this,i,l,r,a)}})),n.display){for(t.save(),a=r-1;a>=0;a--){const i=n.setContext(this.getPointLabelContext(a)),{color:o,lineWidth:s}=i;s&&o&&(t.lineWidth=s,t.strokeStyle=o,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,l=this.getDistanceFromCenterForValue(e.reverse?this.min:this.max),c=this.getPointPosition(a,l),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(c.x,c.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const o=this.getIndexAngle(0);let s,r;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(o),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((o,a)=>{if(0===a&&this.min>=0&&!e.reverse)return;const l=n.setContext(this.getContext(a)),c=i.toFont(l.font);if(s=this.getDistanceFromCenterForValue(this.ticks[a].value),l.showLabelBackdrop){t.font=c.string,r=t.measureText(o.label).width,t.fillStyle=l.backdropColor;const e=i.toPadding(l.backdropPadding);t.fillRect(-r/2-e.left,-s-c.size/2-e.top,r+e.width,c.size+e.height)}i.renderText(t,o.label,0,-s,c,{color:l.color,strokeColor:l.textStrokeColor,strokeWidth:l.textStrokeWidth})})),t.restore()}drawTitle(){}}const Yn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},$n=Object.keys(Yn);function Qn(t,e){return t-e}function qn(t,e){if(i.isNullOrUndef(e))return null;const n=t._adapter,{parser:o,round:s,isoWeekday:r}=t._parseOpts;let a=e;return"function"==typeof o&&(a=o(a)),i.isNumberFinite(a)||(a="string"==typeof o?n.parse(a,o):n.parse(a)),null===a?null:(s&&(a="week"!==s||!i.isNumber(r)&&!0!==r?n.startOf(a,s):n.startOf(a,"isoWeek",r)),+a)}function Kn(t,e,n,i){const o=$n.length;for(let s=$n.indexOf(t);s<o-1;++s){const t=Yn[$n[s]],o=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(o*t.size))<=i)return $n[s]}return $n[o-1]}function Xn(t,e,n){if(n){if(n.length){const{lo:o,hi:s}=i._lookup(n,e);t[n[o]>=e?n[o]:n[s]]=!0}}else t[e]=!0}function Gn(t,e,n){const i=[],o={},s=e.length;let r,a;for(r=0;r<s;++r)a=e[r],o[a]=r,i.push({value:a,major:!1});return 0!==s&&n?function(t,e,n,i){const o=t._adapter,s=+o.startOf(e[0].value,i),r=e[e.length-1].value;let a,l;for(a=s;a<=r;a=+o.add(a,1,i))l=n[a],l>=0&&(e[l].major=!0);return e}(t,i,o,n):i}class Zn extends Dt{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const n=t.time||(t.time={}),o=this._adapter=new V._date(t.adapters.date);o.init(e),i.mergeIf(n.displayFormats,o.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:qn(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:o,max:s,minDefined:r,maxDefined:a}=this.getUserBounds();function l(t){r||isNaN(t.min)||(o=Math.min(o,t.min)),a||isNaN(t.max)||(s=Math.max(s,t.max))}r&&a||(l(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(this.getMinMax(!1))),o=i.isNumberFinite(o)&&!isNaN(o)?o:+e.startOf(Date.now(),n),s=i.isNumberFinite(s)&&!isNaN(s)?s:+e.endOf(Date.now(),n)+1,this.min=Math.min(o,s-1),this.max=Math.max(o+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,o="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&o.length&&(this.min=this._userMin||o[0],this.max=this._userMax||o[o.length-1]);const s=this.min,r=this.max,a=i._filterBetween(o,s,r);return this._unit=e.unit||(n.autoSkip?Kn(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,n,i,o){for(let s=$n.length-1;s>=$n.indexOf(n);s--){const n=$n[s];if(Yn[n].common&&t._adapter.diff(o,i,n)>=e-1)return n}return $n[n?$n.indexOf(n):0]}(this,a.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=$n.indexOf(t)+1,n=$n.length;e<n;++e)if(Yn[$n[e]].common)return $n[e]}(this._unit):void 0,this.initOffsets(o),t.reverse&&a.reverse(),Gn(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,n,o=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),o=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),s=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const r=t.length<3?.5:.25;o=i._limitValue(o,0,r),s=i._limitValue(s,0,r),this._offsets={start:o,end:s,factor:1/(o+1+s)}}_generate(){const t=this._adapter,e=this.min,n=this.max,o=this.options,s=o.time,r=s.unit||Kn(s.minUnit,e,n,this._getLabelCapacity(e)),a=i.valueOrDefault(o.ticks.stepSize,1),l="week"===r&&s.isoWeekday,c=i.isNumber(l)||!0===l,h={};let u,d,f=e;if(c&&(f=+t.startOf(f,"isoWeek",l)),f=+t.startOf(f,c?"day":r),t.diff(n,e,r)>1e5*a)throw new Error(e+" and "+n+" are too far apart with stepSize of "+a+" "+r);const p="data"===o.ticks.source&&this.getDataTimestamps();for(u=f,d=0;u<n;u=+t.add(u,a,r),d++)Xn(h,u,p);return u!==n&&"ticks"!==o.bounds&&1!==d||Xn(h,u,p),Object.keys(h).sort(Qn).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}format(t,e){const n=this.options.time.displayFormats,i=this._unit,o=e||n[i];return this._adapter.format(t,o)}_tickFormatFunction(t,e,n,o){const s=this.options,r=s.ticks.callback;if(r)return i.callback(r,[t,e,n],this);const a=s.time.displayFormats,l=this._unit,c=this._majorUnit,h=l&&a[l],u=c&&a[c],d=n[e],f=c&&u&&d&&d.major;return this._adapter.format(t,o||(f?u:h))}generateTickLabels(t){let e,n,i;for(e=0,n=t.length;e<n;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,o=i.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(o),r=Math.sin(o),a=this._resolveTickFontOptions(0).size;return{w:n*s+a*r,h:n*r+a*s}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,o=this._tickFormatFunction(t,0,Gn(this,[t],this._majorUnit),i),s=this._getLabelSize(o),r=Math.floor(this.isHorizontal()?this.width/s.w:this.height/s.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)n=n.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const i=this.getLabels();for(e=0,n=i.length;e<n;++e)t.push(qn(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return i._arrayUnique(t.sort(Qn))}}function Jn(t,e,n){let o,s,r,a,l=0,c=t.length-1;n?(e>=t[l].pos&&e<=t[c].pos&&({lo:l,hi:c}=i._lookupByKey(t,"pos",e)),({pos:o,time:r}=t[l]),({pos:s,time:a}=t[c])):(e>=t[l].time&&e<=t[c].time&&({lo:l,hi:c}=i._lookupByKey(t,"time",e)),({time:o,pos:r}=t[l]),({time:s,pos:a}=t[c]));const h=s-o;return h?r+(a-r)*(e-o)/h:r}class ti extends Zn{static id="timeseries";static defaults=Zn.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Jn(e,this.min),this._tableRange=Jn(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,i=[],o=[];let s,r,a,l,c;for(s=0,r=t.length;s<r;++s)l=t[s],l>=e&&l<=n&&i.push(l);if(i.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(s=0,r=i.length;s<r;++s)c=i[s+1],a=i[s-1],l=i[s],Math.round((c+a)/2)!==l&&o.push({time:l,pos:s/(r-1)});return o}_generate(){const t=this.min,e=this.max;let n=super.getDataTimestamps();return n.includes(t)&&n.length||n.splice(0,0,t),n.includes(e)&&1!==n.length||n.push(e),n.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(Jn(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return Jn(this._table,n*this._tableRange+this._minPos,!0)}}var ei=Object.freeze({__proto__:null,CategoryScale:Mn,LinearScale:Pn,LogarithmicScale:Rn,RadialLinearScale:Un,TimeScale:Zn,TimeSeriesScale:ti});const ni=[N,Oe,In,ei];e.Ticks=i.Ticks,e.defaults=i.defaults,e.Animation=l,e.Animations=c,e.ArcElement=fe,e.BarController=O,e.BarElement=Se,e.BasePlatform=rt,e.BasicPlatform=at,e.BubbleController=P,e.CategoryScale=Mn,e.Chart=ce,e.Colors=Re,e.DatasetController=A,e.Decimation=ze,e.DomPlatform=_t,e.DoughnutController=B,e.Element=Ct,e.Filler=en,e.Interaction=Q,e.Legend=rn,e.LineController=D,e.LineElement=Ae,e.LinearScale=Pn,e.LogarithmicScale=Rn,e.PieController=L,e.PointElement=we,e.PolarAreaController=T,e.RadarController=R,e.RadialLinearScale=Un,e.Scale=Dt,e.ScatterController=F,e.SubTitle=hn,e.TimeScale=Zn,e.TimeSeriesScale=ti,e.Title=ln,e.Tooltip=kn,e._adapters=V,e._detectPlatform=wt,e.animator=s,e.controllers=N,e.elements=Oe,e.layouts=st,e.plugins=In,e.registerables=ni,e.registry=Rt,e.scales=ei},878:(t,e,n)=>{"use strict";var i=n(1);const o=(()=>{let t=0;return()=>t++})();function s(t){return null==t}function r(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function a(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function l(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function c(t,e){return void 0===t?e:t}const h=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function u(t){if(r(t))return t.map(u);if(a(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let o=0;for(;o<i;++o)e[n[o]]=u(t[n[o]]);return e}return t}function d(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function f(t,e,n,i){if(!d(t))return;const o=e[t],s=n[t];a(o)&&a(s)?p(o,s,i):e[t]=u(s)}function p(t,e,n){const i=r(e)?e:[e],o=i.length;if(!a(t))return t;const s=(n=n||{}).merger||f;let l;for(let e=0;e<o;++e){if(l=i[e],!a(l))continue;const o=Object.keys(l);for(let e=0,i=o.length;e<i;++e)s(o[e],t,l,n)}return t}function g(t,e){return p(t,e,{merger:m})}function m(t,e,n){if(!d(t))return;const i=e[t],o=n[t];a(i)&&a(o)?g(i,o):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=u(o))}const b={"":t=>t,x:t=>t.x,y:t=>t.y};function x(t){const e=t.split("."),n=[];let i="";for(const t of e)i+=t,i.endsWith("\\")?i=i.slice(0,-1)+".":(n.push(i),i="");return n}function y(t,e){const n=b[e]||(b[e]=function(t){const e=x(t);return t=>{for(const n of e){if(""===n)break;t=t&&t[n]}return t}}(e));return n(t)}function v(t){return t.charAt(0).toUpperCase()+t.slice(1)}const A=t=>"function"==typeof t,_=Math.PI,w=2*_,C=w+_,k=Number.POSITIVE_INFINITY,I=_/180,E=_/2,M=_/4,S=2*_/3,O=Math.log10,P=Math.sign;function B(t,e,n){return Math.abs(t-e)<n}function D(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function T(t,e){return(t-e+C)%w-_}function L(t){return(t%w+w)%w}function R(t,e,n,i){const o=L(t),s=L(e),r=L(n),a=L(s-o),l=L(r-o),c=L(o-s),h=L(o-r);return o===s||o===r||i&&s===r||a>l&&c<h}function F(t,e,n){return Math.max(e,Math.min(n,t))}function N(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}function z(t,e,n){n=n||(n=>t[n]<e);let i,o=t.length-1,s=0;for(;o-s>1;)i=s+o>>1,n(i)?s=i:o=i;return{lo:s,hi:o}}const j=(t,e,n,i)=>z(t,n,i?i=>{const o=t[i][e];return o<n||o===n&&t[i+1][e]===n}:i=>t[i][e]<n),V=["push","pop","shift","splice","unshift"],H="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame,W=t=>0===t||1===t,U=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*w/n),Y=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*w/n)+1,$={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*E),easeOutSine:t=>Math.sin(t*E),easeInOutSine:t=>-.5*(Math.cos(_*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>W(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>W(t)?t:U(t,.075,.3),easeOutElastic:t=>W(t)?t:Y(t,.075,.3),easeInOutElastic(t){const e=.1125;return W(t)?t:t<.5?.5*U(2*t,e,.45):.5+.5*Y(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-$.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*$.easeInBounce(2*t):.5*$.easeOutBounce(2*t-1)+.5};function Q(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function q(t){return Q(t)?t:new i.Color(t).saturate(.5).darken(.1).hexString()}const K=["x","y","borderWidth","radius","tension"],X=["color","borderColor","backgroundColor"],G=new Map;function Z(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=G.get(n);return i||(i=new Intl.NumberFormat(t,e),G.set(n,i)),i}(e,n).format(t)}const J={values:t=>r(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let o,s=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(o="scientific"),s=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const r=O(Math.abs(s)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:o,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Z(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=n[e].significand||t/Math.pow(10,Math.floor(O(t)));return[1,2,3,5,10,15].includes(i)||e>.8*n.length?J.numeric.call(this,t,e,n):""}};var tt={formatters:J};const et=Object.create(null),nt=Object.create(null);function it(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function ot(t,e,n){return"string"==typeof e?p(it(t,e),n):p(it(t,""),e)}class st{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>q(e.backgroundColor),this.hoverBorderColor=(t,e)=>q(e.borderColor),this.hoverColor=(t,e)=>q(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return ot(this,t,e)}get(t){return it(this,t)}describe(t,e){return ot(nt,t,e)}override(t,e){return ot(et,t,e)}route(t,e,n,i){const o=it(this,t),s=it(this,n),r="_"+e;Object.defineProperties(o,{[r]:{value:o[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=s[i];return a(t)?Object.assign({},e,t):c(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var rt=new st({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:X},numbers:{type:"number",properties:K}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:tt.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function at(t){return!t||s(t.size)||s(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function lt(t,e,n,i,o){let s=e[o];return s||(s=e[o]=t.measureText(o).width,n.push(o)),s>i&&(i=s),i}function ct(t,e,n,i,o){let s,r,a,l,c,h,u,d;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*I;if(f&&"object"==typeof f&&(s=f.toString(),"[object HTMLImageElement]"===s||"[object HTMLCanvasElement]"===s))return t.save(),t.translate(n,i),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:o?t.ellipse(n,i,o/2,g,0,0,w):t.arc(n,i,g,0,w),t.closePath();break;case"triangle":h=o?o/2:g,t.moveTo(n+Math.sin(m)*h,i-Math.cos(m)*g),m+=S,t.lineTo(n+Math.sin(m)*h,i-Math.cos(m)*g),m+=S,t.lineTo(n+Math.sin(m)*h,i-Math.cos(m)*g),t.closePath();break;case"rectRounded":c=.516*g,l=g-c,r=Math.cos(m+M)*l,u=Math.cos(m+M)*(o?o/2-c:l),a=Math.sin(m+M)*l,d=Math.sin(m+M)*(o?o/2-c:l),t.arc(n-u,i-a,c,m-_,m-E),t.arc(n+d,i-r,c,m-E,m),t.arc(n+u,i+a,c,m,m+E),t.arc(n-d,i+r,c,m+E,m+_),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,h=o?o/2:l,t.rect(n-h,i-l,2*h,2*l);break}m+=M;case"rectRot":u=Math.cos(m)*(o?o/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(n-u,i-a),t.lineTo(n+d,i-r),t.lineTo(n+u,i+a),t.lineTo(n-d,i+r),t.closePath();break;case"crossRot":m+=M;case"cross":u=Math.cos(m)*(o?o/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(n-u,i-a),t.lineTo(n+u,i+a),t.moveTo(n+d,i-r),t.lineTo(n-d,i+r);break;case"star":u=Math.cos(m)*(o?o/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(n-u,i-a),t.lineTo(n+u,i+a),t.moveTo(n+d,i-r),t.lineTo(n-d,i+r),m+=M,u=Math.cos(m)*(o?o/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(o?o/2:g),t.moveTo(n-u,i-a),t.lineTo(n+u,i+a),t.moveTo(n+d,i-r),t.lineTo(n-d,i+r);break;case"line":r=o?o/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(n-r,i-a),t.lineTo(n+r,i+a);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(m)*(o?o/2:g),i+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function ht(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function ut(t,e,n,i,o){if(o.strikethrough||o.underline){const s=t.measureText(i),r=e-s.actualBoundingBoxLeft,a=e+s.actualBoundingBoxRight,l=n-s.actualBoundingBoxAscent,c=n+s.actualBoundingBoxDescent,h=o.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=o.decorationWidth||2,t.moveTo(r,h),t.lineTo(a,h),t.stroke()}}function dt(t,e){const n=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=n}const ft=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,pt=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function gt(t,e){const n=(""+t).match(ft);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function mt(t,e){const n={},i=a(e),o=i?Object.keys(e):e,s=a(t)?i?n=>c(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of o)n[t]=+s(t)||0;return n}function bt(t){return mt(t,{top:"y",right:"x",bottom:"y",left:"x"})}function xt(t,e){return Object.assign(Object.create(t),e)}function yt(t,e=[""],n,i,o=()=>t[0]){const s=n||t;void 0===i&&(i=St("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:s,_fallback:i,_getTarget:o,override:n=>yt([n,...t],e,s,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>wt(n,i,(()=>function(t,e,n,i){let o;for(const s of e)if(o=St(At(s,t),n),void 0!==o)return _t(t,o)?Et(n,i,t,o):o}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Ot(t).includes(e),ownKeys:t=>Ot(t),set(t,e,n){const i=t._storage||(t._storage=o());return t[e]=i[e]=n,delete t._keys,!0}})}function vt(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:o=e.allKeys}=t;return{allKeys:o,scriptable:n,indexable:i,isScriptable:A(n)?n:()=>n,isIndexable:A(i)?i:()=>i}}const At=(t,e)=>t?t+v(e):e,_t=(t,e)=>a(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function wt(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e)||"constructor"===e)return t[e];const i=n();return t[e]=i,i}function Ct(t,e,n){return A(t)?t(e,n):t}const kt=(t,e)=>!0===t?e:"string"==typeof t?y(e,t):void 0;function It(t,e,n,i,o){for(const s of e){const e=kt(n,s);if(e){t.add(e);const s=Ct(e._fallback,n,o);if(void 0!==s&&s!==n&&s!==i)return s}else if(!1===e&&void 0!==i&&n!==i)return null}return!1}function Et(t,e,n,i){const o=e._rootScopes,s=Ct(e._fallback,n,i),l=[...t,...o],c=new Set;c.add(i);let h=Mt(c,l,n,s||n,i);return null!==h&&(void 0===s||s===n||(h=Mt(c,l,s,h,i),null!==h))&&yt(Array.from(c),[""],o,s,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const o=i[e];return r(o)&&a(n)?n:o||{}}(e,n,i)))}function Mt(t,e,n,i,o){for(;n;)n=It(t,e,n,i,o);return n}function St(t,e){for(const n of e){if(!n)continue;const e=n[t];if(void 0!==e)return e}}function Ot(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Pt=Number.EPSILON||1e-14,Bt=(t,e)=>e<t.length&&!t[e].skip&&t[e],Dt=t=>"x"===t?"y":"x";function Tt(t,e,n,i){const o=t.skip?e:t,s=e,r=n.skip?e:n,a=D(s,o),l=D(r,s);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const u=i*c,d=i*h;return{previous:{x:s.x-u*(r.x-o.x),y:s.y-u*(r.y-o.y)},next:{x:s.x+d*(r.x-o.x),y:s.y+d*(r.y-o.y)}}}function Lt(t,e="x"){const n=Dt(e),i=t.length,o=Array(i).fill(0),s=Array(i);let r,a,l,c=Bt(t,0);for(r=0;r<i;++r)if(a=l,l=c,c=Bt(t,r+1),l){if(c){const t=c[e]-l[e];o[r]=0!==t?(c[n]-l[n])/t:0}s[r]=a?c?P(o[r-1])!==P(o[r])?0:(o[r-1]+o[r])/2:o[r-1]:o[r]}!function(t,e,n){const i=t.length;let o,s,r,a,l,c=Bt(t,0);for(let h=0;h<i-1;++h)l=c,c=Bt(t,h+1),l&&c&&(B(e[h],0,Pt)?n[h]=n[h+1]=0:(o=n[h]/e[h],s=n[h+1]/e[h],a=Math.pow(o,2)+Math.pow(s,2),a<=9||(r=3/Math.sqrt(a),n[h]=o*r*e[h],n[h+1]=s*r*e[h])))}(t,o,s),function(t,e,n="x"){const i=Dt(n),o=t.length;let s,r,a,l=Bt(t,0);for(let c=0;c<o;++c){if(r=a,a=l,l=Bt(t,c+1),!a)continue;const o=a[n],h=a[i];r&&(s=(o-r[n])/3,a[`cp1${n}`]=o-s,a[`cp1${i}`]=h-s*e[c]),l&&(s=(l[n]-o)/3,a[`cp2${n}`]=o+s,a[`cp2${i}`]=h+s*e[c])}}(t,s,e)}function Rt(t,e,n){return Math.max(Math.min(t,n),e)}function Ft(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Nt(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function zt(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}const jt=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);function Vt(t,e){return jt(t).getPropertyValue(e)}const Ht=["top","right","bottom","left"];function Wt(t,e,n){const i={};n=n?"-"+n:"";for(let o=0;o<4;o++){const s=Ht[o];i[s]=parseFloat(t[e+"-"+s+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}const Ut=t=>Math.round(10*t)/10,Yt=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};Ft()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function $t(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function Qt(t){return"angle"===t?{between:R,compare:T,normalize:L}:{between:N,compare:(t,e)=>t-e,normalize:t=>t}}function qt({start:t,end:e,count:n,loop:i,style:o}){return{start:t%n,end:e%n,loop:i&&(e-t+1)%n==0,style:o}}function Kt(t,e,n){if(!n)return[t];const{property:i,start:o,end:s}=n,r=e.length,{compare:a,between:l,normalize:c}=Qt(i),{start:h,end:u,loop:d,style:f}=function(t,e,n){const{property:i,start:o,end:s}=n,{between:r,normalize:a}=Qt(i),l=e.length;let c,h,{start:u,end:d,loop:f}=t;if(f){for(u+=l,d+=l,c=0,h=l;c<h&&r(a(e[u%l][i]),o,s);++c)u--,d--;u%=l,d%=l}return d<u&&(d+=l),{start:u,end:d,loop:f,style:t.style}}(t,e,n),p=[];let g,m,b,x=!1,y=null;for(let t=h,n=h;t<=u;++t)m=e[t%r],m.skip||(g=c(m[i]),g!==b&&(x=l(g,o,s),null===y&&(x||l(o,b,g)&&0!==a(o,b))&&(y=0===a(g,o)?t:n),null!==y&&(!x||0===a(s,g)||l(s,b,g))&&(p.push(qt({start:y,end:t,loop:d,count:r,style:f})),y=null),n=t,b=g));return null!==y&&p.push(qt({start:y,end:u,loop:d,count:r,style:f})),p}function Xt(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Gt(t,e){if(!e)return!1;const n=[],i=function(t,e){return Q(e)?(n.includes(e)||n.push(e),n.indexOf(e)):e};return JSON.stringify(t,i)!==JSON.stringify(e,i)}e.HALF_PI=E,e.INFINITY=k,e.PI=_,e.PITAU=C,e.QUARTER_PI=M,e.RAD_PER_DEG=I,e.TAU=w,e.TWO_THIRDS_PI=S,e.Ticks=tt,e._addGrace=function(t,e,n){const{min:i,max:o}=t,s=h(e,(o-i)/2),r=(t,e)=>n&&0===t?0:t+e;return{min:r(i,-Math.abs(s)),max:r(o,s)}},e._alignPixel=function(t,e,n){const i=t.currentDevicePixelRatio,o=0!==n?Math.max(n/2,.5):0;return Math.round((e-o)*i)/i+o},e._alignStartEnd=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2,e._angleBetween=R,e._angleDiff=T,e._arrayUnique=function(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)},e._attachContext=function t(e,n,i,o){const s={_cacheable:!1,_proxy:e,_context:n,_subProxy:i,_stack:new Set,_descriptors:vt(e,o),setContext:n=>t(e,n,i,o),override:s=>t(e.override(s),n,i,o)};return new Proxy(s,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,n,i)=>wt(e,n,(()=>function(e,n,i){const{_proxy:o,_context:s,_subProxy:l,_descriptors:c}=e;let h=o[n];return A(h)&&c.isScriptable(n)&&(h=function(t,e,n,i){const{_proxy:o,_context:s,_subProxy:r,_stack:a}=n;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(s,r||i);return a.delete(t),_t(t,l)&&(l=Et(o._scopes,o,t,l)),l}(n,h,e,i)),r(h)&&h.length&&(h=function(e,n,i,o){const{_proxy:s,_context:r,_subProxy:l,_descriptors:c}=i;if(void 0!==r.index&&o(e))return n[r.index%n.length];if(a(n[0])){const i=n,o=s._scopes.filter((t=>t!==i));n=[];for(const a of i){const i=Et(o,s,e,a);n.push(t(i,r,l&&l[e],c))}}return n}(n,h,e,c.isIndexable)),_t(n,h)&&(h=t(h,s,l&&l[n],c)),h}(e,n,i))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,i)=>(e[n]=i,delete t[n],!0)})},e._bezierCurveTo=function(t,e,n,i){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)},e._bezierInterpolation=function(t,e,n,i){const o={x:t.cp2x,y:t.cp2y},s={x:e.cp1x,y:e.cp1y},r=$t(t,o,n),a=$t(o,s,n),l=$t(s,e,n),c=$t(r,a,n),h=$t(a,l,n);return $t(c,h,n)},e._boundSegment=Kt,e._boundSegments=function(t,e){const n=[],i=t.segments;for(let o=0;o<i.length;o++){const s=Kt(i[o],t.points,e);s.length&&n.push(...s)}return n},e._capitalize=v,e._computeSegments=function(t,e){const n=t.points,i=t.options.spanGaps,o=n.length;if(!o)return[];const s=!!t._loop,{start:r,end:a}=function(t,e,n,i){let o=0,s=e-1;if(n&&!i)for(;o<e&&!t[o].skip;)o++;for(;o<e&&t[o].skip;)o++;for(o%=e,n&&(s+=o);s>o&&t[s%e].skip;)s--;return s%=e,{start:o,end:s}}(n,o,s,i);return function(t,e,n,i){return i&&i.setContext&&n?function(t,e,n,i){const o=t._chart.getContext(),s=Xt(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=n.length,c=[];let h=s,u=e[0].start,d=u;function f(t,e,i,o){const s=a?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=s;for(;n[e%l].skip;)e+=s;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:i,style:o}),h=o,u=e%l)}}for(const t of e){u=a?u:t.start;let e,s=n[u%l];for(d=u+1;d<=t.end;d++){const a=n[d%l];e=Xt(i.setContext(xt(o,{type:"segment",p0:s,p1:a,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:r}))),Gt(e,h)&&f(u,d-1,t.loop,h),s=a,h=e}u<d-1&&f(u,d-1,t.loop,h)}return c}(t,e,n,i):e}(t,!0===i?[{start:r,end:a,loop:s}]:function(t,e,n,i){const o=t.length,s=[];let r,a=e,l=t[e];for(r=e+1;r<=n;++r){const n=t[r%o];n.skip||n.stop?l.skip||(i=!1,s.push({start:e%o,end:(r-1)%o,loop:i}),e=a=n.stop?r:null):(a=r,l.skip&&(e=r)),l=n}return null!==a&&s.push({start:e%o,end:a%o,loop:i}),s}(n,r,a<r?a+o:a,!!t._fullLoop&&0===r&&a===o-1),n,e)},e._createResolver=yt,e._decimalPlaces=function(t){if(!l(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n},e._deprecated=function(t,e,n,i){void 0!==e&&console.warn(t+': "'+n+'" is deprecated. Please use "'+i+'" instead')},e._descriptors=vt,e._elementsEqual=function(t,e){let n,i,o,s;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(o=t[n],s=e[n],o.datasetIndex!==s.datasetIndex||o.index!==s.index)return!1;return!0},e._factorize=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e},e._filterBetween=function(t,e,n){let i=0,o=t.length;for(;i<o&&t[i]<e;)i++;for(;o>i&&t[o-1]>n;)o--;return i>0||o<t.length?t.slice(i,o):t},e._getParentNode=Nt,e._getStartAndCountOfVisiblePoints=function(t,e,n){const i=e.length;let o=0,s=i;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:c,max:h,minDefined:u,maxDefined:d}=r.getUserBounds();u&&(o=F(Math.min(j(a,l,c).lo,n?i:j(e,l,r.getPixelForValue(c)).lo),0,i-1)),s=d?F(Math.max(j(a,r.axis,h,!0).hi+1,n?0:j(e,l,r.getPixelForValue(h),!0).hi+1),o,i)-o:i-o}return{start:o,count:s}},e._int16Range=function(t){return F(t,-32768,32767)},e._isBetween=N,e._isClickEvent=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type},e._isDomSupported=Ft,e._isPointInArea=ht,e._limitValue=F,e._longestText=function(t,e,n,i){let o=(i=i||{}).data=i.data||{},s=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(o=i.data={},s=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let a=0;const l=n.length;let c,h,u,d,f;for(c=0;c<l;c++)if(d=n[c],null==d||r(d)){if(r(d))for(h=0,u=d.length;h<u;h++)f=d[h],null==f||r(f)||(a=lt(t,o,s,a,f))}else a=lt(t,o,s,a,d);t.restore();const p=s.length/2;if(p>n.length){for(c=0;c<p;c++)delete o[s[c]];s.splice(0,p)}return a},e._lookup=z,e._lookupByKey=j,e._measureText=lt,e._merger=f,e._mergerIf=m,e._normalizeAngle=L,e._parseObjectDataRadialScale=function(t,e,n,i){const{iScale:o}=t,{key:s="r"}=this._parsing,r=new Array(i);let a,l,c,h;for(a=0,l=i;a<l;++a)c=a+n,h=e[c],r[a]={r:o.parse(y(h,s),c)};return r},e._pointInLine=$t,e._readValueToProps=mt,e._rlookupByKey=(t,e,n)=>z(t,n,(i=>t[i][e]>=n)),e._scaleRangesChanged=function(t){const{xScale:e,yScale:n,_scaleRanges:i}=t,o={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!i)return t._scaleRanges=o,!0;const s=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,o),s},e._setMinAndMaxByKey=function(t,e,n){let i,o,s;for(i=0,o=t.length;i<o;i++)s=t[i][n],isNaN(s)||(e.min=Math.min(e.min,s),e.max=Math.max(e.max,s))},e._splitKey=x,e._steppedInterpolation=function(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:"middle"===i?n<.5?t.y:e.y:"after"===i?n<1?t.y:e.y:n>0?e.y:t.y}},e._steppedLineTo=function(t,e,n,i,o){if(!e)return t.lineTo(n.x,n.y);if("middle"===o){const i=(e.x+n.x)/2;t.lineTo(i,e.y),t.lineTo(i,n.y)}else"after"===o!=!!i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)},e._textX=(t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e,e._toLeftRightCenter=t=>"start"===t?"left":"end"===t?"right":"center",e._updateBezierControlPoints=function(t,e,n,i,o){let s,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)Lt(t,o);else{let n=i?t[t.length-1]:t[0];for(s=0,r=t.length;s<r;++s)a=t[s],l=Tt(n,a,t[Math.min(s+1,r-(i?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}e.capBezierPoints&&function(t,e){let n,i,o,s,r,a=ht(t[0],e);for(n=0,i=t.length;n<i;++n)r=s,s=a,a=n<i-1&&ht(t[n+1],e),s&&(o=t[n],r&&(o.cp1x=Rt(o.cp1x,e.left,e.right),o.cp1y=Rt(o.cp1y,e.top,e.bottom)),a&&(o.cp2x=Rt(o.cp2x,e.left,e.right),o.cp2y=Rt(o.cp2y,e.top,e.bottom)))}(t,n)},e.addRoundedRectPath=function(t,e){const{x:n,y:i,w:o,h:s,radius:r}=e;t.arc(n+r.topLeft,i+r.topLeft,r.topLeft,1.5*_,_,!0),t.lineTo(n,i+s-r.bottomLeft),t.arc(n+r.bottomLeft,i+s-r.bottomLeft,r.bottomLeft,_,E,!0),t.lineTo(n+o-r.bottomRight,i+s),t.arc(n+o-r.bottomRight,i+s-r.bottomRight,r.bottomRight,E,0,!0),t.lineTo(n+o,i+r.topRight),t.arc(n+o-r.topRight,i+r.topRight,r.topRight,0,-E,!0),t.lineTo(n+r.topLeft,i)},e.almostEquals=B,e.almostWhole=function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t},e.callback=function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},e.clearCanvas=function(t,e){(e||t)&&((e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore())},e.clipArea=function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},e.clone=u,e.color=function(t){return Q(t)?t:new i.Color(t)},e.createContext=xt,e.debounce=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}},e.defaults=rt,e.defined=t=>void 0!==t,e.descriptors=nt,e.distanceBetweenPoints=D,e.drawPoint=function(t,e,n,i){ct(t,e,n,i,null)},e.drawPointLegend=ct,e.each=function(t,e,n,i){let o,s,l;if(r(t))if(s=t.length,i)for(o=s-1;o>=0;o--)e.call(n,t[o],o);else for(o=0;o<s;o++)e.call(n,t[o],o);else if(a(t))for(l=Object.keys(t),s=l.length,o=0;o<s;o++)e.call(n,t[l[o]],l[o])},e.effects=$,e.finiteOrDefault=function(t,e){return l(t)?t:e},e.fontString=function(t,e,n){return e+" "+t+"px "+n},e.formatNumber=Z,e.getAngleFromPoint=function(t,e){const n=e.x-t.x,i=e.y-t.y,o=Math.sqrt(n*n+i*i);let s=Math.atan2(i,n);return s<-.5*_&&(s+=w),{angle:s,distance:o}},e.getHoverColor=q,e.getMaximumSize=function(t,e,n,i){const o=jt(t),s=Wt(o,"margin"),r=zt(o.maxWidth,t,"clientWidth")||k,a=zt(o.maxHeight,t,"clientHeight")||k,l=function(t,e,n){let i,o;if(void 0===e||void 0===n){const s=t&&Nt(t);if(s){const t=s.getBoundingClientRect(),r=jt(s),a=Wt(r,"border","width"),l=Wt(r,"padding");e=t.width-l.width-a.width,n=t.height-l.height-a.height,i=zt(r.maxWidth,s,"clientWidth"),o=zt(r.maxHeight,s,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||k,maxHeight:o||k}}(t,e,n);let{width:c,height:h}=l;if("content-box"===o.boxSizing){const t=Wt(o,"border","width"),e=Wt(o,"padding");c-=e.width+t.width,h-=e.height+t.height}return c=Math.max(0,c-s.width),h=Math.max(0,i?c/i:h-s.height),c=Ut(Math.min(c,r,l.maxWidth)),h=Ut(Math.min(h,a,l.maxHeight)),c&&!h&&(h=Ut(c/2)),(void 0!==e||void 0!==n)&&i&&l.height&&h>l.height&&(h=l.height,c=Ut(Math.floor(h*i))),{width:c,height:h}},e.getRelativePosition=function(t,e){if("native"in t)return t;const{canvas:n,currentDevicePixelRatio:i}=e,o=jt(n),s="border-box"===o.boxSizing,r=Wt(o,"padding"),a=Wt(o,"border","width"),{x:l,y:c,box:h}=function(t,e){const n=t.touches,i=n&&n.length?n[0]:t,{offsetX:o,offsetY:s}=i;let r,a,l=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(o,s,t.target))r=o,a=s;else{const t=e.getBoundingClientRect();r=i.clientX-t.left,a=i.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,n),u=r.left+(h&&a.left),d=r.top+(h&&a.top);let{width:f,height:p}=e;return s&&(f-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-u)/f*n.width/i),y:Math.round((c-d)/p*n.height/i)}},e.getRtlAdapter=function(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}},e.getStyle=Vt,e.isArray=r,e.isFunction=A,e.isNullOrUndef=s,e.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},e.isNumberFinite=l,e.isObject=a,e.isPatternOrGradient=Q,e.listenArrayEvents=function(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),V.forEach((e=>{const n="_onData"+v(e),i=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const o=i.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[n]&&t[n](...e)})),o}})})))},e.log10=O,e.merge=p,e.mergeIf=g,e.niceNum=function(t){const e=Math.round(t);t=B(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(O(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n},e.noop=function(){},e.overrideTextDirection=function(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)},e.overrides=et,e.readUsedSize=function(t,e){const n=Vt(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0},e.renderText=function(t,e,n,i,o,a={}){const l=r(e)?e:[e],c=a.strokeWidth>0&&""!==a.strokeColor;let h,u;for(t.save(),t.font=o.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),s(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,a),h=0;h<l.length;++h)u=l[h],a.backdrop&&dt(t,a.backdrop),c&&(a.strokeColor&&(t.strokeStyle=a.strokeColor),s(a.strokeWidth)||(t.lineWidth=a.strokeWidth),t.strokeText(u,n,i,a.maxWidth)),t.fillText(u,n,i,a.maxWidth),ut(t,n,i,u,a),i+=Number(o.lineHeight);t.restore()},e.requestAnimFrame=H,e.resolve=function(t,e,n,i){let o,s,a,l=!0;for(o=0,s=t.length;o<s;++o)if(a=t[o],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),l=!1),void 0!==n&&r(a)&&(a=a[n%a.length],l=!1),void 0!==a))return i&&!l&&(i.cacheable=!1),a},e.resolveObjectKey=y,e.restoreTextDirection=function(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))},e.retinaScale=function(t,e,n){const i=e||1,o=Math.floor(t.height*i),s=Math.floor(t.width*i);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(n||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||r.height!==o||r.width!==s)&&(t.currentDevicePixelRatio=i,r.height=o,r.width=s,t.ctx.setTransform(i,0,0,i,0,0),!0)},e.setsEqual=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},e.sign=P,e.splineCurve=Tt,e.splineCurveMonotone=Lt,e.supportsEventListenerOptions=Yt,e.throttled=function(t,e){let n=[],i=!1;return function(...o){n=o,i||(i=!0,H.call(window,(()=>{i=!1,t.apply(e,n)})))}},e.toDegrees=function(t){return t*(180/_)},e.toDimension=h,e.toFont=function(t,e){t=t||{},e=e||rt.font;let n=c(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=c(t.style,e.style);i&&!(""+i).match(pt)&&(console.warn('Invalid font style specified: "'+i+'"'),i=void 0);const o={family:c(t.family,e.family),lineHeight:gt(c(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:c(t.weight,e.weight),string:""};return o.string=at(o),o},e.toFontString=at,e.toLineHeight=gt,e.toPadding=function(t){const e=bt(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e},e.toPercentage=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:+t/e,e.toRadians=function(t){return t*(_/180)},e.toTRBL=bt,e.toTRBLCorners=function(t){return mt(t,["topLeft","topRight","bottomLeft","bottomRight"])},e.uid=o,e.unclipArea=function(t){t.restore()},e.unlistenArrayEvents=function(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,o=i.indexOf(e);-1!==o&&i.splice(o,1),i.length>0||(V.forEach((e=>{delete t[e]})),delete t._chartjs)},e.valueOrDefault=c}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var s=e[i]={id:i,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.p="/",n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";n(323);var t=n(475);new function(){new t.Router}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,